<?xml version="1.0" ?> 
<top id="1" addr="0143b5a0">
    <attributelist id="2" addr="0143b5a0">
        <attribute name="name" value="glm" id="3" addr="014622b0" />
        <attribute name="module" value="glm" id="4" addr="0144e7f0" />
        <attribute name="inputfile" value="C:\\flash\\src\\swig_glm.i" id="5" addr="014622b0" />
        <attribute name="infile" value="C:\\flash\\src\\swig_glm.i" id="6" addr="014622b0" />
        <attribute name="classes" value="0143d540" id="7" addr="0143d540" />
        <attribute name="outfile_h" value="C:\\flash\\build\\x64-debug\\src\\swig_glmLUA_wrap.h" id="8" addr="014622b0" />
        <attribute name="outfile" value="C:\\flash\\build\\x64-debug\\src\\swig_glmLUA_wrap.cxx" id="9" addr="014622b0" />
    </attributelist>

    <include id="10" addr="0143b570">
        <attributelist id="11" addr="0143b570">
            <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\swig.swg" id="12" addr="014622b0" />
        </attributelist>

        <include id="13" addr="0143b5c0">
            <attributelist id="14" addr="0143b5c0">
                <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\swigwarnings.swg" id="15" addr="014622b0" />
            </attributelist>

            <include id="16" addr="0143b5e0">
                <attributelist id="17" addr="0143b5e0">
                    <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\swigwarn.swg" id="18" addr="014622b0" />
                </attributelist>
             
            </include>
        </include>
        <include id="19" addr="0143bd10">
            <attributelist id="20" addr="0143bd10">
                <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\swigfragments.swg" id="21" addr="014622b0" />
            </attributelist>

            <fragment id="22" addr="0143be50">
                <attributelist id="23" addr="0143be50">
                    <attribute name="section" value="header" id="24" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;float.h>&#10;" id="25" addr="014622b0" />
                    <attribute name="value" value="&lt;float.h>" id="26" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="27" addr="0143bf20">
                <attributelist id="28" addr="0143bf20">
                    <attribute name="section" value="header" id="29" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;limits.h>&#10;#if !defined(SWIG_NO_LLONG_MAX)&#10;# if !defined(LLONG_MAX) &amp;&amp; defined(__GNUC__) &amp;&amp; defined (__LONG_LONG_MAX__)&#10;#   define LLONG_MAX __LONG_LONG_MAX__&#10;#   define LLONG_MIN (-LLONG_MAX - 1LL)&#10;#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)&#10;# endif&#10;#endif&#10;" id="30" addr="014622b0" />
                    <attribute name="value" value="&lt;limits.h>" id="31" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="32" addr="0143bfc0">
                <attributelist id="33" addr="0143bfc0">
                    <attribute name="section" value="header" id="34" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;math.h>&#10;" id="35" addr="014622b0" />
                    <attribute name="value" value="&lt;math.h>" id="36" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="37" addr="0143c050">
                <attributelist id="38" addr="0143c050">
                    <attribute name="section" value="header" id="39" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;string.h>&#10;" id="40" addr="014622b0" />
                    <attribute name="value" value="&lt;string.h>" id="41" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="42" addr="0143c0e0">
                <attributelist id="43" addr="0143c0e0">
                    <attribute name="section" value="header" id="44" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;stddef.h>&#10;" id="45" addr="014622b0" />
                    <attribute name="value" value="&lt;stddef.h>" id="46" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="47" addr="0143c170">
                <attributelist id="48" addr="0143c170">
                    <attribute name="section" value="header" id="49" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;stdio.h>&#10;#if (defined(_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1900)) || defined(__BORLANDC__) || defined(_WATCOM)&#10;# ifndef snprintf&#10;#  define snprintf _snprintf&#10;# endif&#10;#endif&#10;" id="50" addr="014622b0" />
                    <attribute name="value" value="&lt;stdio.h>" id="51" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="52" addr="0143c200">
                <attributelist id="53" addr="0143c200">
                    <attribute name="section" value="header" id="54" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;stdlib.h>&#10;#ifdef _MSC_VER&#10;# ifndef strtoull&#10;#  define strtoull _strtoui64&#10;# endif&#10;# ifndef strtoll&#10;#  define strtoll _strtoi64&#10;# endif&#10;#endif&#10;" id="55" addr="014622b0" />
                    <attribute name="value" value="&lt;stdlib.h>" id="56" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="57" addr="0143c290">
                <attributelist id="58" addr="0143c290">
                    <attribute name="section" value="header" id="59" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;wchar.h>&#10;#include &lt;limits.h>&#10;#ifndef WCHAR_MIN&#10;#  define WCHAR_MIN 0&#10;#endif&#10;#ifndef WCHAR_MAX&#10;#  define WCHAR_MAX 65535&#10;#endif&#10;" id="60" addr="014622b0" />
                    <attribute name="value" value="&lt;wchar.h>" id="61" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="62" addr="0143c320">
                <attributelist id="63" addr="0143c320">
                    <attribute name="section" value="header" id="64" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;algorithm>&#10;" id="65" addr="014622b0" />
                    <attribute name="value" value="&lt;algorithm>" id="66" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="67" addr="0143c3b0">
                <attributelist id="68" addr="0143c3b0">
                    <attribute name="section" value="header" id="69" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;stdexcept>&#10;" id="70" addr="014622b0" />
                    <attribute name="value" value="&lt;stdexcept>" id="71" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="72" addr="0143c440">
                <attributelist id="73" addr="0143c440">
                    <attribute name="section" value="header" id="74" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;string>&#10;" id="75" addr="014622b0" />
                    <attribute name="value" value="&lt;string>" id="76" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <fragment id="77" addr="0143c4d0">
                <attributelist id="78" addr="0143c4d0">
                    <attribute name="section" value="header" id="79" addr="014622b0" />
                    <attribute name="code" value="&#10;#include &lt;memory>&#10;" id="80" addr="014622b0" />
                    <attribute name="value" value="&lt;memory>" id="81" addr="014622b0" />
                </attributelist>
             
            </fragment>
        </include>
        <namespace id="82" addr="0143d240">
            <attributelist id="83" addr="0143d240">
                <attribute name="name" value="std" id="84" addr="014622b0" />
                <attribute name="typescope" value="01453440" id="85" addr="01453440" />
                <attribute name="symtab" value="0143d2a0" id="86" addr="0143d2a0" />
                <attribute name="sym_name" value="std" id="87" addr="014622b0" />
                <attribute name="sym_overname" value="__SWIG_0" id="88" addr="014622b0" />
                <attribute name="sym_symtab" value="01432500" id="89" addr="01432500" />
            </attributelist>

            <template id="90" addr="0143d390">
                <attributelist id="91" addr="0143d390">
                    <attribute name="kind" value="class" id="92" addr="014622b0" />
                    <templateparms id="93" addr="0143d330">
                        <parm id="94">
                            <attributelist id="95" addr="0143d330">
                                <attribute name="type" value="typename T" id="96" addr="014622b0" />
                                <attribute name="name" value="T" id="97" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </templateparms>
                    <attribute name="sym_name" value="initializer_list" id="98" addr="014622b0" />
                    <attribute name="sym_typename" value="1" id="99" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="100" addr="014622b0" />
                    <attribute name="templatetype" value="class" id="101" addr="014622b0" />
                    <attribute name="allows_typedef" value="1" id="102" addr="014622b0" />
                    <attribute name="sym_symtab" value="0143d2a0" id="103" addr="0143d2a0" />
                    <attribute name="symtab" value="0143d4a0" id="104" addr="0143d4a0" />
                    <attribute name="name" value="initializer_list" id="105" addr="014622b0" />
                </attributelist>

                <access id="106" addr="0143d580">
                    <attributelist id="107" addr="0143d580">
                        <attribute name="kind" value="public" id="108" addr="014622b0" />
                    </attributelist>
                 
                </access>
            </template>
            <typemap id="109" addr="0143d8b0">
                <attributelist id="110" addr="0143d8b0">
                    <attribute name="code" value="" id="111" addr="014622b0" />
                    <attribute name="method" value="in" id="112" addr="014622b0" />
                    <kwargs id="113" addr="014550e0">
                        <attributelist id="114" addr="014550e0">
                            <attribute name="name" value="numinputs" id="115" addr="014622b0" />
                            <attribute name="value" value="1" id="116" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="117" addr="014550f0">
                            <attributelist id="118" addr="014550f0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="119" addr="0143d730">
                            <attributelist id="120" addr="0143d730">
                                <attribute name="name" value="warning" id="121" addr="014622b0" />
                                <attribute name="value" value="476:Initialization using std::initializer_list." id="122" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="123" addr="01455100">
                            <attributelist id="124" addr="01455100">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="125" addr="0143d840">
                    <attributelist id="126" addr="0143d840">
                        <parmlist id="127" addr="0143d860">
                            <parm id="128">
                                <attributelist id="129" addr="0143d860">
                                    <attribute name="type" value="std::initializer_list&lt;(T)>" id="130" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="131" addr="0143da40">
                <attributelist id="132" addr="0143da40">
                    <attribute name="code" value="" id="133" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="134" addr="014622b0" />
                    <kwargs id="135" addr="0143d910">
                        <attributelist id="136" addr="0143d910">
                            <attribute name="name" value="precedence" id="137" addr="014622b0" />
                            <attribute name="value" value="0" id="138" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="139" addr="0143d920">
                            <attributelist id="140" addr="0143d920">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="141" addr="0143d930">
                            <attributelist id="142" addr="0143d930">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="143" addr="0143d9e0">
                    <attributelist id="144" addr="0143d9e0">
                        <parmlist id="145" addr="0143da00">
                            <parm id="146">
                                <attributelist id="147" addr="0143da00">
                                    <attribute name="type" value="std::initializer_list&lt;(T)>" id="148" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
        </namespace>
        <typemap id="149" addr="0143db20">
            <attributelist id="150" addr="0143db20">
                <attribute name="code" value="delete [] $1;" id="151" addr="014622b0" />
                <attribute name="method" value="newfree" id="152" addr="014622b0" />
            </attributelist>

            <typemapitem id="153" addr="0143dac0">
                <attributelist id="154" addr="0143dac0">
                    <parmlist id="155" addr="0143dae0">
                        <parm id="156">
                            <attributelist id="157" addr="0143dae0">
                                <attribute name="type" value="p.char" id="158" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="159" addr="0143dc40">
            <attributelist id="160" addr="0143dc40">
                <attribute name="code" value="{&#10;  delete [] $1;&#10;  if ($input) {&#10;     $1 = ($1_type) (new char[strlen((const char *)$input)+1]);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="161" addr="014622b0" />
                <attribute name="method" value="memberin" id="162" addr="014622b0" />
                <kwargs id="163" addr="0143db70">
                    <attributelist id="164" addr="0143db70">
                        <attribute name="name" value="fragment" id="165" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="166" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="167" addr="0143db80">
                        <attributelist id="168" addr="0143db80">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="169" addr="0143db60">
                        <attributelist id="170" addr="0143db60">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="171" addr="0143dbe0">
                <attributelist id="172" addr="0143dbe0">
                    <parmlist id="173" addr="0143dc00">
                        <parm id="174">
                            <attributelist id="175" addr="0143dc00">
                                <attribute name="type" value="p.char" id="176" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="177" addr="0143dda0">
            <attributelist id="178" addr="0143dda0">
                <attribute name="code" value="{&#10;  if ($input) {&#10;     $1 = ($1_type) (new char[strlen((const char *)$input)+1]);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="179" addr="014622b0" />
                <attribute name="method" value="memberin" id="180" addr="014622b0" />
                <kwargs id="181" addr="0143dcc0">
                    <attributelist id="182" addr="0143dcc0">
                        <attribute name="name" value="warning" id="183" addr="014622b0" />
                        <attribute name="value" value="451:Setting a const char * variable may leak memory." id="184" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="185" addr="0143dcd0">
                        <attributelist id="186" addr="0143dcd0">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="187" addr="0143dca0">
                        <attributelist id="188" addr="0143dca0">
                            <attribute name="name" value="fragment" id="189" addr="014622b0" />
                            <attribute name="value" value="&lt;string.h>" id="190" addr="014622b0" />
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="191" addr="0143dc80">
                        <attributelist id="192" addr="0143dc80">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="193" addr="0143dd40">
                <attributelist id="194" addr="0143dd40">
                    <parmlist id="195" addr="0143dd60">
                        <parm id="196">
                            <attributelist id="197" addr="0143dd60">
                                <attribute name="type" value="p.q(const).char" id="198" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="199" addr="0143dec0">
            <attributelist id="200" addr="0143dec0">
                <attribute name="code" value="{&#10;  delete [] $1;&#10;  if ($input) {&#10;     $1 = ($1_type) (new char[strlen((const char *)$input)+1]);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="201" addr="014622b0" />
                <attribute name="method" value="globalin" id="202" addr="014622b0" />
                <kwargs id="203" addr="0143ddf0">
                    <attributelist id="204" addr="0143ddf0">
                        <attribute name="name" value="fragment" id="205" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="206" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="207" addr="0143de00">
                        <attributelist id="208" addr="0143de00">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="209" addr="0143dde0">
                        <attributelist id="210" addr="0143dde0">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="211" addr="0143de60">
                <attributelist id="212" addr="0143de60">
                    <parmlist id="213" addr="0143de80">
                        <parm id="214">
                            <attributelist id="215" addr="0143de80">
                                <attribute name="type" value="p.char" id="216" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="217" addr="0143e020">
            <attributelist id="218" addr="0143e020">
                <attribute name="code" value="{&#10;  if ($input) {&#10;     $1 = ($1_type) (new char[strlen((const char *)$input)+1]);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="219" addr="014622b0" />
                <attribute name="method" value="globalin" id="220" addr="014622b0" />
                <kwargs id="221" addr="0143df40">
                    <attributelist id="222" addr="0143df40">
                        <attribute name="name" value="warning" id="223" addr="014622b0" />
                        <attribute name="value" value="451:Setting a const char * variable may leak memory." id="224" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="225" addr="0143df50">
                        <attributelist id="226" addr="0143df50">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="227" addr="0143df20">
                        <attributelist id="228" addr="0143df20">
                            <attribute name="name" value="fragment" id="229" addr="014622b0" />
                            <attribute name="value" value="&lt;string.h>" id="230" addr="014622b0" />
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="231" addr="0143df00">
                        <attributelist id="232" addr="0143df00">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="233" addr="0143dfc0">
                <attributelist id="234" addr="0143dfc0">
                    <parmlist id="235" addr="0143dfe0">
                        <parm id="236">
                            <attributelist id="237" addr="0143dfe0">
                                <attribute name="type" value="p.q(const).char" id="238" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="239" addr="0143e160">
            <attributelist id="240" addr="0143e160">
                <attribute name="code" value="{&#10;  if($input) {&#10;    strncpy((char*)$1, (const char *)$input, $1_dim0-1);&#10;    $1[$1_dim0-1] = 0;&#10;  } else {&#10;    $1[0] = 0;&#10;  }&#10;}" id="241" addr="014622b0" />
                <attribute name="method" value="memberin" id="242" addr="014622b0" />
                <kwargs id="243" addr="0143e070">
                    <attributelist id="244" addr="0143e070">
                        <attribute name="name" value="fragment" id="245" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="246" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="247" addr="0143e080">
                        <attributelist id="248" addr="0143e080">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="249" addr="0143e060">
                        <attributelist id="250" addr="0143e060">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="251" addr="0143e100">
                <attributelist id="252" addr="0143e100">
                    <parmlist id="253" addr="0143e120">
                        <parm id="254">
                            <attributelist id="255" addr="0143e120">
                                <attribute name="type" value="a(ANY).char" id="256" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="257" addr="0143e2a0">
            <attributelist id="258" addr="0143e2a0">
                <attribute name="code" value="{&#10;  if($input) {&#10;    strncpy((char*)$1, (const char *)$input, $1_dim0-1);&#10;    $1[$1_dim0-1] = 0;&#10;  } else {&#10;    $1[0] = 0;&#10;  }&#10;}" id="259" addr="014622b0" />
                <attribute name="method" value="globalin" id="260" addr="014622b0" />
                <kwargs id="261" addr="0143e1b0">
                    <attributelist id="262" addr="0143e1b0">
                        <attribute name="name" value="fragment" id="263" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="264" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="265" addr="0143e1c0">
                        <attributelist id="266" addr="0143e1c0">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="267" addr="0143e1a0">
                        <attributelist id="268" addr="0143e1a0">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="269" addr="0143e240">
                <attributelist id="270" addr="0143e240">
                    <parmlist id="271" addr="0143e260">
                        <parm id="272">
                            <attributelist id="273" addr="0143e260">
                                <attribute name="type" value="a(ANY).char" id="274" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="275" addr="0143e3c0">
            <attributelist id="276" addr="0143e3c0">
                <attribute name="code" value="{&#10;  if ($input) strcpy((char *)$1, (const char *)$input);&#10;  else $1[0] = 0;&#10;}" id="277" addr="014622b0" />
                <attribute name="method" value="memberin" id="278" addr="014622b0" />
                <kwargs id="279" addr="0143e2f0">
                    <attributelist id="280" addr="0143e2f0">
                        <attribute name="name" value="fragment" id="281" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="282" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="283" addr="0143e300">
                        <attributelist id="284" addr="0143e300">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="285" addr="0143e2e0">
                        <attributelist id="286" addr="0143e2e0">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="287" addr="0143e360">
                <attributelist id="288" addr="0143e360">
                    <parmlist id="289" addr="0143e380">
                        <parm id="290">
                            <attributelist id="291" addr="0143e380">
                                <attribute name="type" value="a().char" id="292" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="293" addr="0143e4e0">
            <attributelist id="294" addr="0143e4e0">
                <attribute name="code" value="{&#10;  if ($input) strcpy((char *)$1, (const char *)$input);&#10;  else $1[0] = 0;&#10;}" id="295" addr="014622b0" />
                <attribute name="method" value="globalin" id="296" addr="014622b0" />
                <kwargs id="297" addr="0143e410">
                    <attributelist id="298" addr="0143e410">
                        <attribute name="name" value="fragment" id="299" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="300" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="301" addr="0143e420">
                        <attributelist id="302" addr="0143e420">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="303" addr="0143e400">
                        <attributelist id="304" addr="0143e400">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="305" addr="0143e480">
                <attributelist id="306" addr="0143e480">
                    <parmlist id="307" addr="0143e4a0">
                        <parm id="308">
                            <attributelist id="309" addr="0143e4a0">
                                <attribute name="type" value="a().char" id="310" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="311" addr="0143e620">
            <attributelist id="312" addr="0143e620">
                <attribute name="code" value="{&#10;  size_t ii;&#10;  $1_basetype *b = ($1_basetype *) $1;&#10;  for (ii = 0; ii &lt; (size_t)$1_size; ii++) b[ii] = *(($1_basetype *) $input + ii);&#10;}" id="313" addr="014622b0" />
                <attribute name="method" value="memberin" id="314" addr="014622b0" />
                <kwargs id="315" addr="0143e530">
                    <attributelist id="316" addr="0143e530">
                        <attribute name="name" value="fragment" id="317" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="318" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="319" addr="0143e540">
                        <attributelist id="320" addr="0143e540">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="321" addr="0143e520">
                        <attributelist id="322" addr="0143e520">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="323" addr="0143e5c0">
                <attributelist id="324" addr="0143e5c0">
                    <parmlist id="325" addr="0143e5e0">
                        <parm id="326">
                            <attributelist id="327" addr="0143e5e0">
                                <attribute name="type" value="a(ANY).SWIGTYPE" id="328" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="329" addr="0143e760">
            <attributelist id="330" addr="0143e760">
                <attribute name="code" value="{&#10;  size_t ii;&#10;  $1_basetype *b = ($1_basetype *) $1;&#10;  for (ii = 0; ii &lt; (size_t)$1_size; ii++) b[ii] = *(($1_basetype *) $input + ii);&#10;}" id="331" addr="014622b0" />
                <attribute name="method" value="globalin" id="332" addr="014622b0" />
                <kwargs id="333" addr="0143e670">
                    <attributelist id="334" addr="0143e670">
                        <attribute name="name" value="fragment" id="335" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="336" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="337" addr="0143e680">
                        <attributelist id="338" addr="0143e680">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="339" addr="0143e660">
                        <attributelist id="340" addr="0143e660">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="341" addr="0143e700">
                <attributelist id="342" addr="0143e700">
                    <parmlist id="343" addr="0143e720">
                        <parm id="344">
                            <attributelist id="345" addr="0143e720">
                                <attribute name="type" value="a(ANY).SWIGTYPE" id="346" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="347" addr="0143e8c0">
            <attributelist id="348" addr="0143e8c0">
                <attribute name="code" value="{&#10;  $basetype (*inp)[$1_dim1] = ($basetype (*)[$1_dim1])($input);&#10;  $basetype (*dest)[$1_dim1] = ($basetype (*)[$1_dim1])($1);&#10;  size_t ii = 0;&#10;  for (; ii &lt; $1_dim0; ++ii) {&#10;    $basetype *ip = inp[ii];&#10;    $basetype *dp = dest[ii];&#10;    size_t jj = 0;&#10;    for (; jj &lt; $1_dim1; ++jj) dp[jj] = ip[jj];&#10;  }&#10;}" id="349" addr="014622b0" />
                <attribute name="method" value="memberin" id="350" addr="014622b0" />
                <kwargs id="351" addr="0143e7b0">
                    <attributelist id="352" addr="0143e7b0">
                        <attribute name="name" value="fragment" id="353" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="354" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="355" addr="0143e7c0">
                        <attributelist id="356" addr="0143e7c0">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="357" addr="0143e7a0">
                        <attributelist id="358" addr="0143e7a0">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="359" addr="0143e830">
                <attributelist id="360" addr="0143e830">
                    <parmlist id="361" addr="0143e880">
                        <parm id="362">
                            <attributelist id="363" addr="0143e880">
                                <attribute name="type" value="a(ANY).a(ANY).SWIGTYPE" id="364" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="365" addr="0143ea20">
            <attributelist id="366" addr="0143ea20">
                <attribute name="code" value="{&#10;  $basetype (*inp)[$1_dim1] = ($basetype (*)[$1_dim1])($input);&#10;  $basetype (*dest)[$1_dim1] = ($basetype (*)[$1_dim1])($1);&#10;  size_t ii = 0;&#10;  for (; ii &lt; $1_dim0; ++ii) {&#10;    $basetype *ip = inp[ii];&#10;    $basetype *dp = dest[ii];&#10;    size_t jj = 0;&#10;    for (; jj &lt; $1_dim1; ++jj) dp[jj] = ip[jj];&#10;  }&#10;}" id="367" addr="014622b0" />
                <attribute name="method" value="globalin" id="368" addr="014622b0" />
                <kwargs id="369" addr="0143e910">
                    <attributelist id="370" addr="0143e910">
                        <attribute name="name" value="fragment" id="371" addr="014622b0" />
                        <attribute name="value" value="&lt;string.h>" id="372" addr="014622b0" />
                    </attributelist>
                    <kwargssitem id="373" addr="0143e920">
                        <attributelist id="374" addr="0143e920">
                        </attributelist>
                    </kwargssitem>
                    <kwargssitem id="375" addr="0143e900">
                        <attributelist id="376" addr="0143e900">
                        </attributelist>
                    </kwargssitem>
                </kwargs>
            </attributelist>

            <typemapitem id="377" addr="0143e990">
                <attributelist id="378" addr="0143e990">
                    <parmlist id="379" addr="0143e9e0">
                        <parm id="380">
                            <attributelist id="381" addr="0143e9e0">
                                <attribute name="type" value="a(ANY).a(ANY).SWIGTYPE" id="382" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <insert id="383" addr="0143ea90">
            <attributelist id="384" addr="0143ea90">
                <attribute name="section" value="runtime" id="385" addr="014622b0" />
                <attribute name="code" value="/* -----------------------------------------------------------------------------&#10; *  This section contains generic SWIG labels for method/variable&#10; *  declarations/attributes, and other compiler dependent labels.&#10; * ----------------------------------------------------------------------------- */&#10;&#10;/* template workaround for compilers that cannot correctly implement the C++ standard */&#10;#ifndef SWIGTEMPLATEDISAMBIGUATOR&#10;# if defined(__SUNPRO_CC) &amp;&amp; (__SUNPRO_CC &lt;= 0x560)&#10;#  define SWIGTEMPLATEDISAMBIGUATOR template&#10;# elif defined(__HP_aCC)&#10;/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */&#10;/* If we find a maximum version that requires this, the test would be __HP_aCC &lt;= 35500 for A.03.55 */&#10;#  define SWIGTEMPLATEDISAMBIGUATOR template&#10;# else&#10;#  define SWIGTEMPLATEDISAMBIGUATOR&#10;# endif&#10;#endif&#10;&#10;/* inline attribute */&#10;#ifndef SWIGINLINE&#10;# if defined(__cplusplus) || (defined(__GNUC__) &amp;&amp; !defined(__STRICT_ANSI__))&#10;#   define SWIGINLINE inline&#10;# else&#10;#   define SWIGINLINE&#10;# endif&#10;#endif&#10;&#10;/* attribute recognised by some compilers to avoid 'unused' warnings */&#10;#ifndef SWIGUNUSED&#10;# if defined(__GNUC__)&#10;#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ >= 4))&#10;#     define SWIGUNUSED __attribute__ ((__unused__))&#10;#   else&#10;#     define SWIGUNUSED&#10;#   endif&#10;# elif defined(__ICC)&#10;#   define SWIGUNUSED __attribute__ ((__unused__))&#10;# else&#10;#   define SWIGUNUSED&#10;# endif&#10;#endif&#10;&#10;#ifndef SWIG_MSC_UNSUPPRESS_4505&#10;# if defined(_MSC_VER)&#10;#   pragma warning(disable : 4505) /* unreferenced local function has been removed */&#10;# endif&#10;#endif&#10;&#10;#ifndef SWIGUNUSEDPARM&#10;# ifdef __cplusplus&#10;#   define SWIGUNUSEDPARM(p)&#10;# else&#10;#   define SWIGUNUSEDPARM(p) p SWIGUNUSED&#10;# endif&#10;#endif&#10;&#10;/* internal SWIG method */&#10;#ifndef SWIGINTERN&#10;# define SWIGINTERN static SWIGUNUSED&#10;#endif&#10;&#10;/* internal inline SWIG method */&#10;#ifndef SWIGINTERNINLINE&#10;# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE&#10;#endif&#10;&#10;/* exporting methods */&#10;#if defined(__GNUC__)&#10;#  if (__GNUC__ >= 4) || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ >= 4)&#10;#    ifndef GCC_HASCLASSVISIBILITY&#10;#      define GCC_HASCLASSVISIBILITY&#10;#    endif&#10;#  endif&#10;#endif&#10;&#10;#ifndef SWIGEXPORT&#10;# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)&#10;#   if defined(STATIC_LINKED)&#10;#     define SWIGEXPORT&#10;#   else&#10;#     define SWIGEXPORT __declspec(dllexport)&#10;#   endif&#10;# else&#10;#   if defined(__GNUC__) &amp;&amp; defined(GCC_HASCLASSVISIBILITY)&#10;#     define SWIGEXPORT __attribute__ ((visibility(&quot;default&quot;)))&#10;#   else&#10;#     define SWIGEXPORT&#10;#   endif&#10;# endif&#10;#endif&#10;&#10;/* calling conventions for Windows */&#10;#ifndef SWIGSTDCALL&#10;# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)&#10;#   define SWIGSTDCALL __stdcall&#10;# else&#10;#   define SWIGSTDCALL&#10;# endif&#10;#endif&#10;&#10;/* Deal with Microsoft's attempt at deprecating C standard runtime functions */&#10;#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) &amp;&amp; defined(_MSC_VER) &amp;&amp; !defined(_CRT_SECURE_NO_DEPRECATE)&#10;# define _CRT_SECURE_NO_DEPRECATE&#10;#endif&#10;&#10;/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */&#10;#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) &amp;&amp; defined(_MSC_VER) &amp;&amp; !defined(_SCL_SECURE_NO_DEPRECATE)&#10;# define _SCL_SECURE_NO_DEPRECATE&#10;#endif&#10;&#10;/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */&#10;#if defined(__APPLE__) &amp;&amp; !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)&#10;# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0&#10;#endif&#10;&#10;/* Intel's compiler complains if a variable which was never initialised is&#10; * cast to void, which is a common idiom which we use to indicate that we&#10; * are aware a variable isn't used.  So we just silence that warning.&#10; * See: https://github.com/swig/swig/issues/192 for more discussion.&#10; */&#10;#ifdef __INTEL_COMPILER&#10;# pragma warning disable 592&#10;#endif&#10;" id="386" addr="014622b0" />
            </attributelist>
         
        </insert>
        <insert id="387" addr="0143eb50">
            <attributelist id="388" addr="0143eb50">
                <attribute name="section" value="header" id="389" addr="014622b0" />
                <attribute name="code" value="&#10;#ifdef __cplusplus&#10;#include &lt;utility>&#10;/* SwigValueWrapper is described in swig.swg */&#10;template&lt;typename T> class SwigValueWrapper {&#10;  struct SwigSmartPointer {&#10;    T *ptr;&#10;    SwigSmartPointer(T *p) : ptr(p) { }&#10;    ~SwigSmartPointer() { delete ptr; }&#10;    SwigSmartPointer&amp; operator=(SwigSmartPointer&amp; rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }&#10;    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }&#10;  } pointer;&#10;  SwigValueWrapper&amp; operator=(const SwigValueWrapper&lt;T>&amp; rhs);&#10;  SwigValueWrapper(const SwigValueWrapper&lt;T>&amp; rhs);&#10;public:&#10;  SwigValueWrapper() : pointer(0) { }&#10;  SwigValueWrapper&amp; operator=(const T&amp; t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }&#10;#if __cplusplus >=201103L&#10;  SwigValueWrapper&amp; operator=(T&amp;&amp; t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }&#10;  operator T&amp;&amp;() const { return std::move(*pointer.ptr); }&#10;#else&#10;  operator T&amp;() const { return *pointer.ptr; }&#10;#endif&#10;  T *operator&amp;() const { return pointer.ptr; }&#10;  static void reset(SwigValueWrapper&amp; t, T *p) { t.pointer.reset(p); }&#10;};&#10;&#10;/*&#10; * SwigValueInit() is a generic initialisation solution as the following approach:&#10; * &#10; *       T c_result = T();&#10; * &#10; * doesn't compile for all types for example:&#10; * &#10; *       unsigned int c_result = unsigned int();&#10; */&#10;template &lt;typename T> T SwigValueInit() {&#10;  return T();&#10;}&#10;&#10;#if __cplusplus >=201103L&#10;# define SWIG_STD_MOVE(OBJ) std::move(OBJ)&#10;#else&#10;# define SWIG_STD_MOVE(OBJ) OBJ&#10;#endif&#10;&#10;#endif&#10;" id="390" addr="014622b0" />
            </attributelist>
         
        </insert>
    </include>
    <include id="391" addr="0143eb00">
        <attributelist id="392" addr="0143eb00">
            <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\lua\\lua.swg" id="393" addr="014622b0" />
        </attributelist>

        <include id="394" addr="0143eb80">
            <attributelist id="395" addr="0143eb80">
                <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\lua\\luatypemaps.swg" id="396" addr="014622b0" />
            </attributelist>

            <typemap id="397" addr="0143eec0">
                <attributelist id="398" addr="0143eec0">
                    <attribute name="code" value="$1 = ($type)lua_tonumber(L, $input);" id="399" addr="014622b0" />
                    <attribute name="method" value="in" id="400" addr="014622b0" />
                    <kwargs id="401" addr="014559d0">
                        <attributelist id="402" addr="014559d0">
                            <attribute name="name" value="numinputs" id="403" addr="014622b0" />
                            <attribute name="value" value="1" id="404" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="405" addr="01455a30">
                            <attributelist id="406" addr="01455a30">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="407" addr="0143ebc0">
                            <attributelist id="408" addr="0143ebc0">
                                <attribute name="name" value="checkfn" id="409" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="410" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="411" addr="01455a40">
                            <attributelist id="412" addr="01455a40">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="413" addr="0143ec20">
                    <attributelist id="414" addr="0143ec20">
                        <parmlist id="415" addr="0143ec40">
                            <parm id="416">
                                <attributelist id="417" addr="0143ec40">
                                    <attribute name="type" value="int" id="418" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="419" addr="0143ec90">
                    <attributelist id="420" addr="0143ec90">
                        <parmlist id="421" addr="0143ecb0">
                            <parm id="422">
                                <attributelist id="423" addr="0143ecb0">
                                    <attribute name="type" value="short" id="424" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="425" addr="0143ed00">
                    <attributelist id="426" addr="0143ed00">
                        <parmlist id="427" addr="0143ed20">
                            <parm id="428">
                                <attributelist id="429" addr="0143ed20">
                                    <attribute name="type" value="long" id="430" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="431" addr="0143ed80">
                    <attributelist id="432" addr="0143ed80">
                        <parmlist id="433" addr="0143eda0">
                            <parm id="434">
                                <attributelist id="435" addr="0143eda0">
                                    <attribute name="type" value="signed char" id="436" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="437" addr="0143edf0">
                    <attributelist id="438" addr="0143edf0">
                        <parmlist id="439" addr="0143ee10">
                            <parm id="440">
                                <attributelist id="441" addr="0143ee10">
                                    <attribute name="type" value="float" id="442" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="443" addr="0143ee70">
                    <attributelist id="444" addr="0143ee70">
                        <parmlist id="445" addr="0143ee90">
                            <parm id="446">
                                <attributelist id="447" addr="0143ee90">
                                    <attribute name="type" value="double" id="448" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="449" addr="0143f160">
                <attributelist id="450" addr="0143f160">
                    <attribute name="code" value="SWIG_contract_assert((lua_tonumber(L,$input)>=0),&quot;number must not be negative&quot;);&#10;$1 = ($type)lua_tonumber(L, $input);" id="451" addr="014622b0" />
                    <attribute name="method" value="in" id="452" addr="014622b0" />
                    <kwargs id="453" addr="01455e20">
                        <attributelist id="454" addr="01455e20">
                            <attribute name="name" value="numinputs" id="455" addr="014622b0" />
                            <attribute name="value" value="1" id="456" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="457" addr="01455ee0">
                            <attributelist id="458" addr="01455ee0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="459" addr="0143ef10">
                            <attributelist id="460" addr="0143ef10">
                                <attribute name="name" value="checkfn" id="461" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="462" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="463" addr="01455ef0">
                            <attributelist id="464" addr="01455ef0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="465" addr="0143ef80">
                    <attributelist id="466" addr="0143ef80">
                        <parmlist id="467" addr="0143efa0">
                            <parm id="468">
                                <attributelist id="469" addr="0143efa0">
                                    <attribute name="type" value="unsigned int" id="470" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="471" addr="0143f000">
                    <attributelist id="472" addr="0143f000">
                        <parmlist id="473" addr="0143f020">
                            <parm id="474">
                                <attributelist id="475" addr="0143f020">
                                    <attribute name="type" value="unsigned short" id="476" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="477" addr="0143f080">
                    <attributelist id="478" addr="0143f080">
                        <parmlist id="479" addr="0143f0a0">
                            <parm id="480">
                                <attributelist id="481" addr="0143f0a0">
                                    <attribute name="type" value="unsigned long" id="482" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="483" addr="0143f100">
                    <attributelist id="484" addr="0143f100">
                        <parmlist id="485" addr="0143f130">
                            <parm id="486">
                                <attributelist id="487" addr="0143f130">
                                    <attribute name="type" value="unsigned char" id="488" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="489" addr="0143f680">
                <attributelist id="490" addr="0143f680">
                    <attribute name="code" value="  lua_pushnumber(L, (lua_Number) $1); SWIG_arg++;" id="491" addr="014622b0" />
                    <attribute name="method" value="out" id="492" addr="014622b0" />
                </attributelist>

                <typemapitem id="493" addr="0143f1e0">
                    <attributelist id="494" addr="0143f1e0">
                        <parmlist id="495" addr="0143f200">
                            <parm id="496">
                                <attributelist id="497" addr="0143f200">
                                    <attribute name="type" value="int" id="498" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="499" addr="0143f250">
                    <attributelist id="500" addr="0143f250">
                        <parmlist id="501" addr="0143f270">
                            <parm id="502">
                                <attributelist id="503" addr="0143f270">
                                    <attribute name="type" value="short" id="504" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="505" addr="0143f2c0">
                    <attributelist id="506" addr="0143f2c0">
                        <parmlist id="507" addr="0143f2e0">
                            <parm id="508">
                                <attributelist id="509" addr="0143f2e0">
                                    <attribute name="type" value="long" id="510" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="511" addr="0143f340">
                    <attributelist id="512" addr="0143f340">
                        <parmlist id="513" addr="0143f360">
                            <parm id="514">
                                <attributelist id="515" addr="0143f360">
                                    <attribute name="type" value="unsigned int" id="516" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="517" addr="0143f3c0">
                    <attributelist id="518" addr="0143f3c0">
                        <parmlist id="519" addr="0143f3e0">
                            <parm id="520">
                                <attributelist id="521" addr="0143f3e0">
                                    <attribute name="type" value="unsigned short" id="522" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="523" addr="0143f440">
                    <attributelist id="524" addr="0143f440">
                        <parmlist id="525" addr="0143f460">
                            <parm id="526">
                                <attributelist id="527" addr="0143f460">
                                    <attribute name="type" value="unsigned long" id="528" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="529" addr="0143f4c0">
                    <attributelist id="530" addr="0143f4c0">
                        <parmlist id="531" addr="0143f4e0">
                            <parm id="532">
                                <attributelist id="533" addr="0143f4e0">
                                    <attribute name="type" value="signed char" id="534" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="535" addr="0143f540">
                    <attributelist id="536" addr="0143f540">
                        <parmlist id="537" addr="0143f560">
                            <parm id="538">
                                <attributelist id="539" addr="0143f560">
                                    <attribute name="type" value="unsigned char" id="540" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="541" addr="0143f5b0">
                    <attributelist id="542" addr="0143f5b0">
                        <parmlist id="543" addr="0143f5d0">
                            <parm id="544">
                                <attributelist id="545" addr="0143f5d0">
                                    <attribute name="type" value="float" id="546" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="547" addr="0143f630">
                    <attributelist id="548" addr="0143f630">
                        <parmlist id="549" addr="0143f650">
                            <parm id="550">
                                <attributelist id="551" addr="0143f650">
                                    <attribute name="type" value="double" id="552" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="553" addr="0143f850">
                <attributelist id="554" addr="0143f850">
                    <attribute name="code" value=" temp=($*1_ltype)lua_tonumber(L,$input); $1=&amp;temp;" id="555" addr="014622b0" />
                    <attribute name="method" value="in" id="556" addr="014622b0" />
                    <kwargs id="557" addr="01456350">
                        <attributelist id="558" addr="01456350">
                            <attribute name="name" value="numinputs" id="559" addr="014622b0" />
                            <attribute name="value" value="1" id="560" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="561" addr="01456370">
                            <attributelist id="562" addr="01456370">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="563" addr="0143f6d0">
                            <attributelist id="564" addr="0143f6d0">
                                <attribute name="name" value="checkfn" id="565" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="566" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="567" addr="01456380">
                            <attributelist id="568" addr="01456380">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="569" addr="0143f7e0">
                    <attributelist id="570" addr="0143f7e0">
                        <parmlist id="571" addr="0143f820">
                            <parm id="572">
                                <attributelist id="573" addr="0143f820">
                                    <attribute name="type" value="r.q(const).int" id="574" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="575" addr="0143f7a0">
                            <parm id="576">
                                <attributelist id="577" addr="0143f7a0">
                                    <attribute name="type" value="$*1_ltype" id="578" addr="014622b0" />
                                    <attribute name="name" value="temp" id="579" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="580" addr="0143fa30">
                <attributelist id="581" addr="0143fa30">
                    <attribute name="code" value="SWIG_contract_assert((lua_tonumber(L,$input)>=0),&quot;number must not be negative&quot;);&#10;temp=($*1_ltype)lua_tonumber(L,$input); $1=&amp;temp;" id="582" addr="014622b0" />
                    <attribute name="method" value="in" id="583" addr="014622b0" />
                    <kwargs id="584" addr="014563a0">
                        <attributelist id="585" addr="014563a0">
                            <attribute name="name" value="numinputs" id="586" addr="014622b0" />
                            <attribute name="value" value="1" id="587" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="588" addr="014564a0">
                            <attributelist id="589" addr="014564a0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="590" addr="0143f8a0">
                            <attributelist id="591" addr="0143f8a0">
                                <attribute name="name" value="checkfn" id="592" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="593" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="594" addr="014564b0">
                            <attributelist id="595" addr="014564b0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="596" addr="0143f9c0">
                    <attributelist id="597" addr="0143f9c0">
                        <parmlist id="598" addr="0143fa00">
                            <parm id="599">
                                <attributelist id="600" addr="0143fa00">
                                    <attribute name="type" value="r.q(const).unsigned int" id="601" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="602" addr="0143f980">
                            <parm id="603">
                                <attributelist id="604" addr="0143f980">
                                    <attribute name="type" value="$*1_ltype" id="605" addr="014622b0" />
                                    <attribute name="name" value="temp" id="606" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="607" addr="0143fbd0">
                <attributelist id="608" addr="0143fbd0">
                    <attribute name="code" value="  lua_pushnumber(L, (lua_Number) *$1); SWIG_arg++;" id="609" addr="014622b0" />
                    <attribute name="method" value="out" id="610" addr="014622b0" />
                </attributelist>

                <typemapitem id="611" addr="0143fad0">
                    <attributelist id="612" addr="0143fad0">
                        <parmlist id="613" addr="0143faf0">
                            <parm id="614">
                                <attributelist id="615" addr="0143faf0">
                                    <attribute name="type" value="r.q(const).int" id="616" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="617" addr="0143fb80">
                    <attributelist id="618" addr="0143fb80">
                        <parmlist id="619" addr="0143fba0">
                            <parm id="620">
                                <attributelist id="621" addr="0143fba0">
                                    <attribute name="type" value="r.q(const).unsigned int" id="622" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <apply id="623" addr="0143ff70">
                <attributelist id="624" addr="0143ff70">
                    <parmlist id="625" addr="0143fc60">
                        <parm id="626">
                            <attributelist id="627" addr="0143fc60">
                                <attribute name="type" value="r.q(const).int" id="628" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="629" addr="0143fcd0">
                    <attributelist id="630" addr="0143fcd0">
                        <parmlist id="631" addr="0143fcf0">
                            <parm id="632">
                                <attributelist id="633" addr="0143fcf0">
                                    <attribute name="type" value="r.q(const).short" id="634" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="635" addr="0143fd60">
                    <attributelist id="636" addr="0143fd60">
                        <parmlist id="637" addr="0143fd80">
                            <parm id="638">
                                <attributelist id="639" addr="0143fd80">
                                    <attribute name="type" value="r.q(const).long" id="640" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="641" addr="0143fdd0">
                    <attributelist id="642" addr="0143fdd0">
                        <parmlist id="643" addr="0143fe20">
                            <parm id="644">
                                <attributelist id="645" addr="0143fe20">
                                    <attribute name="type" value="r.q(const).signed char" id="646" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="647" addr="0143fe90">
                    <attributelist id="648" addr="0143fe90">
                        <parmlist id="649" addr="0143feb0">
                            <parm id="650">
                                <attributelist id="651" addr="0143feb0">
                                    <attribute name="type" value="r.q(const).float" id="652" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="653" addr="0143ff20">
                    <attributelist id="654" addr="0143ff20">
                        <parmlist id="655" addr="0143ff40">
                            <parm id="656">
                                <attributelist id="657" addr="0143ff40">
                                    <attribute name="type" value="r.q(const).double" id="658" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="659" addr="01440220">
                <attributelist id="660" addr="01440220">
                    <parmlist id="661" addr="01440010">
                        <parm id="662">
                            <attributelist id="663" addr="01440010">
                                <attribute name="type" value="r.q(const).unsigned int" id="664" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="665" addr="01440060">
                    <attributelist id="666" addr="01440060">
                        <parmlist id="667" addr="014400b0">
                            <parm id="668">
                                <attributelist id="669" addr="014400b0">
                                    <attribute name="type" value="r.q(const).unsigned short" id="670" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="671" addr="01440100">
                    <attributelist id="672" addr="01440100">
                        <parmlist id="673" addr="01440150">
                            <parm id="674">
                                <attributelist id="675" addr="01440150">
                                    <attribute name="type" value="r.q(const).unsigned long" id="676" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="677" addr="014401a0">
                    <attributelist id="678" addr="014401a0">
                        <parmlist id="679" addr="014401f0">
                            <parm id="680">
                                <attributelist id="681" addr="014401f0">
                                    <attribute name="type" value="r.q(const).unsigned char" id="682" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <typemap id="683" addr="01440340">
                <attributelist id="684" addr="01440340">
                    <attribute name="code" value="$1 = ($type)(int)lua_tonumber(L, $input);" id="685" addr="014622b0" />
                    <attribute name="method" value="in" id="686" addr="014622b0" />
                    <kwargs id="687" addr="01456610">
                        <attributelist id="688" addr="01456610">
                            <attribute name="name" value="numinputs" id="689" addr="014622b0" />
                            <attribute name="value" value="1" id="690" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="691" addr="01456630">
                            <attributelist id="692" addr="01456630">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="693" addr="01440270">
                            <attributelist id="694" addr="01440270">
                                <attribute name="name" value="checkfn" id="695" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="696" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="697" addr="01456b90">
                            <attributelist id="698" addr="01456b90">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="699" addr="014402f0">
                    <attributelist id="700" addr="014402f0">
                        <parmlist id="701" addr="01440310">
                            <parm id="702">
                                <attributelist id="703" addr="01440310">
                                    <attribute name="type" value="enum SWIGTYPE" id="704" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="705" addr="01440430">
                <attributelist id="706" addr="01440430">
                    <attribute name="code" value="  lua_pushnumber(L, (lua_Number)(int)($1)); SWIG_arg++;" id="707" addr="014622b0" />
                    <attribute name="method" value="out" id="708" addr="014622b0" />
                </attributelist>

                <typemapitem id="709" addr="014403e0">
                    <attributelist id="710" addr="014403e0">
                        <parmlist id="711" addr="01440400">
                            <parm id="712">
                                <attributelist id="713" addr="01440400">
                                    <attribute name="type" value="enum SWIGTYPE" id="714" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="715" addr="01440610">
                <attributelist id="716" addr="01440610">
                    <attribute name="code" value=" temp=($basetype)(int)lua_tonumber(L,$input); $1=&amp;temp;" id="717" addr="014622b0" />
                    <attribute name="method" value="in" id="718" addr="014622b0" />
                    <kwargs id="719" addr="01456f00">
                        <attributelist id="720" addr="01456f00">
                            <attribute name="name" value="numinputs" id="721" addr="014622b0" />
                            <attribute name="value" value="1" id="722" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="723" addr="01456f20">
                            <attributelist id="724" addr="01456f20">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="725" addr="01440480">
                            <attributelist id="726" addr="01440480">
                                <attribute name="name" value="checkfn" id="727" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="728" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="729" addr="01456f30">
                            <attributelist id="730" addr="01456f30">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="731" addr="014405a0">
                    <attributelist id="732" addr="014405a0">
                        <parmlist id="733" addr="014405e0">
                            <parm id="734">
                                <attributelist id="735" addr="014405e0">
                                    <attribute name="type" value="r.q(const).enum SWIGTYPE" id="736" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="737" addr="01440560">
                            <parm id="738">
                                <attributelist id="739" addr="01440560">
                                    <attribute name="type" value="$basetype" id="740" addr="014622b0" />
                                    <attribute name="name" value="temp" id="741" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="742" addr="014407f0">
                <attributelist id="743" addr="014407f0">
                    <attribute name="code" value=" temp=($basetype)(int)lua_tonumber(L,$input); $1=&amp;temp;" id="744" addr="014622b0" />
                    <attribute name="method" value="in" id="745" addr="014622b0" />
                    <kwargs id="746" addr="01456f50">
                        <attributelist id="747" addr="01456f50">
                            <attribute name="name" value="numinputs" id="748" addr="014622b0" />
                            <attribute name="value" value="1" id="749" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="750" addr="01457050">
                            <attributelist id="751" addr="01457050">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="752" addr="01440660">
                            <attributelist id="753" addr="01440660">
                                <attribute name="name" value="checkfn" id="754" addr="014622b0" />
                                <attribute name="value" value="lua_isnumber" id="755" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="756" addr="01457060">
                            <attributelist id="757" addr="01457060">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="758" addr="01440780">
                    <attributelist id="759" addr="01440780">
                        <parmlist id="760" addr="014407c0">
                            <parm id="761">
                                <attributelist id="762" addr="014407c0">
                                    <attribute name="type" value="z.q(const).enum SWIGTYPE" id="763" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="764" addr="01440740">
                            <parm id="765">
                                <attributelist id="766" addr="01440740">
                                    <attribute name="type" value="$basetype" id="767" addr="014622b0" />
                                    <attribute name="name" value="temp" id="768" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="769" addr="01440900">
                <attributelist id="770" addr="01440900">
                    <attribute name="code" value="  lua_pushnumber(L, (lua_Number) *$1); SWIG_arg++;" id="771" addr="014622b0" />
                    <attribute name="method" value="out" id="772" addr="014622b0" />
                </attributelist>

                <typemapitem id="773" addr="014408b0">
                    <attributelist id="774" addr="014408b0">
                        <parmlist id="775" addr="014408d0">
                            <parm id="776">
                                <attributelist id="777" addr="014408d0">
                                    <attribute name="type" value="r.q(const).enum SWIGTYPE" id="778" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="779" addr="01440a10">
                <attributelist id="780" addr="01440a10">
                    <attribute name="code" value="  lua_pushnumber(L, (lua_Number) *$1); SWIG_arg++;" id="781" addr="014622b0" />
                    <attribute name="method" value="out" id="782" addr="014622b0" />
                </attributelist>

                <typemapitem id="783" addr="014409c0">
                    <attributelist id="784" addr="014409c0">
                        <parmlist id="785" addr="014409e0">
                            <parm id="786">
                                <attributelist id="787" addr="014409e0">
                                    <attribute name="type" value="z.q(const).enum SWIGTYPE" id="788" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="789" addr="01440b10">
                <attributelist id="790" addr="01440b10">
                    <attribute name="code" value="$1 = (lua_toboolean(L, $input)!=0);" id="791" addr="014622b0" />
                    <attribute name="method" value="in" id="792" addr="014622b0" />
                    <kwargs id="793" addr="014571c0">
                        <attributelist id="794" addr="014571c0">
                            <attribute name="name" value="numinputs" id="795" addr="014622b0" />
                            <attribute name="value" value="1" id="796" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="797" addr="014571e0">
                            <attributelist id="798" addr="014571e0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="799" addr="01440a60">
                            <attributelist id="800" addr="01440a60">
                                <attribute name="name" value="checkfn" id="801" addr="014622b0" />
                                <attribute name="value" value="lua_isboolean" id="802" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="803" addr="014571d0">
                            <attributelist id="804" addr="014571d0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="805" addr="01440ac0">
                    <attributelist id="806" addr="01440ac0">
                        <parmlist id="807" addr="01440ae0">
                            <parm id="808">
                                <attributelist id="809" addr="01440ae0">
                                    <attribute name="type" value="bool" id="810" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="811" addr="01440be0">
                <attributelist id="812" addr="01440be0">
                    <attribute name="code" value="  lua_pushboolean(L,(int)($1!=0)); SWIG_arg++;" id="813" addr="014622b0" />
                    <attribute name="method" value="out" id="814" addr="014622b0" />
                </attributelist>

                <typemapitem id="815" addr="01440b90">
                    <attributelist id="816" addr="01440b90">
                        <parmlist id="817" addr="01440bb0">
                            <parm id="818">
                                <attributelist id="819" addr="01440bb0">
                                    <attribute name="type" value="bool" id="820" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="821" addr="01440d90">
                <attributelist id="822" addr="01440d90">
                    <attribute name="code" value="temp=(lua_toboolean(L, $input)!=0);&#10;  $1=&amp;temp;" id="823" addr="014622b0" />
                    <attribute name="method" value="in" id="824" addr="014622b0" />
                    <kwargs id="825" addr="014572b0">
                        <attributelist id="826" addr="014572b0">
                            <attribute name="name" value="numinputs" id="827" addr="014622b0" />
                            <attribute name="value" value="1" id="828" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="829" addr="014572d0">
                            <attributelist id="830" addr="014572d0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="831" addr="01440c30">
                            <attributelist id="832" addr="01440c30">
                                <attribute name="name" value="checkfn" id="833" addr="014622b0" />
                                <attribute name="value" value="lua_isboolean" id="834" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="835" addr="014572e0">
                            <attributelist id="836" addr="014572e0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="837" addr="01440d20">
                    <attributelist id="838" addr="01440d20">
                        <parmlist id="839" addr="01440d60">
                            <parm id="840">
                                <attributelist id="841" addr="01440d60">
                                    <attribute name="type" value="r.q(const).bool" id="842" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="843" addr="01440ce0">
                            <parm id="844">
                                <attributelist id="845" addr="01440ce0">
                                    <attribute name="type" value="bool" id="846" addr="014622b0" />
                                    <attribute name="name" value="temp" id="847" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="848" addr="01440e80">
                <attributelist id="849" addr="01440e80">
                    <attribute name="code" value="  lua_pushboolean(L,(int)((*$1)!=0)); SWIG_arg++;" id="850" addr="014622b0" />
                    <attribute name="method" value="out" id="851" addr="014622b0" />
                </attributelist>

                <typemapitem id="852" addr="01440e30">
                    <attributelist id="853" addr="01440e30">
                        <parmlist id="854" addr="01440e50">
                            <parm id="855">
                                <attributelist id="856" addr="01440e50">
                                    <attribute name="type" value="r.q(const).bool" id="857" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <fragment id="858" addr="01440f10">
                <attributelist id="859" addr="01440f10">
                    <attribute name="section" value="header" id="860" addr="014622b0" />
                    <attribute name="code" value="&#10;SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {&#10;  int ret = lua_isstring(L, idx);&#10;  if (!ret)&#10;   ret = lua_isnil(L, idx);&#10;  return ret;&#10;}&#10;" id="861" addr="014622b0" />
                    <attribute name="value" value="SWIG_lua_isnilstring" id="862" addr="014622b0" />
                </attributelist>
             
            </fragment>
            <typemap id="863" addr="014410f0">
                <attributelist id="864" addr="014410f0">
                    <attribute name="code" value="$1 = ($ltype)lua_tostring(L, $input);" id="865" addr="014622b0" />
                    <attribute name="method" value="in" id="866" addr="014622b0" />
                    <kwargs id="867" addr="01457450">
                        <attributelist id="868" addr="01457450">
                            <attribute name="name" value="numinputs" id="869" addr="014622b0" />
                            <attribute name="value" value="1" id="870" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="871" addr="01457460">
                            <attributelist id="872" addr="01457460">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="873" addr="01440f90">
                            <attributelist id="874" addr="01440f90">
                                <attribute name="name" value="checkfn" id="875" addr="014622b0" />
                                <attribute name="value" value="SWIG_lua_isnilstring" id="876" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="877" addr="01457470">
                            <attributelist id="878" addr="01457470">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="879" addr="01441010">
                    <attributelist id="880" addr="01441010">
                        <parmlist id="881" addr="01441030">
                            <parm id="882">
                                <attributelist id="883" addr="01441030">
                                    <attribute name="type" value="p.q(const).char" id="884" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="885" addr="014410a0">
                    <attributelist id="886" addr="014410a0">
                        <parmlist id="887" addr="014410c0">
                            <parm id="888">
                                <attributelist id="889" addr="014410c0">
                                    <attribute name="type" value="p.char" id="890" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="891" addr="01441310">
                <attributelist id="892" addr="01441310">
                    <attribute name="code" value="$1 = ($ltype)lua_tostring(L, $input);" id="893" addr="014622b0" />
                    <attribute name="method" value="in" id="894" addr="014622b0" />
                    <kwargs id="895" addr="01457570">
                        <attributelist id="896" addr="01457570">
                            <attribute name="name" value="numinputs" id="897" addr="014622b0" />
                            <attribute name="value" value="1" id="898" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="899" addr="01457650">
                            <attributelist id="900" addr="01457650">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="901" addr="01441170">
                            <attributelist id="902" addr="01441170">
                                <attribute name="name" value="checkfn" id="903" addr="014622b0" />
                                <attribute name="value" value="SWIG_lua_isnilstring" id="904" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="905" addr="01457660">
                            <attributelist id="906" addr="01457660">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="907" addr="01441210">
                    <attributelist id="908" addr="01441210">
                        <parmlist id="909" addr="01441230">
                            <parm id="910">
                                <attributelist id="911" addr="01441230">
                                    <attribute name="type" value="a(ANY).q(const).char" id="912" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="913" addr="014412c0">
                    <attributelist id="914" addr="014412c0">
                        <parmlist id="915" addr="014412e0">
                            <parm id="916">
                                <attributelist id="917" addr="014412e0">
                                    <attribute name="type" value="a(ANY).char" id="918" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="919" addr="01441490">
                <attributelist id="920" addr="01441490">
                    <attribute name="code" value="  lua_pushstring(L,(const char *)$1); SWIG_arg++;" id="921" addr="014622b0" />
                    <attribute name="method" value="out" id="922" addr="014622b0" />
                </attributelist>

                <typemapitem id="923" addr="014413b0">
                    <attributelist id="924" addr="014413b0">
                        <parmlist id="925" addr="014413d0">
                            <parm id="926">
                                <attributelist id="927" addr="014413d0">
                                    <attribute name="type" value="p.q(const).char" id="928" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="929" addr="01441440">
                    <attributelist id="930" addr="01441440">
                        <parmlist id="931" addr="01441460">
                            <parm id="932">
                                <attributelist id="933" addr="01441460">
                                    <attribute name="type" value="p.char" id="934" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="935" addr="01441650">
                <attributelist id="936" addr="01441650">
                    <attribute name="code" value="  lua_pushstring(L,(const char *)$1); SWIG_arg++;" id="937" addr="014622b0" />
                    <attribute name="method" value="out" id="938" addr="014622b0" />
                </attributelist>

                <typemapitem id="939" addr="01441550">
                    <attributelist id="940" addr="01441550">
                        <parmlist id="941" addr="01441570">
                            <parm id="942">
                                <attributelist id="943" addr="01441570">
                                    <attribute name="type" value="a(ANY).q(const).char" id="944" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="945" addr="01441600">
                    <attributelist id="946" addr="01441600">
                        <parmlist id="947" addr="01441620">
                            <parm id="948">
                                <attributelist id="949" addr="01441620">
                                    <attribute name="type" value="a(ANY).char" id="950" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="951" addr="01441790">
                <attributelist id="952" addr="01441790">
                    <attribute name="code" value="$1 = (lua_tostring(L, $input))[0];" id="953" addr="014622b0" />
                    <attribute name="method" value="in" id="954" addr="014622b0" />
                    <kwargs id="955" addr="014578e0">
                        <attributelist id="956" addr="014578e0">
                            <attribute name="name" value="numinputs" id="957" addr="014622b0" />
                            <attribute name="value" value="1" id="958" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="959" addr="014578f0">
                            <attributelist id="960" addr="014578f0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="961" addr="014416d0">
                            <attributelist id="962" addr="014416d0">
                                <attribute name="name" value="checkfn" id="963" addr="014622b0" />
                                <attribute name="value" value="SWIG_lua_isnilstring" id="964" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="965" addr="014578c0">
                            <attributelist id="966" addr="014578c0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="967" addr="01441740">
                    <attributelist id="968" addr="01441740">
                        <parmlist id="969" addr="01441760">
                            <parm id="970">
                                <attributelist id="971" addr="01441760">
                                    <attribute name="type" value="char" id="972" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="973" addr="01441870">
                <attributelist id="974" addr="01441870">
                    <attribute name="code" value="  lua_pushlstring(L, &amp;$1, 1); SWIG_arg++;" id="975" addr="014622b0" />
                    <attribute name="method" value="out" id="976" addr="014622b0" />
                </attributelist>

                <typemapitem id="977" addr="01441820">
                    <attributelist id="978" addr="01441820">
                        <parmlist id="979" addr="01441840">
                            <parm id="980">
                                <attributelist id="981" addr="01441840">
                                    <attribute name="type" value="char" id="982" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="983" addr="01441a70">
                <attributelist id="984" addr="01441a70">
                    <attribute name="code" value="temp = (lua_tostring(L, $input))[0]; $1=&amp;temp;" id="985" addr="014622b0" />
                    <attribute name="method" value="in" id="986" addr="014622b0" />
                    <kwargs id="987" addr="01457a10">
                        <attributelist id="988" addr="01457a10">
                            <attribute name="name" value="numinputs" id="989" addr="014622b0" />
                            <attribute name="value" value="1" id="990" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="991" addr="01457a30">
                            <attributelist id="992" addr="01457a30">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="993" addr="014418f0">
                            <attributelist id="994" addr="014418f0">
                                <attribute name="name" value="checkfn" id="995" addr="014622b0" />
                                <attribute name="value" value="SWIG_lua_isnilstring" id="996" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="997" addr="01457a40">
                            <attributelist id="998" addr="01457a40">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="999" addr="01441a00">
                    <attributelist id="1000" addr="01441a00">
                        <parmlist id="1001" addr="01441a40">
                            <parm id="1002">
                                <attributelist id="1003" addr="01441a40">
                                    <attribute name="type" value="r.q(const).char" id="1004" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="1005" addr="014419c0">
                            <parm id="1006">
                                <attributelist id="1007" addr="014419c0">
                                    <attribute name="type" value="char" id="1008" addr="014622b0" />
                                    <attribute name="name" value="temp" id="1009" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1010" addr="01441b70">
                <attributelist id="1011" addr="01441b70">
                    <attribute name="code" value="  lua_pushlstring(L, $1, 1); SWIG_arg++;" id="1012" addr="014622b0" />
                    <attribute name="method" value="out" id="1013" addr="014622b0" />
                </attributelist>

                <typemapitem id="1014" addr="01441b20">
                    <attributelist id="1015" addr="01441b20">
                        <parmlist id="1016" addr="01441b40">
                            <parm id="1017">
                                <attributelist id="1018" addr="01441b40">
                                    <attribute name="type" value="r.q(const).char" id="1019" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1020" addr="01441d10">
                <attributelist id="1021" addr="01441d10">
                    <attribute name="code" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,$input,(void**)&amp;$1,$descriptor,$disown))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,$argnum,$descriptor);&#10;  }&#10;" id="1022" addr="014622b0" />
                    <attribute name="method" value="in" id="1023" addr="014622b0" />
                    <kwargs id="1024" addr="01457ba0">
                        <attributelist id="1025" addr="01457ba0">
                            <attribute name="name" value="numinputs" id="1026" addr="014622b0" />
                            <attribute name="value" value="1" id="1027" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1028" addr="01457be0">
                            <attributelist id="1029" addr="01457be0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1030" addr="01441bc0">
                            <attributelist id="1031" addr="01441bc0">
                                <attribute name="name" value="checkfn" id="1032" addr="014622b0" />
                                <attribute name="value" value="SWIG_isptrtype" id="1033" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1034" addr="01457bd0">
                            <attributelist id="1035" addr="01457bd0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1036" addr="01441c30">
                    <attributelist id="1037" addr="01441c30">
                        <parmlist id="1038" addr="01441c50">
                            <parm id="1039">
                                <attributelist id="1040" addr="01441c50">
                                    <attribute name="type" value="p.SWIGTYPE" id="1041" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1042" addr="01441cc0">
                    <attributelist id="1043" addr="01441cc0">
                        <parmlist id="1044" addr="01441ce0">
                            <parm id="1045">
                                <attributelist id="1046" addr="01441ce0">
                                    <attribute name="type" value="a().SWIGTYPE" id="1047" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1048" addr="01441e30">
                <attributelist id="1049" addr="01441e30">
                    <attribute name="code" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,$input,(void**)&amp;$1,$descriptor,$disown))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,$argnum,$descriptor);&#10;  }&#10;" id="1050" addr="014622b0" />
                    <attribute name="method" value="in" id="1051" addr="014622b0" />
                    <kwargs id="1052" addr="01457cb0">
                        <attributelist id="1053" addr="01457cb0">
                            <attribute name="name" value="numinputs" id="1054" addr="014622b0" />
                            <attribute name="value" value="1" id="1055" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1056" addr="01457d70">
                            <attributelist id="1057" addr="01457d70">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1058" addr="01441d60">
                            <attributelist id="1059" addr="01441d60">
                                <attribute name="name" value="checkfn" id="1060" addr="014622b0" />
                                <attribute name="value" value="lua_isuserdata" id="1061" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1062" addr="01457d80">
                            <attributelist id="1063" addr="01457d80">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1064" addr="01441de0">
                    <attributelist id="1065" addr="01441de0">
                        <parmlist id="1066" addr="01441e00">
                            <parm id="1067">
                                <attributelist id="1068" addr="01441e00">
                                    <attribute name="type" value="r.SWIGTYPE" id="1069" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1070" addr="014421e0">
                <attributelist id="1071" addr="014421e0">
                    <attribute name="code" value="&#10;  res = SWIG_ConvertPtr(L, $input, &amp;argp, $descriptor, SWIG_POINTER_RELEASE);&#10;  if (!SWIG_IsOK(res)) {&#10;    if (res == SWIG_ERROR_RELEASE_NOT_OWNED) {&#10;      lua_pushfstring(L, &quot;Cannot release ownership as memory is not owned for argument $argnum of type '$1_type' in $symname&quot;); SWIG_fail;&#10;    } else {&#10;      SWIG_fail_ptr(&quot;$symname&quot;, $argnum, $descriptor);&#10;    }&#10;  }&#10;  $1 = ($1_ltype)argp;&#10;  rvrdeleter.reset($1);&#10;" id="1072" addr="014622b0" />
                    <attribute name="method" value="in" id="1073" addr="014622b0" />
                    <kwargs id="1074" addr="01457da0">
                        <attributelist id="1075" addr="01457da0">
                            <attribute name="name" value="numinputs" id="1076" addr="014622b0" />
                            <attribute name="value" value="1" id="1077" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1078" addr="01457e60">
                            <attributelist id="1079" addr="01457e60">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1080" addr="01441eb0">
                            <attributelist id="1081" addr="01441eb0">
                                <attribute name="name" value="checkfn" id="1082" addr="014622b0" />
                                <attribute name="value" value="lua_isuserdata" id="1083" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1084" addr="01457e70">
                            <attributelist id="1085" addr="01457e70">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1086" addr="01442170">
                    <attributelist id="1087" addr="01442170">
                        <parmlist id="1088" addr="014421b0">
                            <parm id="1089">
                                <attributelist id="1090" addr="014421b0">
                                    <attribute name="type" value="z.SWIGTYPE" id="1091" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="1092" addr="01441f80">
                            <parm id="1093">
                                <attributelist id="1094" addr="01441f80">
                                    <attribute name="type" value="p.void" id="1095" addr="014622b0" />
                                    <attribute name="name" value="argp" id="1096" addr="014622b0" />
                                    <attribute name="value" value="0" id="1097" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="1098">
                                <attributelist id="1099" addr="01442030">
                                    <attribute name="type" value="int" id="1100" addr="014622b0" />
                                    <attribute name="name" value="res" id="1101" addr="014622b0" />
                                    <attribute name="value" value="0" id="1102" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="1103">
                                <attributelist id="1104" addr="01442130">
                                    <attribute name="type" value="std::unique_ptr&lt;($*1_ltype)>" id="1105" addr="014622b0" />
                                    <attribute name="name" value="rvrdeleter" id="1106" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1107" addr="01442350">
                <attributelist id="1108" addr="01442350">
                    <attribute name="code" value="SWIG_NewPointerObj(L,$1,$descriptor,$owner); SWIG_arg++; " id="1109" addr="014622b0" />
                    <attribute name="method" value="out" id="1110" addr="014622b0" />
                </attributelist>

                <typemapitem id="1111" addr="01442270">
                    <attributelist id="1112" addr="01442270">
                        <parmlist id="1113" addr="01442290">
                            <parm id="1114">
                                <attributelist id="1115" addr="01442290">
                                    <attribute name="type" value="p.SWIGTYPE" id="1116" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1117" addr="01442300">
                    <attributelist id="1118" addr="01442300">
                        <parmlist id="1119" addr="01442320">
                            <parm id="1120">
                                <attributelist id="1121" addr="01442320">
                                    <attribute name="type" value="r.SWIGTYPE" id="1122" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1123" addr="014424c0">
                <attributelist id="1124" addr="014424c0">
                    <attribute name="code" value="SWIG_NewPointerObj(L,$1,$descriptor,$owner); SWIG_arg++; " id="1125" addr="014622b0" />
                    <attribute name="method" value="out" id="1126" addr="014622b0" />
                </attributelist>

                <typemapitem id="1127" addr="014423e0">
                    <attributelist id="1128" addr="014423e0">
                        <parmlist id="1129" addr="01442400">
                            <parm id="1130">
                                <attributelist id="1131" addr="01442400">
                                    <attribute name="type" value="p.SWIGTYPE" id="1132" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1133" addr="01442470">
                    <attributelist id="1134" addr="01442470">
                        <parmlist id="1135" addr="01442490">
                            <parm id="1136">
                                <attributelist id="1137" addr="01442490">
                                    <attribute name="type" value="z.SWIGTYPE" id="1138" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1139" addr="01442690">
                <attributelist id="1140" addr="01442690">
                    <attribute name="code" value="{&#10;  swig_type_info *ty = SWIG_TypeDynamicCast($1_descriptor, (void **) &amp;$1);&#10;  SWIG_NewPointerObj(L,(void*)$1,ty,$owner); SWIG_arg++; &#10;}" id="1141" addr="014622b0" />
                    <attribute name="method" value="out" id="1142" addr="014622b0" />
                </attributelist>

                <typemapitem id="1143" addr="01442570">
                    <attributelist id="1144" addr="01442570">
                        <parmlist id="1145" addr="01442590">
                            <parm id="1146">
                                <attributelist id="1147" addr="01442590">
                                    <attribute name="type" value="p.SWIGTYPE" id="1148" addr="014622b0" />
                                    <attribute name="name" value="DYNAMIC" id="1149" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1150" addr="01442620">
                    <attributelist id="1151" addr="01442620">
                        <parmlist id="1152" addr="01442640">
                            <parm id="1153">
                                <attributelist id="1154" addr="01442640">
                                    <attribute name="type" value="r.SWIGTYPE" id="1155" addr="014622b0" />
                                    <attribute name="name" value="DYNAMIC" id="1156" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1157" addr="01442850">
                <attributelist id="1158" addr="01442850">
                    <attribute name="code" value="&#10;   if (!SWIG_IsOK(SWIG_ConvertPtr(L,$input,(void**)&amp;argp,$&amp;descriptor,0))){&#10;     SWIG_fail_ptr(&quot;$symname&quot;,$argnum,$&amp;descriptor);&#10;   }&#10;   $1 = *argp;&#10;" id="1159" addr="014622b0" />
                    <attribute name="method" value="in" id="1160" addr="014622b0" />
                    <kwargs id="1161" addr="01458120">
                        <attributelist id="1162" addr="01458120">
                            <attribute name="name" value="numinputs" id="1163" addr="014622b0" />
                            <attribute name="value" value="1" id="1164" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1165" addr="01458130">
                            <attributelist id="1166" addr="01458130">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1167" addr="014426e0">
                            <attributelist id="1168" addr="014426e0">
                                <attribute name="name" value="checkfn" id="1169" addr="014622b0" />
                                <attribute name="value" value="lua_isuserdata" id="1170" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1171" addr="01458150">
                            <attributelist id="1172" addr="01458150">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1173" addr="01442800">
                    <attributelist id="1174" addr="01442800">
                        <parmlist id="1175" addr="01442820">
                            <parm id="1176">
                                <attributelist id="1177" addr="01442820">
                                    <attribute name="type" value="SWIGTYPE" id="1178" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="1179" addr="014427a0">
                            <parm id="1180">
                                <attributelist id="1181" addr="014427a0">
                                    <attribute name="type" value="$&amp;ltype" id="1182" addr="014622b0" />
                                    <attribute name="name" value="argp" id="1183" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1184" addr="01442a20">
                <attributelist id="1185" addr="01442a20">
                    <attribute name="code" value="temp=($*ltype)SWIG_MustGetPtr(L,$input,$*descriptor,0,$argnum,&quot;$symname&quot;);&#10;$1=($1_ltype)&amp;temp;" id="1186" addr="014622b0" />
                    <attribute name="method" value="in" id="1187" addr="014622b0" />
                    <kwargs id="1188" addr="01458170">
                        <attributelist id="1189" addr="01458170">
                            <attribute name="name" value="numinputs" id="1190" addr="014622b0" />
                            <attribute name="value" value="1" id="1191" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1192" addr="01458270">
                            <attributelist id="1193" addr="01458270">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1194" addr="014428a0">
                            <attributelist id="1195" addr="014428a0">
                                <attribute name="name" value="checkfn" id="1196" addr="014622b0" />
                                <attribute name="value" value="SWIG_isptrtype" id="1197" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1198" addr="01458280">
                            <attributelist id="1199" addr="01458280">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1200" addr="014429c0">
                    <attributelist id="1201" addr="014429c0">
                        <parmlist id="1202" addr="014429f0">
                            <parm id="1203">
                                <attributelist id="1204" addr="014429f0">
                                    <attribute name="type" value="r.q(const).p.SWIGTYPE" id="1205" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                        <parmlist id="1206" addr="01442980">
                            <parm id="1207">
                                <attributelist id="1208" addr="01442980">
                                    <attribute name="type" value="$*ltype" id="1209" addr="014622b0" />
                                    <attribute name="name" value="temp" id="1210" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1211" addr="01442b20">
                <attributelist id="1212" addr="01442b20">
                    <attribute name="code" value="SWIG_NewPointerObj(L,*$1,$*descriptor,$owner); SWIG_arg++; " id="1213" addr="014622b0" />
                    <attribute name="method" value="out" id="1214" addr="014622b0" />
                </attributelist>

                <typemapitem id="1215" addr="01442ad0">
                    <attributelist id="1216" addr="01442ad0">
                        <parmlist id="1217" addr="01442af0">
                            <parm id="1218">
                                <attributelist id="1219" addr="01442af0">
                                    <attribute name="type" value="r.q(const).p.SWIGTYPE" id="1220" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1221" addr="01442d20">
                <attributelist id="1222" addr="01442d20">
                    <attribute name="code" value="  if (!SWIG_IsOK(SWIG_ConvertPtr(L,$input,(void**)&amp;$1,$descriptor,SWIG_POINTER_DISOWN))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,$argnum,$descriptor);&#10;  }&#10;" id="1223" addr="014622b0" />
                    <attribute name="method" value="in" id="1224" addr="014622b0" />
                    <kwargs id="1225" addr="014583a0">
                        <attributelist id="1226" addr="014583a0">
                            <attribute name="name" value="numinputs" id="1227" addr="014622b0" />
                            <attribute name="value" value="1" id="1228" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1229" addr="014583f0">
                            <attributelist id="1230" addr="014583f0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1231" addr="01442b70">
                            <attributelist id="1232" addr="01442b70">
                                <attribute name="name" value="checkfn" id="1233" addr="014622b0" />
                                <attribute name="value" value="SWIG_isptrtype" id="1234" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1235" addr="014583e0">
                            <attributelist id="1236" addr="014583e0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1237" addr="01442c00">
                    <attributelist id="1238" addr="01442c00">
                        <parmlist id="1239" addr="01442c20">
                            <parm id="1240">
                                <attributelist id="1241" addr="01442c20">
                                    <attribute name="type" value="p.SWIGTYPE" id="1242" addr="014622b0" />
                                    <attribute name="name" value="DISOWN" id="1243" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1244" addr="01442cc0">
                    <attributelist id="1245" addr="01442cc0">
                        <parmlist id="1246" addr="01442ce0">
                            <parm id="1247">
                                <attributelist id="1248" addr="01442ce0">
                                    <attribute name="type" value="a().SWIGTYPE" id="1249" addr="014622b0" />
                                    <attribute name="name" value="DISOWN" id="1250" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1251" addr="01442e00">
                <attributelist id="1252" addr="01442e00">
                    <attribute name="code" value="{&#10;  $&amp;1_ltype resultptr = new $1_ltype($1);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,$&amp;1_descriptor,1); SWIG_arg++;&#10;}" id="1253" addr="014622b0" />
                    <attribute name="method" value="out" id="1254" addr="014622b0" />
                </attributelist>

                <typemapitem id="1255" addr="01442da0">
                    <attributelist id="1256" addr="01442da0">
                        <parmlist id="1257" addr="01442dc0">
                            <parm id="1258">
                                <attributelist id="1259" addr="01442dc0">
                                    <attribute name="type" value="SWIGTYPE" id="1260" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1261" addr="01442f50">
                <attributelist id="1262" addr="01442f50">
                    <attribute name="code" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertMember(L,$input,(void*)(&amp;$1),sizeof($1),$descriptor)))&#10;    SWIG_fail_ptr(&quot;$symname&quot;,$argnum,$descriptor);&#10;" id="1263" addr="014622b0" />
                    <attribute name="method" value="in" id="1264" addr="014622b0" />
                    <kwargs id="1265" addr="01458550">
                        <attributelist id="1266" addr="01458550">
                            <attribute name="name" value="numinputs" id="1267" addr="014622b0" />
                            <attribute name="value" value="1" id="1268" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1269" addr="01458570">
                            <attributelist id="1270" addr="01458570">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1271" addr="01442e50">
                            <attributelist id="1272" addr="01442e50">
                                <attribute name="name" value="checkfn" id="1273" addr="014622b0" />
                                <attribute name="value" value="lua_isuserdata" id="1274" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1275" addr="01458580">
                            <attributelist id="1276" addr="01458580">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1277" addr="01442f00">
                    <attributelist id="1278" addr="01442f00">
                        <parmlist id="1279" addr="01442f20">
                            <parm id="1280">
                                <attributelist id="1281" addr="01442f20">
                                    <attribute name="type" value="m(CLASS).SWIGTYPE" id="1282" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1283" addr="01443070">
                <attributelist id="1284" addr="01443070">
                    <attribute name="code" value="&#10;  SWIG_NewMemberObj(L,(void*)(&amp;$1),sizeof($1),$descriptor); SWIG_arg++;&#10;" id="1285" addr="014622b0" />
                    <attribute name="method" value="out" id="1286" addr="014622b0" />
                </attributelist>

                <typemapitem id="1287" addr="01443020">
                    <attributelist id="1288" addr="01443020">
                        <parmlist id="1289" addr="01443040">
                            <parm id="1290">
                                <attributelist id="1291" addr="01443040">
                                    <attribute name="type" value="m(CLASS).SWIGTYPE" id="1292" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1293" addr="01443140">
                <attributelist id="1294" addr="01443140">
                    <attribute name="code" value="" id="1295" addr="014622b0" />
                    <attribute name="method" value="out" id="1296" addr="014622b0" />
                </attributelist>

                <typemapitem id="1297" addr="014430e0">
                    <attributelist id="1298" addr="014430e0">
                        <parmlist id="1299" addr="01443100">
                            <parm id="1300">
                                <attributelist id="1301" addr="01443100">
                                    <attribute name="type" value="void" id="1302" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1303" addr="01443250">
                <attributelist id="1304" addr="01443250">
                    <attribute name="code" value="$1=($1_ltype)SWIG_MustGetPtr(L,$input,0,0,$argnum,&quot;$symname&quot;);" id="1305" addr="014622b0" />
                    <attribute name="method" value="in" id="1306" addr="014622b0" />
                    <kwargs id="1307" addr="01458690">
                        <attributelist id="1308" addr="01458690">
                            <attribute name="name" value="numinputs" id="1309" addr="014622b0" />
                            <attribute name="value" value="1" id="1310" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1311" addr="014586c0">
                            <attributelist id="1312" addr="014586c0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1313" addr="01443190">
                            <attributelist id="1314" addr="01443190">
                                <attribute name="name" value="checkfn" id="1315" addr="014622b0" />
                                <attribute name="value" value="SWIG_isptrtype" id="1316" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1317" addr="014586d0">
                            <attributelist id="1318" addr="014586d0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1319" addr="01443200">
                    <attributelist id="1320" addr="01443200">
                        <parmlist id="1321" addr="01443220">
                            <parm id="1322">
                                <attributelist id="1323" addr="01443220">
                                    <attribute name="type" value="p.void" id="1324" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <apply id="1325" addr="014434f0">
                <attributelist id="1326" addr="014434f0">
                    <parmlist id="1327" addr="014432c0">
                        <parm id="1328">
                            <attributelist id="1329" addr="014432c0">
                                <attribute name="type" value="long" id="1330" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1331" addr="01443340">
                    <attributelist id="1332" addr="01443340">
                        <parmlist id="1333" addr="01443360">
                            <parm id="1334">
                                <attributelist id="1335" addr="01443360">
                                    <attribute name="type" value="long long" id="1336" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1337" addr="014433f0">
                    <attributelist id="1338" addr="014433f0">
                        <parmlist id="1339" addr="01443410">
                            <parm id="1340">
                                <attributelist id="1341" addr="01443410">
                                    <attribute name="type" value="long long" id="1342" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1343" addr="014434a0">
                    <attributelist id="1344" addr="014434a0">
                        <parmlist id="1345" addr="014434c0">
                            <parm id="1346">
                                <attributelist id="1347" addr="014434c0">
                                    <attribute name="type" value="unsigned long long" id="1348" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1349" addr="01443810">
                <attributelist id="1350" addr="01443810">
                    <parmlist id="1351" addr="01443580">
                        <parm id="1352">
                            <attributelist id="1353" addr="01443580">
                                <attribute name="type" value="r.q(const).long" id="1354" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1355" addr="01443620">
                    <attributelist id="1356" addr="01443620">
                        <parmlist id="1357" addr="01443640">
                            <parm id="1358">
                                <attributelist id="1359" addr="01443640">
                                    <attribute name="type" value="r.q(const).long long" id="1360" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1361" addr="01443690">
                    <attributelist id="1362" addr="01443690">
                        <parmlist id="1363" addr="01443710">
                            <parm id="1364">
                                <attributelist id="1365" addr="01443710">
                                    <attribute name="type" value="r.q(const).long long" id="1366" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1367" addr="01443760">
                    <attributelist id="1368" addr="01443760">
                        <parmlist id="1369" addr="014437e0">
                            <parm id="1370">
                                <attributelist id="1371" addr="014437e0">
                                    <attribute name="type" value="r.q(const).unsigned long long" id="1372" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <typemap id="1373" addr="01443940">
                <attributelist id="1374" addr="01443940">
                    <attribute name="code" value="$1 = L;" id="1375" addr="014622b0" />
                    <attribute name="method" value="in" id="1376" addr="014622b0" />
                    <kwargs id="1377" addr="01443860">
                        <attributelist id="1378" addr="01443860">
                            <attribute name="name" value="numinputs" id="1379" addr="014622b0" />
                            <attribute name="value" value="0" id="1380" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1381" addr="01443870">
                            <attributelist id="1382" addr="01443870">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1383" addr="01443880">
                            <attributelist id="1384" addr="01443880">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1385" addr="014438f0">
                    <attributelist id="1386" addr="014438f0">
                        <parmlist id="1387" addr="01443910">
                            <parm id="1388">
                                <attributelist id="1389" addr="01443910">
                                    <attribute name="type" value="p.lua_State" id="1390" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1391" addr="014449e0">
                <attributelist id="1392" addr="014449e0">
                    <attribute name="code" value="{&#10;  $1 = lua_isnumber(L,$input);&#10;}" id="1393" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1394" addr="014622b0" />
                    <kwargs id="1395" addr="01443990">
                        <attributelist id="1396" addr="01443990">
                            <attribute name="name" value="precedence" id="1397" addr="014622b0" />
                            <attribute name="value" value="70" id="1398" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1399" addr="014439a0">
                            <attributelist id="1400" addr="014439a0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1401" addr="014439b0">
                            <attributelist id="1402" addr="014439b0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1403" addr="01443a00">
                    <attributelist id="1404" addr="01443a00">
                        <parmlist id="1405" addr="01443a20">
                            <parm id="1406">
                                <attributelist id="1407" addr="01443a20">
                                    <attribute name="type" value="int" id="1408" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1409" addr="01443a70">
                    <attributelist id="1410" addr="01443a70">
                        <parmlist id="1411" addr="01443a90">
                            <parm id="1412">
                                <attributelist id="1413" addr="01443a90">
                                    <attribute name="type" value="short" id="1414" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1415" addr="01443ae0">
                    <attributelist id="1416" addr="01443ae0">
                        <parmlist id="1417" addr="01443b00">
                            <parm id="1418">
                                <attributelist id="1419" addr="01443b00">
                                    <attribute name="type" value="long" id="1420" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1421" addr="01443b60">
                    <attributelist id="1422" addr="01443b60">
                        <parmlist id="1423" addr="01443b80">
                            <parm id="1424">
                                <attributelist id="1425" addr="01443b80">
                                    <attribute name="type" value="unsigned int" id="1426" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1427" addr="01443be0">
                    <attributelist id="1428" addr="01443be0">
                        <parmlist id="1429" addr="01443c00">
                            <parm id="1430">
                                <attributelist id="1431" addr="01443c00">
                                    <attribute name="type" value="unsigned short" id="1432" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1433" addr="01443c60">
                    <attributelist id="1434" addr="01443c60">
                        <parmlist id="1435" addr="01443c80">
                            <parm id="1436">
                                <attributelist id="1437" addr="01443c80">
                                    <attribute name="type" value="unsigned long" id="1438" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1439" addr="01443ce0">
                    <attributelist id="1440" addr="01443ce0">
                        <parmlist id="1441" addr="01443d00">
                            <parm id="1442">
                                <attributelist id="1443" addr="01443d00">
                                    <attribute name="type" value="signed char" id="1444" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1445" addr="01443d60">
                    <attributelist id="1446" addr="01443d60">
                        <parmlist id="1447" addr="01443d80">
                            <parm id="1448">
                                <attributelist id="1449" addr="01443d80">
                                    <attribute name="type" value="unsigned char" id="1450" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1451" addr="01443e00">
                    <attributelist id="1452" addr="01443e00">
                        <parmlist id="1453" addr="01443e20">
                            <parm id="1454">
                                <attributelist id="1455" addr="01443e20">
                                    <attribute name="type" value="long long" id="1456" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1457" addr="01443eb0">
                    <attributelist id="1458" addr="01443eb0">
                        <parmlist id="1459" addr="01443ed0">
                            <parm id="1460">
                                <attributelist id="1461" addr="01443ed0">
                                    <attribute name="type" value="unsigned long long" id="1462" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1463" addr="01443f60">
                    <attributelist id="1464" addr="01443f60">
                        <parmlist id="1465" addr="01443f80">
                            <parm id="1466">
                                <attributelist id="1467" addr="01443f80">
                                    <attribute name="type" value="long long" id="1468" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1469" addr="01443ff0">
                    <attributelist id="1470" addr="01443ff0">
                        <parmlist id="1471" addr="01444010">
                            <parm id="1472">
                                <attributelist id="1473" addr="01444010">
                                    <attribute name="type" value="r.q(const).int" id="1474" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1475" addr="01444080">
                    <attributelist id="1476" addr="01444080">
                        <parmlist id="1477" addr="014440a0">
                            <parm id="1478">
                                <attributelist id="1479" addr="014440a0">
                                    <attribute name="type" value="r.q(const).short" id="1480" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1481" addr="01444110">
                    <attributelist id="1482" addr="01444110">
                        <parmlist id="1483" addr="01444130">
                            <parm id="1484">
                                <attributelist id="1485" addr="01444130">
                                    <attribute name="type" value="r.q(const).long" id="1486" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1487" addr="01444180">
                    <attributelist id="1488" addr="01444180">
                        <parmlist id="1489" addr="014441d0">
                            <parm id="1490">
                                <attributelist id="1491" addr="014441d0">
                                    <attribute name="type" value="r.q(const).unsigned int" id="1492" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1493" addr="01444220">
                    <attributelist id="1494" addr="01444220">
                        <parmlist id="1495" addr="01444270">
                            <parm id="1496">
                                <attributelist id="1497" addr="01444270">
                                    <attribute name="type" value="r.q(const).unsigned short" id="1498" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1499" addr="014442c0">
                    <attributelist id="1500" addr="014442c0">
                        <parmlist id="1501" addr="01444310">
                            <parm id="1502">
                                <attributelist id="1503" addr="01444310">
                                    <attribute name="type" value="r.q(const).unsigned long" id="1504" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1505" addr="01444360">
                    <attributelist id="1506" addr="01444360">
                        <parmlist id="1507" addr="014443b0">
                            <parm id="1508">
                                <attributelist id="1509" addr="014443b0">
                                    <attribute name="type" value="r.q(const).signed char" id="1510" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1511" addr="01444400">
                    <attributelist id="1512" addr="01444400">
                        <parmlist id="1513" addr="01444450">
                            <parm id="1514">
                                <attributelist id="1515" addr="01444450">
                                    <attribute name="type" value="r.q(const).unsigned char" id="1516" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1517" addr="014444f0">
                    <attributelist id="1518" addr="014444f0">
                        <parmlist id="1519" addr="01444510">
                            <parm id="1520">
                                <attributelist id="1521" addr="01444510">
                                    <attribute name="type" value="r.q(const).long long" id="1522" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1523" addr="01444560">
                    <attributelist id="1524" addr="01444560">
                        <parmlist id="1525" addr="014445e0">
                            <parm id="1526">
                                <attributelist id="1527" addr="014445e0">
                                    <attribute name="type" value="r.q(const).unsigned long long" id="1528" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1529" addr="01444640">
                    <attributelist id="1530" addr="01444640">
                        <parmlist id="1531" addr="01444660">
                            <parm id="1532">
                                <attributelist id="1533" addr="01444660">
                                    <attribute name="type" value="enum SWIGTYPE" id="1534" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1535" addr="014446e0">
                    <attributelist id="1536" addr="014446e0">
                        <parmlist id="1537" addr="01444700">
                            <parm id="1538">
                                <attributelist id="1539" addr="01444700">
                                    <attribute name="type" value="r.q(const).enum SWIGTYPE" id="1540" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1541" addr="01444780">
                    <attributelist id="1542" addr="01444780">
                        <parmlist id="1543" addr="014447a0">
                            <parm id="1544">
                                <attributelist id="1545" addr="014447a0">
                                    <attribute name="type" value="z.q(const).enum SWIGTYPE" id="1546" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1547" addr="014447f0">
                    <attributelist id="1548" addr="014447f0">
                        <parmlist id="1549" addr="01444810">
                            <parm id="1550">
                                <attributelist id="1551" addr="01444810">
                                    <attribute name="type" value="float" id="1552" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1553" addr="01444860">
                    <attributelist id="1554" addr="01444860">
                        <parmlist id="1555" addr="01444880">
                            <parm id="1556">
                                <attributelist id="1557" addr="01444880">
                                    <attribute name="type" value="double" id="1558" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1559" addr="014448f0">
                    <attributelist id="1560" addr="014448f0">
                        <parmlist id="1561" addr="01444910">
                            <parm id="1562">
                                <attributelist id="1563" addr="01444910">
                                    <attribute name="type" value="r.q(const).float" id="1564" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1565" addr="01444980">
                    <attributelist id="1566" addr="01444980">
                        <parmlist id="1567" addr="014449a0">
                            <parm id="1568">
                                <attributelist id="1569" addr="014449a0">
                                    <attribute name="type" value="r.q(const).double" id="1570" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1571" addr="01444b70">
                <attributelist id="1572" addr="01444b70">
                    <attribute name="code" value="{&#10;  $1 = lua_isboolean(L,$input);&#10;}" id="1573" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1574" addr="014622b0" />
                    <kwargs id="1575" addr="01444a30">
                        <attributelist id="1576" addr="01444a30">
                            <attribute name="name" value="precedence" id="1577" addr="014622b0" />
                            <attribute name="value" value="15" id="1578" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1579" addr="01444a40">
                            <attributelist id="1580" addr="01444a40">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1581" addr="01444a50">
                            <attributelist id="1582" addr="01444a50">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1583" addr="01444a90">
                    <attributelist id="1584" addr="01444a90">
                        <parmlist id="1585" addr="01444ab0">
                            <parm id="1586">
                                <attributelist id="1587" addr="01444ab0">
                                    <attribute name="type" value="bool" id="1588" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1589" addr="01444b10">
                    <attributelist id="1590" addr="01444b10">
                        <parmlist id="1591" addr="01444b30">
                            <parm id="1592">
                                <attributelist id="1593" addr="01444b30">
                                    <attribute name="type" value="r.q(const).bool" id="1594" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1595" addr="01444d50">
                <attributelist id="1596" addr="01444d50">
                    <attribute name="code" value="{&#10;  $1 = SWIG_lua_isnilstring(L,$input) &amp;&amp; (lua_rawlen(L,$input)==1);&#10;}" id="1597" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1598" addr="014622b0" />
                    <kwargs id="1599" addr="01444bf0">
                        <attributelist id="1600" addr="01444bf0">
                            <attribute name="name" value="precedence" id="1601" addr="014622b0" />
                            <attribute name="value" value="130" id="1602" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1603" addr="01444c00">
                            <attributelist id="1604" addr="01444c00">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1605" addr="01444bd0">
                            <attributelist id="1606" addr="01444bd0">
                                <attribute name="name" value="fragment" id="1607" addr="014622b0" />
                                <attribute name="value" value="SWIG_lua_isnilstring" id="1608" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1609" addr="01444c10">
                            <attributelist id="1610" addr="01444c10">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1611" addr="01444c60">
                    <attributelist id="1612" addr="01444c60">
                        <parmlist id="1613" addr="01444c80">
                            <parm id="1614">
                                <attributelist id="1615" addr="01444c80">
                                    <attribute name="type" value="char" id="1616" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1617" addr="01444cf0">
                    <attributelist id="1618" addr="01444cf0">
                        <parmlist id="1619" addr="01444d10">
                            <parm id="1620">
                                <attributelist id="1621" addr="01444d10">
                                    <attribute name="type" value="r.q(const).char" id="1622" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1623" addr="01444f30">
                <attributelist id="1624" addr="01444f30">
                    <attribute name="code" value="{&#10;  $1 = SWIG_lua_isnilstring(L,$input);&#10;}" id="1625" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1626" addr="014622b0" />
                    <kwargs id="1627" addr="01444dd0">
                        <attributelist id="1628" addr="01444dd0">
                            <attribute name="name" value="precedence" id="1629" addr="014622b0" />
                            <attribute name="value" value="140" id="1630" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1631" addr="01444de0">
                            <attributelist id="1632" addr="01444de0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1633" addr="01444db0">
                            <attributelist id="1634" addr="01444db0">
                                <attribute name="name" value="fragment" id="1635" addr="014622b0" />
                                <attribute name="value" value="SWIG_lua_isnilstring" id="1636" addr="014622b0" />
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1637" addr="01444df0">
                            <attributelist id="1638" addr="01444df0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1639" addr="01444e50">
                    <attributelist id="1640" addr="01444e50">
                        <parmlist id="1641" addr="01444e70">
                            <parm id="1642">
                                <attributelist id="1643" addr="01444e70">
                                    <attribute name="type" value="p.char" id="1644" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1645" addr="01444ed0">
                    <attributelist id="1646" addr="01444ed0">
                        <parmlist id="1647" addr="01444ef0">
                            <parm id="1648">
                                <attributelist id="1649" addr="01444ef0">
                                    <attribute name="type" value="a().char" id="1650" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1651" addr="014450e0">
                <attributelist id="1652" addr="014450e0">
                    <attribute name="code" value="{&#10;  void *ptr;&#10;  if (SWIG_isptrtype(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, $1_descriptor, 0)) {&#10;    $1 = 0;&#10;  } else {&#10;    $1 = 1;&#10;  }&#10;}" id="1653" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1654" addr="014622b0" />
                    <kwargs id="1655" addr="01444f80">
                        <attributelist id="1656" addr="01444f80">
                            <attribute name="name" value="precedence" id="1657" addr="014622b0" />
                            <attribute name="value" value="0" id="1658" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1659" addr="01444f90">
                            <attributelist id="1660" addr="01444f90">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1661" addr="01444fa0">
                            <attributelist id="1662" addr="01444fa0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1663" addr="01445000">
                    <attributelist id="1664" addr="01445000">
                        <parmlist id="1665" addr="01445020">
                            <parm id="1666">
                                <attributelist id="1667" addr="01445020">
                                    <attribute name="type" value="p.SWIGTYPE" id="1668" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
                <typemapitem id="1669" addr="01445080">
                    <attributelist id="1670" addr="01445080">
                        <parmlist id="1671" addr="014450a0">
                            <parm id="1672">
                                <attributelist id="1673" addr="014450a0">
                                    <attribute name="type" value="a().SWIGTYPE" id="1674" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1675" addr="01445210">
                <attributelist id="1676" addr="01445210">
                    <attribute name="code" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, $1_descriptor, SWIG_POINTER_NO_NULL)) {&#10;    $1 = 0;&#10;  } else {&#10;    $1 = 1;&#10;  }&#10;}" id="1677" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1678" addr="014622b0" />
                    <kwargs id="1679" addr="01445130">
                        <attributelist id="1680" addr="01445130">
                            <attribute name="name" value="precedence" id="1681" addr="014622b0" />
                            <attribute name="value" value="0" id="1682" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1683" addr="01445140">
                            <attributelist id="1684" addr="01445140">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1685" addr="01445150">
                            <attributelist id="1686" addr="01445150">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1687" addr="014451b0">
                    <attributelist id="1688" addr="014451b0">
                        <parmlist id="1689" addr="014451d0">
                            <parm id="1690">
                                <attributelist id="1691" addr="014451d0">
                                    <attribute name="type" value="r.SWIGTYPE" id="1692" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1693" addr="01445340">
                <attributelist id="1694" addr="01445340">
                    <attribute name="code" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, $1_descriptor, SWIG_POINTER_NO_NULL)) {&#10;    $1 = 0;&#10;  } else {&#10;    $1 = 1;&#10;  }&#10;}" id="1695" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1696" addr="014622b0" />
                    <kwargs id="1697" addr="01445260">
                        <attributelist id="1698" addr="01445260">
                            <attribute name="name" value="precedence" id="1699" addr="014622b0" />
                            <attribute name="value" value="0" id="1700" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1701" addr="01445270">
                            <attributelist id="1702" addr="01445270">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1703" addr="01445280">
                            <attributelist id="1704" addr="01445280">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1705" addr="014452e0">
                    <attributelist id="1706" addr="014452e0">
                        <parmlist id="1707" addr="01445300">
                            <parm id="1708">
                                <attributelist id="1709" addr="01445300">
                                    <attribute name="type" value="z.SWIGTYPE" id="1710" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1711" addr="01445460">
                <attributelist id="1712" addr="01445460">
                    <attribute name="code" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, $&amp;1_descriptor, SWIG_POINTER_NO_NULL)) {&#10;    $1 = 0;&#10;  } else {&#10;    $1 = 1;&#10;  }&#10;}" id="1713" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1714" addr="014622b0" />
                    <kwargs id="1715" addr="01445390">
                        <attributelist id="1716" addr="01445390">
                            <attribute name="name" value="precedence" id="1717" addr="014622b0" />
                            <attribute name="value" value="0" id="1718" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1719" addr="014453a0">
                            <attributelist id="1720" addr="014453a0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1721" addr="014453b0">
                            <attributelist id="1722" addr="014453b0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1723" addr="01445400">
                    <attributelist id="1724" addr="01445400">
                        <parmlist id="1725" addr="01445420">
                            <parm id="1726">
                                <attributelist id="1727" addr="01445420">
                                    <attribute name="type" value="SWIGTYPE" id="1728" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1729" addr="01445580">
                <attributelist id="1730" addr="01445580">
                    <attribute name="code" value="{&#10;  void *ptr;&#10;  if (SWIG_isptrtype(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, 0, 0)) {&#10;    $1 = 0;&#10;  } else {&#10;    $1 = 1;&#10;  }&#10;}" id="1731" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1732" addr="014622b0" />
                    <kwargs id="1733" addr="014454b0">
                        <attributelist id="1734" addr="014454b0">
                            <attribute name="name" value="precedence" id="1735" addr="014622b0" />
                            <attribute name="value" value="10" id="1736" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1737" addr="014454c0">
                            <attributelist id="1738" addr="014454c0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1739" addr="014454d0">
                            <attributelist id="1740" addr="014454d0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1741" addr="01445520">
                    <attributelist id="1742" addr="01445520">
                        <parmlist id="1743" addr="01445540">
                            <parm id="1744">
                                <attributelist id="1745" addr="01445540">
                                    <attribute name="type" value="p.void" id="1746" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <typemap id="1747" addr="014456c0">
                <attributelist id="1748" addr="014456c0">
                    <attribute name="code" value="{&#10;  void *ptr;&#10;  if (SWIG_isptrtype(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, $*descriptor, 0)) {&#10;    $1 = 0;&#10;  } else {&#10;    $1 = 1;&#10;  }&#10;}" id="1749" addr="014622b0" />
                    <attribute name="method" value="typecheck" id="1750" addr="014622b0" />
                    <kwargs id="1751" addr="014455d0">
                        <attributelist id="1752" addr="014455d0">
                            <attribute name="name" value="precedence" id="1753" addr="014622b0" />
                            <attribute name="value" value="0" id="1754" addr="014622b0" />
                        </attributelist>
                        <kwargssitem id="1755" addr="014455e0">
                            <attributelist id="1756" addr="014455e0">
                            </attributelist>
                        </kwargssitem>
                        <kwargssitem id="1757" addr="014455f0">
                            <attributelist id="1758" addr="014455f0">
                            </attributelist>
                        </kwargssitem>
                    </kwargs>
                </attributelist>

                <typemapitem id="1759" addr="01445660">
                    <attributelist id="1760" addr="01445660">
                        <parmlist id="1761" addr="01445680">
                            <parm id="1762">
                                <attributelist id="1763" addr="01445680">
                                    <attribute name="type" value="r.q(const).p.SWIGTYPE" id="1764" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <apply id="1765" addr="01445830">
                <attributelist id="1766" addr="01445830">
                    <parmlist id="1767" addr="01445740">
                        <parm id="1768">
                            <attributelist id="1769" addr="01445740">
                                <attribute name="type" value="r.SWIGTYPE" id="1770" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1771" addr="014457b0">
                    <attributelist id="1772" addr="014457b0">
                        <parmlist id="1773" addr="01445800">
                            <parm id="1774">
                                <attributelist id="1775" addr="01445800">
                                    <attribute name="type" value="r.a(ANY).SWIGTYPE" id="1776" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1777" addr="01445990">
                <attributelist id="1778" addr="01445990">
                    <parmlist id="1779" addr="014458a0">
                        <parm id="1780">
                            <attributelist id="1781" addr="014458a0">
                                <attribute name="type" value="z.SWIGTYPE" id="1782" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1783" addr="01445910">
                    <attributelist id="1784" addr="01445910">
                        <parmlist id="1785" addr="01445960">
                            <parm id="1786">
                                <attributelist id="1787" addr="01445960">
                                    <attribute name="type" value="z.a(ANY).SWIGTYPE" id="1788" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1789" addr="01445ac0">
                <attributelist id="1790" addr="01445ac0">
                    <parmlist id="1791" addr="01445a00">
                        <parm id="1792">
                            <attributelist id="1793" addr="01445a00">
                                <attribute name="type" value="p.SWIGTYPE" id="1794" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1795" addr="01445a70">
                    <attributelist id="1796" addr="01445a70">
                        <parmlist id="1797" addr="01445a90">
                            <parm id="1798">
                                <attributelist id="1799" addr="01445a90">
                                    <attribute name="type" value="q(const).p.SWIGTYPE" id="1800" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1801" addr="01445c50">
                <attributelist id="1802" addr="01445c50">
                    <parmlist id="1803" addr="01445b60">
                        <parm id="1804">
                            <attributelist id="1805" addr="01445b60">
                                <attribute name="type" value="m(CLASS).SWIGTYPE" id="1806" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1807" addr="01445c00">
                    <attributelist id="1808" addr="01445c00">
                        <parmlist id="1809" addr="01445c20">
                            <parm id="1810">
                                <attributelist id="1811" addr="01445c20">
                                    <attribute name="type" value="q(const).m(CLASS).SWIGTYPE" id="1812" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1813" addr="01445db0">
                <attributelist id="1814" addr="01445db0">
                    <parmlist id="1815" addr="01445cc0">
                        <parm id="1816">
                            <attributelist id="1817" addr="01445cc0">
                                <attribute name="type" value="r.SWIGTYPE" id="1818" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1819" addr="01445d50">
                    <attributelist id="1820" addr="01445d50">
                        <parmlist id="1821" addr="01445d80">
                            <parm id="1822">
                                <attributelist id="1823" addr="01445d80">
                                    <attribute name="type" value="r.q(const).m(CLASS).SWIGTYPE" id="1824" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1825" addr="01445ec0">
                <attributelist id="1826" addr="01445ec0">
                    <parmlist id="1827" addr="01445e20">
                        <parm id="1828">
                            <attributelist id="1829" addr="01445e20">
                                <attribute name="type" value="unsigned long" id="1830" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1831" addr="01445e70">
                    <attributelist id="1832" addr="01445e70">
                        <parmlist id="1833" addr="01445e90">
                            <parm id="1834">
                                <attributelist id="1835" addr="01445e90">
                                    <attribute name="type" value="size_t" id="1836" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <apply id="1837" addr="01446020">
                <attributelist id="1838" addr="01446020">
                    <parmlist id="1839" addr="01445f60">
                        <parm id="1840">
                            <attributelist id="1841" addr="01445f60">
                                <attribute name="type" value="r.q(const).unsigned long" id="1842" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>

                <typemapitem id="1843" addr="01445fd0">
                    <attributelist id="1844" addr="01445fd0">
                        <parmlist id="1845" addr="01445ff0">
                            <parm id="1846">
                                <attributelist id="1847" addr="01445ff0">
                                    <attribute name="type" value="r.q(const).size_t" id="1848" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </apply>
            <insert id="1849" addr="01446110">
                <attributelist id="1850" addr="01446110">
                    <attribute name="code" value="&#10;namespace swig {&#10;typedef struct{} LANGUAGE_OBJ;&#10;}&#10;" id="1851" addr="014622b0" />
                </attributelist>
             
            </insert>
        </include>
        <include id="1852" addr="01446150">
            <attributelist id="1853" addr="01446150">
                <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\lua\\luaruntime.swg" id="1854" addr="014622b0" />
            </attributelist>

            <insert id="1855" addr="014461b0">
                <attributelist id="1856" addr="014461b0">
                    <attribute name="section" value="runtime" id="1857" addr="014622b0" />
                    <attribute name="code" value="/* -----------------------------------------------------------------------------&#10; * swigrun.swg&#10; *&#10; * This file contains generic C API SWIG runtime support for pointer&#10; * type checking.&#10; * ----------------------------------------------------------------------------- */&#10;&#10;/* This should only be incremented when either the layout of swig_type_info changes,&#10;   or for whatever reason, the runtime changes incompatibly */&#10;#define SWIG_RUNTIME_VERSION &quot;4&quot;&#10;&#10;/* define SWIG_TYPE_TABLE_NAME as &quot;SWIG_TYPE_TABLE&quot; */&#10;#ifdef SWIG_TYPE_TABLE&#10;# define SWIG_QUOTE_STRING(x) #x&#10;# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)&#10;# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)&#10;#else&#10;# define SWIG_TYPE_TABLE_NAME&#10;#endif&#10;&#10;/*&#10;  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for&#10;  creating a static or dynamic library from the SWIG runtime code.&#10;  In 99.9% of the cases, SWIG just needs to declare them as 'static'.&#10;&#10;  But only do this if strictly necessary, ie, if you have problems&#10;  with your compiler or suchlike.&#10;*/&#10;&#10;#ifndef SWIGRUNTIME&#10;# define SWIGRUNTIME SWIGINTERN&#10;#endif&#10;&#10;#ifndef SWIGRUNTIMEINLINE&#10;# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE&#10;#endif&#10;&#10;/*  Generic buffer size */&#10;#ifndef SWIG_BUFFER_SIZE&#10;# define SWIG_BUFFER_SIZE 1024&#10;#endif&#10;&#10;/* Flags for pointer conversions */&#10;#define SWIG_POINTER_DISOWN        0x1&#10;#define SWIG_CAST_NEW_MEMORY       0x2&#10;#define SWIG_POINTER_NO_NULL       0x4&#10;#define SWIG_POINTER_CLEAR         0x8&#10;#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)&#10;&#10;/* Flags for new pointer objects */&#10;#define SWIG_POINTER_OWN           0x1&#10;&#10;&#10;/*&#10;   Flags/methods for returning states.&#10;&#10;   The SWIG conversion methods, as ConvertPtr, return an integer&#10;   that tells if the conversion was successful or not. And if not,&#10;   an error code can be returned (see swigerrors.swg for the codes).&#10;&#10;   Use the following macros/flags to set or process the returning&#10;   states.&#10;&#10;   In old versions of SWIG, code such as the following was usually written:&#10;&#10;     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {&#10;       // success code&#10;     } else {&#10;       //fail code&#10;     }&#10;&#10;   Now you can be more explicit:&#10;&#10;    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);&#10;    if (SWIG_IsOK(res)) {&#10;      // success code&#10;    } else {&#10;      // fail code&#10;    }&#10;&#10;   which is the same really, but now you can also do&#10;&#10;    Type *ptr;&#10;    int res = SWIG_ConvertPtr(obj,(void **)(&amp;ptr),ty.flags);&#10;    if (SWIG_IsOK(res)) {&#10;      // success code&#10;      if (SWIG_IsNewObj(res) {&#10;        ...&#10;	delete *ptr;&#10;      } else {&#10;        ...&#10;      }&#10;    } else {&#10;      // fail code&#10;    }&#10;&#10;   I.e., now SWIG_ConvertPtr can return new objects and you can&#10;   identify the case and take care of the deallocation. Of course that&#10;   also requires SWIG_ConvertPtr to return new result values, such as&#10;&#10;      int SWIG_ConvertPtr(obj, ptr,...) {&#10;        if (&lt;obj is ok>) {&#10;          if (&lt;need new object>) {&#10;            *ptr = &lt;ptr to new allocated object>;&#10;            return SWIG_NEWOBJ;&#10;          } else {&#10;            *ptr = &lt;ptr to old object>;&#10;            return SWIG_OLDOBJ;&#10;          }&#10;        } else {&#10;          return SWIG_BADOBJ;&#10;        }&#10;      }&#10;&#10;   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be&#10;   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the&#10;   SWIG errors code.&#10;&#10;   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code&#10;   allows returning the 'cast rank', for example, if you have this&#10;&#10;       int food(double)&#10;       int fooi(int);&#10;&#10;   and you call&#10;&#10;      food(1)   // cast rank '1'  (1 -> 1.0)&#10;      fooi(1)   // cast rank '0'&#10;&#10;   just use the SWIG_AddCast()/SWIG_CheckState()&#10;*/&#10;&#10;#define SWIG_OK                    (0)&#10;/* Runtime errors are &lt; 0 */&#10;#define SWIG_ERROR                 (-1)&#10;/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */&#10;/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */&#10;/* Errors &lt; -200 are generic runtime specific errors */&#10;#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)&#10;&#10;#define SWIG_IsOK(r)               (r >= 0)&#10;#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)&#10;&#10;/* The CastRankLimit says how many bits are used for the cast rank */&#10;#define SWIG_CASTRANKLIMIT         (1 &lt;&lt; 8)&#10;/* The NewMask denotes the object was created (using new/malloc) */&#10;#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  &lt;&lt; 1)&#10;/* The TmpMask is for in/out typemaps that use temporal objects */&#10;#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK &lt;&lt; 1)&#10;/* Simple returning values */&#10;#define SWIG_BADOBJ                (SWIG_ERROR)&#10;#define SWIG_OLDOBJ                (SWIG_OK)&#10;#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)&#10;#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)&#10;/* Check, add and del object mask methods */&#10;#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)&#10;#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r &amp; ~SWIG_NEWOBJMASK) : r)&#10;#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) &amp;&amp; (r &amp; SWIG_NEWOBJMASK))&#10;#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)&#10;#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r &amp; ~SWIG_TMPOBJMASK) : r)&#10;#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) &amp;&amp; (r &amp; SWIG_TMPOBJMASK))&#10;&#10;/* Cast-Rank Mode */&#10;#if defined(SWIG_CASTRANK_MODE)&#10;#  ifndef SWIG_TypeRank&#10;#    define SWIG_TypeRank             unsigned long&#10;#  endif&#10;#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */&#10;#    define SWIG_MAXCASTRANK          (2)&#10;#  endif&#10;#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)&#10;#  define SWIG_CastRank(r)           (r &amp; SWIG_CASTRANKMASK)&#10;SWIGINTERNINLINE int SWIG_AddCast(int r) {&#10;  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) &lt; SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;&#10;}&#10;SWIGINTERNINLINE int SWIG_CheckState(int r) {&#10;  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;&#10;}&#10;#else /* no cast-rank mode */&#10;#  define SWIG_AddCast(r) (r)&#10;#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)&#10;#endif&#10;&#10;&#10;#include &lt;string.h>&#10;&#10;#ifdef __cplusplus&#10;extern &quot;C&quot; {&#10;#endif&#10;&#10;typedef void *(*swig_converter_func)(void *, int *);&#10;typedef struct swig_type_info *(*swig_dycast_func)(void **);&#10;&#10;/* Structure to store information on one type */&#10;typedef struct swig_type_info {&#10;  const char             *name;			/* mangled name of this type */&#10;  const char             *str;			/* human readable name of this type */&#10;  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */&#10;  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */&#10;  void                   *clientdata;		/* language specific type data */&#10;  int                    owndata;		/* flag if the structure owns the clientdata */&#10;} swig_type_info;&#10;&#10;/* Structure to store a type and conversion function used for casting */&#10;typedef struct swig_cast_info {&#10;  swig_type_info         *type;			/* pointer to type that is equivalent to this type */&#10;  swig_converter_func     converter;		/* function to cast the void pointers */&#10;  struct swig_cast_info  *next;			/* pointer to next cast in linked list */&#10;  struct swig_cast_info  *prev;			/* pointer to the previous cast */&#10;} swig_cast_info;&#10;&#10;/* Structure used to store module information&#10; * Each module generates one structure like this, and the runtime collects&#10; * all of these structures and stores them in a circularly linked list.*/&#10;typedef struct swig_module_info {&#10;  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */&#10;  size_t                 size;		        /* Number of types in this module */&#10;  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */&#10;  swig_type_info         **type_initial;	/* Array of initially generated type structures */&#10;  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */&#10;  void                    *clientdata;		/* Language specific module data */&#10;} swig_module_info;&#10;&#10;/*&#10;  Compare two type names skipping the space characters, therefore&#10;  &quot;char*&quot; == &quot;char *&quot; and &quot;Class&lt;int>&quot; == &quot;Class&lt;int >&quot;, etc.&#10;&#10;  Return 0 when the two name types are equivalent, as in&#10;  strncmp, but skipping ' '.&#10;*/&#10;SWIGRUNTIME int&#10;SWIG_TypeNameComp(const char *f1, const char *l1,&#10;		  const char *f2, const char *l2) {&#10;  for (;(f1 != l1) &amp;&amp; (f2 != l2); ++f1, ++f2) {&#10;    while ((*f1 == ' ') &amp;&amp; (f1 != l1)) ++f1;&#10;    while ((*f2 == ' ') &amp;&amp; (f2 != l2)) ++f2;&#10;    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;&#10;  }&#10;  return (int)((l1 - f1) - (l2 - f2));&#10;}&#10;&#10;/*&#10;  Check type equivalence in a name list like &lt;name1>|&lt;name2>|...&#10;  Return 0 if equal, -1 if nb &lt; tb, 1 if nb > tb&#10;*/&#10;SWIGRUNTIME int&#10;SWIG_TypeCmp(const char *nb, const char *tb) {&#10;  int equiv = 1;&#10;  const char* te = tb + strlen(tb);&#10;  const char* ne = nb;&#10;  while (equiv != 0 &amp;&amp; *ne) {&#10;    for (nb = ne; *ne; ++ne) {&#10;      if (*ne == '|') break;&#10;    }&#10;    equiv = SWIG_TypeNameComp(nb, ne, tb, te);&#10;    if (*ne) ++ne;&#10;  }&#10;  return equiv;&#10;}&#10;&#10;/*&#10;  Check type equivalence in a name list like &lt;name1>|&lt;name2>|...&#10;  Return 0 if not equal, 1 if equal&#10;*/&#10;SWIGRUNTIME int&#10;SWIG_TypeEquiv(const char *nb, const char *tb) {&#10;  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;&#10;}&#10;&#10;/*&#10;  Check the typename&#10;*/&#10;SWIGRUNTIME swig_cast_info *&#10;SWIG_TypeCheck(const char *c, swig_type_info *ty) {&#10;  if (ty) {&#10;    swig_cast_info *iter = ty->cast;&#10;    while (iter) {&#10;      if (strcmp(iter->type->name, c) == 0) {&#10;        if (iter == ty->cast)&#10;          return iter;&#10;        /* Move iter to the top of the linked list */&#10;        iter->prev->next = iter->next;&#10;        if (iter->next)&#10;          iter->next->prev = iter->prev;&#10;        iter->next = ty->cast;&#10;        iter->prev = 0;&#10;        if (ty->cast) ty->cast->prev = iter;&#10;        ty->cast = iter;&#10;        return iter;&#10;      }&#10;      iter = iter->next;&#10;    }&#10;  }&#10;  return 0;&#10;}&#10;&#10;/*&#10;  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison&#10;*/&#10;SWIGRUNTIME swig_cast_info *&#10;SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {&#10;  if (ty) {&#10;    swig_cast_info *iter = ty->cast;&#10;    while (iter) {&#10;      if (iter->type == from) {&#10;        if (iter == ty->cast)&#10;          return iter;&#10;        /* Move iter to the top of the linked list */&#10;        iter->prev->next = iter->next;&#10;        if (iter->next)&#10;          iter->next->prev = iter->prev;&#10;        iter->next = ty->cast;&#10;        iter->prev = 0;&#10;        if (ty->cast) ty->cast->prev = iter;&#10;        ty->cast = iter;&#10;        return iter;&#10;      }&#10;      iter = iter->next;&#10;    }&#10;  }&#10;  return 0;&#10;}&#10;&#10;/*&#10;  Cast a pointer up an inheritance hierarchy&#10;*/&#10;SWIGRUNTIMEINLINE void *&#10;SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {&#10;  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);&#10;}&#10;&#10;/*&#10;   Dynamic pointer casting. Down an inheritance hierarchy&#10;*/&#10;SWIGRUNTIME swig_type_info *&#10;SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {&#10;  swig_type_info *lastty = ty;&#10;  if (!ty || !ty->dcast) return ty;&#10;  while (ty &amp;&amp; (ty->dcast)) {&#10;    ty = (*ty->dcast)(ptr);&#10;    if (ty) lastty = ty;&#10;  }&#10;  return lastty;&#10;}&#10;&#10;/*&#10;  Return the name associated with this type&#10;*/&#10;SWIGRUNTIMEINLINE const char *&#10;SWIG_TypeName(const swig_type_info *ty) {&#10;  return ty->name;&#10;}&#10;&#10;/*&#10;  Return the pretty name associated with this type,&#10;  that is an unmangled type name in a form presentable to the user.&#10;*/&#10;SWIGRUNTIME const char *&#10;SWIG_TypePrettyName(const swig_type_info *type) {&#10;  /* The &quot;str&quot; field contains the equivalent pretty names of the&#10;     type, separated by vertical-bar characters.  Choose the last&#10;     name. It should be the most specific; a fully resolved name&#10;     but not necessarily with default template parameters expanded. */&#10;  if (!type) return NULL;&#10;  if (type->str != NULL) {&#10;    const char *last_name = type->str;&#10;    const char *s;&#10;    for (s = type->str; *s; s++)&#10;      if (*s == '|') last_name = s+1;&#10;    return last_name;&#10;  }&#10;  else&#10;    return type->name;&#10;}&#10;&#10;/*&#10;   Set the clientdata field for a type&#10;*/&#10;SWIGRUNTIME void&#10;SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {&#10;  swig_cast_info *cast = ti->cast;&#10;  /* if (ti->clientdata == clientdata) return; */&#10;  ti->clientdata = clientdata;&#10;&#10;  while (cast) {&#10;    if (!cast->converter) {&#10;      swig_type_info *tc = cast->type;&#10;      if (!tc->clientdata) {&#10;	SWIG_TypeClientData(tc, clientdata);&#10;      }&#10;    }&#10;    cast = cast->next;&#10;  }&#10;}&#10;SWIGRUNTIME void&#10;SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {&#10;  SWIG_TypeClientData(ti, clientdata);&#10;  ti->owndata = 1;&#10;}&#10;&#10;/*&#10;  Search for a swig_type_info structure only by mangled name&#10;  Search is a O(log #types)&#10;&#10;  We start searching at module start, and finish searching when start == end.&#10;  Note: if start == end at the beginning of the function, we go all the way around&#10;  the circular list.&#10;*/&#10;SWIGRUNTIME swig_type_info *&#10;SWIG_MangledTypeQueryModule(swig_module_info *start,&#10;                            swig_module_info *end,&#10;		            const char *name) {&#10;  swig_module_info *iter = start;&#10;  do {&#10;    if (iter->size) {&#10;      size_t l = 0;&#10;      size_t r = iter->size - 1;&#10;      do {&#10;	/* since l+r >= 0, we can (>> 1) instead (/ 2) */&#10;	size_t i = (l + r) >> 1;&#10;	const char *iname = iter->types[i]->name;&#10;	if (iname) {&#10;	  int compare = strcmp(name, iname);&#10;	  if (compare == 0) {&#10;	    return iter->types[i];&#10;	  } else if (compare &lt; 0) {&#10;	    if (i) {&#10;	      r = i - 1;&#10;	    } else {&#10;	      break;&#10;	    }&#10;	  } else if (compare > 0) {&#10;	    l = i + 1;&#10;	  }&#10;	} else {&#10;	  break; /* should never happen */&#10;	}&#10;      } while (l &lt;= r);&#10;    }&#10;    iter = iter->next;&#10;  } while (iter != end);&#10;  return 0;&#10;}&#10;&#10;/*&#10;  Search for a swig_type_info structure for either a mangled name or a human readable name.&#10;  It first searches the mangled names of the types, which is a O(log #types)&#10;  If a type is not found it then searches the human readable names, which is O(#types).&#10;&#10;  We start searching at module start, and finish searching when start == end.&#10;  Note: if start == end at the beginning of the function, we go all the way around&#10;  the circular list.&#10;*/&#10;SWIGRUNTIME swig_type_info *&#10;SWIG_TypeQueryModule(swig_module_info *start,&#10;                     swig_module_info *end,&#10;		     const char *name) {&#10;  /* STEP 1: Search the name field using binary search */&#10;  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);&#10;  if (ret) {&#10;    return ret;&#10;  } else {&#10;    /* STEP 2: If the type hasn't been found, do a complete search&#10;       of the str field (the human readable name) */&#10;    swig_module_info *iter = start;&#10;    do {&#10;      size_t i = 0;&#10;      for (; i &lt; iter->size; ++i) {&#10;	if (iter->types[i]->str &amp;&amp; (SWIG_TypeEquiv(iter->types[i]->str, name)))&#10;	  return iter->types[i];&#10;      }&#10;      iter = iter->next;&#10;    } while (iter != end);&#10;  }&#10;&#10;  /* neither found a match */&#10;  return 0;&#10;}&#10;&#10;/*&#10;   Pack binary data into a string&#10;*/&#10;SWIGRUNTIME char *&#10;SWIG_PackData(char *c, void *ptr, size_t sz) {&#10;  static const char hex[17] = &quot;0123456789abcdef&quot;;&#10;  const unsigned char *u = (unsigned char *) ptr;&#10;  const unsigned char *eu =  u + sz;&#10;  for (; u != eu; ++u) {&#10;    unsigned char uu = *u;&#10;    *(c++) = hex[(uu &amp; 0xf0) >> 4];&#10;    *(c++) = hex[uu &amp; 0xf];&#10;  }&#10;  return c;&#10;}&#10;&#10;/*&#10;   Unpack binary data from a string&#10;*/&#10;SWIGRUNTIME const char *&#10;SWIG_UnpackData(const char *c, void *ptr, size_t sz) {&#10;  unsigned char *u = (unsigned char *) ptr;&#10;  const unsigned char *eu = u + sz;&#10;  for (; u != eu; ++u) {&#10;    char d = *(c++);&#10;    unsigned char uu;&#10;    if ((d >= '0') &amp;&amp; (d &lt;= '9'))&#10;      uu = (unsigned char)((d - '0') &lt;&lt; 4);&#10;    else if ((d >= 'a') &amp;&amp; (d &lt;= 'f'))&#10;      uu = (unsigned char)((d - ('a'-10)) &lt;&lt; 4);&#10;    else&#10;      return (char *) 0;&#10;    d = *(c++);&#10;    if ((d >= '0') &amp;&amp; (d &lt;= '9'))&#10;      uu |= (unsigned char)(d - '0');&#10;    else if ((d >= 'a') &amp;&amp; (d &lt;= 'f'))&#10;      uu |= (unsigned char)(d - ('a'-10));&#10;    else&#10;      return (char *) 0;&#10;    *u = uu;&#10;  }&#10;  return c;&#10;}&#10;&#10;/*&#10;   Pack 'void *' into a string buffer.&#10;*/&#10;SWIGRUNTIME char *&#10;SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {&#10;  char *r = buff;&#10;  if ((2*sizeof(void *) + 2) > bsz) return 0;&#10;  *(r++) = '_';&#10;  r = SWIG_PackData(r,&amp;ptr,sizeof(void *));&#10;  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;&#10;  strcpy(r,name);&#10;  return buff;&#10;}&#10;&#10;SWIGRUNTIME const char *&#10;SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {&#10;  if (*c != '_') {&#10;    if (strcmp(c,&quot;NULL&quot;) == 0) {&#10;      *ptr = (void *) 0;&#10;      return name;&#10;    } else {&#10;      return 0;&#10;    }&#10;  }&#10;  return SWIG_UnpackData(++c,ptr,sizeof(void *));&#10;}&#10;&#10;SWIGRUNTIME char *&#10;SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {&#10;  char *r = buff;&#10;  size_t lname = (name ? strlen(name) : 0);&#10;  if ((2*sz + 2 + lname) > bsz) return 0;&#10;  *(r++) = '_';&#10;  r = SWIG_PackData(r,ptr,sz);&#10;  if (lname) {&#10;    strncpy(r,name,lname+1);&#10;  } else {&#10;    *r = 0;&#10;  }&#10;  return buff;&#10;}&#10;&#10;SWIGRUNTIME const char *&#10;SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {&#10;  if (*c != '_') {&#10;    if (strcmp(c,&quot;NULL&quot;) == 0) {&#10;      memset(ptr,0,sz);&#10;      return name;&#10;    } else {&#10;      return 0;&#10;    }&#10;  }&#10;  return SWIG_UnpackData(++c,ptr,sz);&#10;}&#10;&#10;#ifdef __cplusplus&#10;}&#10;#endif&#10;" id="1858" addr="014622b0" />
                </attributelist>
             
            </insert>
            <insert id="1859" addr="01446260">
                <attributelist id="1860" addr="01446260">
                    <attribute name="section" value="runtime" id="1861" addr="014622b0" />
                    <attribute name="code" value="/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */&#10;#define  SWIG_UnknownError    	   -1&#10;#define  SWIG_IOError        	   -2&#10;#define  SWIG_RuntimeError   	   -3&#10;#define  SWIG_IndexError     	   -4&#10;#define  SWIG_TypeError      	   -5&#10;#define  SWIG_DivisionByZero 	   -6&#10;#define  SWIG_OverflowError  	   -7&#10;#define  SWIG_SyntaxError    	   -8&#10;#define  SWIG_ValueError     	   -9&#10;#define  SWIG_SystemError    	   -10&#10;#define  SWIG_AttributeError 	   -11&#10;#define  SWIG_MemoryError    	   -12&#10;#define  SWIG_NullReferenceError   -13&#10;&#10;" id="1862" addr="014622b0" />
                </attributelist>
             
            </insert>
            <insert id="1863" addr="014462d0">
                <attributelist id="1864" addr="014462d0">
                    <attribute name="section" value="runtime" id="1865" addr="014622b0" />
                    <attribute name="code" value="/* -----------------------------------------------------------------------------&#10; * luarun.swg&#10; *&#10; * This file contains the runtime support for Lua modules&#10; * and includes code for managing global variables and pointer&#10; * type checking.&#10; * ----------------------------------------------------------------------------- */&#10;&#10;#ifdef __cplusplus&#10;extern &quot;C&quot; {&#10;#endif&#10;&#10;#include &quot;lua.h&quot;&#10;#include &quot;lauxlib.h&quot;&#10;#include &lt;stdlib.h>  /* for malloc */&#10;#include &lt;assert.h>  /* for a few sanity tests */&#10;&#10;/* -----------------------------------------------------------------------------&#10; * Lua flavors&#10; * ----------------------------------------------------------------------------- */&#10;&#10;#define SWIG_LUA_FLAVOR_LUA 1&#10;#define SWIG_LUA_FLAVOR_ELUA 2&#10;#define SWIG_LUA_FLAVOR_ELUAC 3&#10;&#10;#if !defined(SWIG_LUA_TARGET)&#10;# error SWIG_LUA_TARGET not defined&#10;#endif&#10;&#10;#if defined(SWIG_LUA_ELUA_EMULATE)&#10;&#10;struct swig_elua_entry;&#10;&#10;typedef struct swig_elua_key {&#10;  int type;&#10;  union {&#10;    const char* strkey;&#10;    lua_Number numkey;&#10;  } key;&#10;} swig_elua_key;&#10;&#10;typedef struct swig_elua_val {&#10;  int type;&#10;  union {&#10;    lua_Number number;&#10;    const struct swig_elua_entry *table;&#10;    const char *string;&#10;    lua_CFunction function;&#10;    struct {&#10;      char member;&#10;      long lvalue;&#10;      void *pvalue;&#10;      swig_type_info **ptype;&#10;    } userdata;&#10;  } value;&#10;} swig_elua_val;&#10;&#10;typedef struct swig_elua_entry {&#10;  swig_elua_key key;&#10;  swig_elua_val value;&#10;} swig_elua_entry;&#10;&#10;#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }&#10;#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }&#10;#define LNILKEY {LUA_TNIL, {.strkey = 0} }&#10;&#10;#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }&#10;#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }&#10;#define LROVAL(x) {LUA_TTABLE, {.table = x} }&#10;#define LNILVAL {LUA_TNIL, {.string = 0} }&#10;#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }&#10;&#10;#define LUA_REG_TYPE swig_elua_entry&#10;&#10;#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY &quot;__metatable&quot;&#10;&#10;#define lua_pushrotable(L,p)\\&#10;  lua_newtable(L);\\&#10;  assert(p);\\&#10;  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));&#10;&#10;#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\\&#10;  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&amp;D} } }&#10;&#10;#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\\&#10;  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&amp;D} } }&#10;#endif&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)&#10;#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)&#10;#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)&#10;#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)&#10;#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)&#10;    /* Those two types of constants are not supported in elua */&#10;&#10;#ifndef SWIG_LUA_CONSTTAB_POINTER&#10;#warning eLua does not support pointers as constants. By default, nil will be used as value&#10;#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL&#10;#endif&#10;&#10;#ifndef SWIG_LUA_CONSTTAB_BINARY&#10;#warning eLua does not support pointers to member as constants. By default, nil will be used as value&#10;#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL&#10;#endif&#10;#else /* SWIG_LUA_FLAVOR_LUA */&#10;#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0&#10;#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0&#10;#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0&#10;#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0&#10;#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\\&#10;       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &amp;D&#10;#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\\&#10;       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &amp;D&#10;#endif&#10;&#10;#ifndef SWIG_LUA_ELUA_EMULATE&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)&#10;#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}&#10;#  define LSTRVAL LRO_STRVAL&#10;#endif&#10;#endif /* SWIG_LUA_ELUA_EMULATE*/&#10;&#10;#ifndef SWIG_LUA_ELUA_EMULATE&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)&#10;&#10;#ifndef MIN_OPT_LEVEL&#10;#define MIN_OPT_LEVEL 2&#10;#endif&#10;&#10;#include &quot;lrodefs.h&quot;&#10;#include &quot;lrotable.h&quot;&#10;#endif&#10;#endif /* SWIG_LUA_ELUA_EMULATE*/&#10;/* -----------------------------------------------------------------------------&#10; * compatibility defines&#10; * ----------------------------------------------------------------------------- */&#10;&#10;/* History of Lua C API length functions:  In Lua 5.0 (and before?)&#10;   there was &quot;lua_strlen&quot;.  In Lua 5.1, this was renamed &quot;lua_objlen&quot;,&#10;   but a compatibility define of &quot;lua_strlen&quot; was added.  In Lua 5.2,&#10;   this function was again renamed, to &quot;lua_rawlen&quot; (to emphasize that&#10;   it doesn't call the &quot;__len&quot; metamethod), and the compatibility&#10;   define of lua_strlen was removed.  All SWIG uses have been updated&#10;   to &quot;lua_rawlen&quot;, and we add our own defines of that here for older&#10;   versions of Lua.  */&#10;#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM &lt; 501&#10;# define lua_rawlen lua_strlen&#10;#elif LUA_VERSION_NUM == 501&#10;# define lua_rawlen lua_objlen&#10;#endif&#10;&#10;&#10;/* lua_pushglobaltable is the recommended &quot;future-proof&quot; way to get&#10;   the global table for Lua 5.2 and later.  Here we define&#10;   lua_pushglobaltable ourselves for Lua versions before 5.2.  */&#10;#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM &lt; 502&#10;# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)&#10;#endif&#10;&#10;/* lua_absindex was introduced in Lua 5.2 */&#10;#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM &lt; 502&#10;# define lua_absindex(L,i) ((i)>0 || (i) &lt;= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)&#10;#endif&#10;&#10;/* lua_rawsetp was introduced in Lua 5.2 */&#10;#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM &lt; 502&#10;#define lua_rawsetp(L,index,ptr)\\&#10;  lua_pushlightuserdata(L,(void*)(ptr));\\&#10;  lua_insert(L,-2);\\&#10;  lua_rawset(L,index);&#10;&#10;#define lua_rawgetp(L,index,ptr)\\&#10;  lua_pushlightuserdata(L,(void*)(ptr));\\&#10;  lua_rawget(L,index);&#10;&#10;#endif&#10;&#10;/* --------------------------------------------------------------------------&#10; * Helper functions for error handling&#10; * -------------------------------------------------------------------------- */&#10;&#10;/* Push the string STR on the Lua stack, like lua_pushstring, but&#10;   prefixed with the location of the innermost Lua call-point&#10;   (as formatted by luaL_where).  */&#10;SWIGRUNTIME void&#10;SWIG_Lua_pusherrstring (lua_State *L, const char *str)&#10;{&#10;  luaL_where (L, 1);&#10;  lua_pushstring (L, str);&#10;  lua_concat (L, 2);&#10;}&#10;&#10;/* Push a formatted string generated from FMT and following args on&#10;   the Lua stack, like lua_pushfstring, but prefixed with the&#10;   location of the innermost Lua call-point (as formatted by luaL_where).  */&#10;SWIGRUNTIME void&#10;SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)&#10;{&#10;  va_list argp;&#10;  va_start(argp, fmt);&#10;  luaL_where(L, 1);&#10;  lua_pushvfstring(L, fmt, argp);&#10;  va_end(argp);&#10;  lua_concat(L, 2);&#10;}&#10;&#10;&#10;/* -----------------------------------------------------------------------------&#10; * global swig types&#10; * ----------------------------------------------------------------------------- */&#10;/* Constant table */&#10;#define SWIG_LUA_INT     1&#10;#define SWIG_LUA_FLOAT   2&#10;#define SWIG_LUA_STRING  3&#10;#define SWIG_LUA_POINTER 4&#10;#define SWIG_LUA_BINARY  5&#10;#define SWIG_LUA_CHAR    6&#10;&#10;/* Structure for variable linking table */&#10;typedef struct {&#10;  const char *name;&#10;  lua_CFunction get;&#10;  lua_CFunction set;&#10;} swig_lua_var_info;&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)&#10;typedef const LUA_REG_TYPE swig_lua_method;&#10;typedef const LUA_REG_TYPE swig_lua_const_info;&#10;#else /* Normal lua */&#10;typedef luaL_Reg swig_lua_method;&#10;&#10;/* Constant information structure */&#10;typedef struct {&#10;    int type;&#10;    char *name;&#10;    long lvalue;&#10;    double dvalue;&#10;    void   *pvalue;&#10;    swig_type_info **ptype;&#10;} swig_lua_const_info;&#10;&#10;#endif&#10;&#10;typedef struct {&#10;  const char     *name;&#10;  lua_CFunction   getmethod;&#10;  lua_CFunction   setmethod;&#10;} swig_lua_attribute;&#10;&#10;&#10;struct swig_lua_class;&#10;/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */&#10;typedef struct swig_lua_namespace {&#10;  const char            *name;&#10;  swig_lua_method       *ns_methods;&#10;  swig_lua_attribute    *ns_attributes;&#10;  swig_lua_const_info   *ns_constants;&#10;  struct swig_lua_class        **ns_classes;&#10;  struct swig_lua_namespace    **ns_namespaces;&#10;} swig_lua_namespace;&#10;&#10;typedef struct swig_lua_class {&#10;  const char    *name; /* Name that this class has in Lua */&#10;  const char    *fqname; /* Fully qualified name - Scope + class name */&#10;  swig_type_info   **type;&#10;  lua_CFunction  constructor;&#10;  void    (*destructor)(void *);&#10;  swig_lua_method   *methods;&#10;  swig_lua_attribute     *attributes;&#10;  swig_lua_namespace    *cls_static;&#10;  swig_lua_method   *metatable; /* 0 for -eluac */&#10;  struct swig_lua_class **bases;&#10;  const char **base_names;&#10;} swig_lua_class;&#10;&#10;/* this is the struct for wrapping all pointers in SwigLua&#10;*/&#10;typedef struct {&#10;  swig_type_info   *type;&#10;  int     own;  /* 1 if owned &amp; must be destroyed */&#10;  void        *ptr;&#10;} swig_lua_userdata;&#10;&#10;/* this is the struct for wrapping arbitrary packed binary data&#10;(currently it is only used for member function pointers)&#10;the data ordering is similar to swig_lua_userdata, but it is currently not possible&#10;to tell the two structures apart within SWIG, other than by looking at the type&#10;*/&#10;typedef struct {&#10;  swig_type_info   *type;&#10;  int     own;  /* 1 if owned &amp; must be destroyed */&#10;  char data[1];       /* arbitrary amount of data */&#10;} swig_lua_rawdata;&#10;&#10;/* Common SWIG API */&#10;#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)&#10;#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)&#10;#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)&#10;/* for C++ member pointers, ie, member methods */&#10;#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)&#10;#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)&#10;&#10;/* Runtime API */&#10;#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))&#10;#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)&#10;#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*&#10;&#10;/* Contract support */&#10;#define SWIG_contract_assert(expr, msg)  \\&#10;  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)&#10;&#10;&#10;/* helper #defines */&#10;#define SWIG_fail {goto fail;}&#10;#define SWIG_fail_arg(func_name,argnum,type) \\&#10;  {SWIG_Lua_pushferrstring(L,&quot;Error in %s (arg %d), expected '%s' got '%s'&quot;,\\&#10;  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\\&#10;  goto fail;}&#10;#define SWIG_fail_ptr(func_name,argnum,type) \\&#10;  SWIG_fail_arg(func_name,argnum,(type &amp;&amp; type->str)?type->str:&quot;void*&quot;)&#10;#define SWIG_check_num_args(func_name,a,b) \\&#10;  if (lua_gettop(L)&lt;a || lua_gettop(L)>b) \\&#10;  {SWIG_Lua_pushferrstring(L,&quot;Error in %s expected %d..%d args, got %d&quot;,func_name,a,b,lua_gettop(L));\\&#10;  goto fail;}&#10;&#10;&#10;#define SWIG_Lua_get_table(L,n) \\&#10;  (lua_pushstring(L, n), lua_rawget(L,-2))&#10;&#10;#define SWIG_Lua_add_function(L,n,f) \\&#10;  (lua_pushstring(L, n), \\&#10;      lua_pushcfunction(L, f), \\&#10;      lua_rawset(L,-3))&#10;&#10;#define SWIG_Lua_add_boolean(L,n,b) \\&#10;  (lua_pushstring(L, n), \\&#10;      lua_pushboolean(L, b), \\&#10;      lua_rawset(L,-3))&#10;&#10;/* special helper for allowing 'nil' for usertypes */&#10;#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))&#10;&#10;#ifdef __cplusplus&#10;/* Special helper for member function pointers&#10;it gets the address, casts it, then dereferences it */&#10;/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&amp;(a))) */&#10;#endif&#10;&#10;/* storing/access of swig_module_info */&#10;SWIGRUNTIME swig_module_info *&#10;SWIG_Lua_GetModule(lua_State *L) {&#10;  swig_module_info *ret = 0;&#10;  lua_pushstring(L,&quot;swig_runtime_data_type_pointer&quot; SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);&#10;  lua_rawget(L,LUA_REGISTRYINDEX);&#10;  if (lua_islightuserdata(L,-1))&#10;    ret=(swig_module_info*)lua_touserdata(L,-1);&#10;  lua_pop(L,1);  /* tidy */&#10;  return ret;&#10;}&#10;&#10;SWIGRUNTIME void&#10;SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {&#10;  /* add this all into the Lua registry: */&#10;  lua_pushstring(L,&quot;swig_runtime_data_type_pointer&quot; SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);&#10;  lua_pushlightuserdata(L,(void*)module);&#10;  lua_rawset(L,LUA_REGISTRYINDEX);&#10;}&#10;&#10;/* -----------------------------------------------------------------------------&#10; * global variable support code: modules&#10; * ----------------------------------------------------------------------------- */&#10;&#10;/* this function is called when trying to set an immutable.&#10;default action is to print an error.&#10;This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */&#10;SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)&#10;{&#10;/*  there should be 1 param passed in: the new value */&#10;#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE&#10;  lua_pop(L,1);  /* remove it */&#10;  luaL_error(L,&quot;This variable is immutable&quot;);&#10;#endif&#10;    return 0;   /* should not return anything */&#10;}&#10;&#10;#ifdef SWIG_LUA_ELUA_EMULATE&#10;&#10;SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);&#10;SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);&#10;static int swig_lua_elua_emulate_unique_key;&#10;&#10;/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */&#10;SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)&#10;{&#10;  int i, table_parsed, parsed_tables_array, target_table;&#10;  assert(lua_istable(L,-1));&#10;  target_table = lua_gettop(L);&#10;  /* Get the registry where we put all parsed tables to avoid loops */&#10;  lua_rawgetp(L, LUA_REGISTRYINDEX, &amp;swig_lua_elua_emulate_unique_key);&#10;  if(lua_isnil(L,-1)) {&#10;    lua_pop(L,1);&#10;    lua_newtable(L);&#10;    lua_pushvalue(L,-1);&#10;    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&amp;swig_lua_elua_emulate_unique_key));&#10;  }&#10;  parsed_tables_array = lua_gettop(L);&#10;  lua_pushvalue(L,target_table);&#10;  lua_rawsetp(L, parsed_tables_array, table);&#10;  table_parsed = 0;&#10;  const int SWIGUNUSED pairs_start = lua_gettop(L);&#10;  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)&#10;  {&#10;    const swig_elua_entry *entry = table + i;&#10;    int is_metatable = 0;&#10;    switch(entry->key.type) {&#10;      case LUA_TSTRING:&#10;        lua_pushstring(L,entry->key.key.strkey);&#10;        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)&#10;          is_metatable = 1;&#10;        break;&#10;      case  LUA_TNUMBER:&#10;        lua_pushnumber(L,entry->key.key.numkey);&#10;        break;&#10;      case LUA_TNIL:&#10;        lua_pushnil(L);&#10;        break;&#10;      default:&#10;        assert(0);&#10;    }&#10;    switch(entry->value.type) {&#10;      case LUA_TSTRING:&#10;        lua_pushstring(L,entry->value.value.string);&#10;        break;&#10;      case  LUA_TNUMBER:&#10;        lua_pushnumber(L,entry->value.value.number);&#10;        break;&#10;      case LUA_TFUNCTION:&#10;        lua_pushcfunction(L,entry->value.value.function);&#10;        break;&#10;      case LUA_TTABLE:&#10;        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);&#10;        table_parsed = !lua_isnil(L,-1);&#10;        if(!table_parsed) {&#10;          lua_pop(L,1); /*remove nil */&#10;          lua_newtable(L);&#10;          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);&#10;        }&#10;        if(is_metatable) {&#10;          assert(lua_istable(L,-1));&#10;          lua_pushvalue(L,-1);&#10;          lua_setmetatable(L,target_table);&#10;        }&#10;&#10;        break;&#10;      case LUA_TUSERDATA:&#10;        if(entry->value.value.userdata.member)&#10;          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,&#10;              entry->value.value.userdata.lvalue,&#10;              *(entry->value.value.userdata.ptype));&#10;        else&#10;          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,&#10;              *(entry->value.value.userdata.ptype),0);&#10;        break;&#10;      case LUA_TNIL:&#10;        lua_pushnil(L);&#10;        break;&#10;      default:&#10;        assert(0);&#10;    }&#10;    assert(lua_gettop(L) == pairs_start + 2);&#10;    lua_rawset(L,target_table);&#10;  }&#10;  lua_pop(L,1); /* Removing parsed tables storage */&#10;  assert(lua_gettop(L) == target_table);&#10;}&#10;&#10;SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)&#10;{&#10;  lua_pushnil(L);&#10;  lua_rawsetp(L, LUA_REGISTRYINDEX, &amp;swig_lua_elua_emulate_unique_key);&#10;}&#10;&#10;SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);&#10;&#10;SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)&#10;{&#10;  SWIG_check_num_args(&quot;getmetatable(SWIG eLua emulation)&quot;, 1, 1);&#10;  SWIG_Lua_get_class_registry(L);&#10;  lua_getfield(L,-1,&quot;lua_getmetatable&quot;);&#10;  lua_remove(L,-2); /* remove the registry*/&#10;  assert(!lua_isnil(L,-1));&#10;  lua_pushvalue(L,1);&#10;  assert(lua_gettop(L) == 3); /* object | function | object again */&#10;  lua_call(L,1,1);&#10;  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */&#10;    return 1;&#10;  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/&#10;  assert(lua_gettop(L) == 2);&#10;  if(lua_istable(L,-2)) {&#10;    lua_pop(L,1); /*remove the nil*/&#10;    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);&#10;  }&#10;  assert(lua_gettop(L) == 2);&#10;  return 1;&#10;&#10;fail:&#10;  lua_error(L);&#10;  return 0;&#10;}&#10;&#10;SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)&#10;{&#10;  SWIG_Lua_get_class_registry(L);&#10;  lua_pushglobaltable(L);&#10;  lua_pushstring(L,&quot;lua_getmetatable&quot;);&#10;  lua_getfield(L,-2,&quot;getmetatable&quot;);&#10;  assert(!lua_isnil(L,-1));&#10;  lua_rawset(L,-4);&#10;  lua_pushstring(L, &quot;getmetatable&quot;);&#10;  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);&#10;  lua_rawset(L,-3);&#10;  lua_pop(L,2);&#10;&#10;}&#10;/* END OF REMOVE */&#10;&#10;#endif&#10;/* -----------------------------------------------------------------------------&#10; * global variable support code: namespaces and modules (which are the same thing)&#10; * ----------------------------------------------------------------------------- */&#10;&#10;SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)&#10;{&#10;/*  there should be 2 params passed in&#10;  (1) table (not the meta table)&#10;  (2) string name of the attribute&#10;*/&#10;  assert(lua_istable(L,-2));  /* just in case */&#10;  lua_getmetatable(L,-2);&#10;  assert(lua_istable(L,-1));&#10;  SWIG_Lua_get_table(L,&quot;.get&quot;); /* find the .get table */&#10;  assert(lua_istable(L,-1));&#10;  /* look for the key in the .get table */&#10;  lua_pushvalue(L,2);  /* key */&#10;  lua_rawget(L,-2);&#10;  lua_remove(L,-2); /* stack tidy, remove .get table */&#10;  if (lua_iscfunction(L,-1))&#10;  {  /* found it so call the fn &amp; return its value */&#10;    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */&#10;    lua_remove(L,-2); /* stack tidy, remove metatable */&#10;    return 1;&#10;  }&#10;  lua_pop(L,1);  /* remove whatever was there */&#10;  /* ok, so try the .fn table */&#10;  SWIG_Lua_get_table(L,&quot;.fn&quot;); /* find the .get table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  lua_pushvalue(L,2);  /* key */&#10;  lua_rawget(L,-2);  /* look for the fn */&#10;  lua_remove(L,-2); /* stack tidy, remove .fn table */&#10;  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */&#10;  {  /* found it so return the fn &amp; let lua call it */&#10;    lua_remove(L,-2); /* stack tidy, remove metatable */&#10;    return 1;&#10;  }&#10;  lua_pop(L,1);  /* remove whatever was there */&#10;  return 0;&#10;}&#10;&#10;SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)&#10;{&#10;/*  there should be 3 params passed in&#10;  (1) table (not the meta table)&#10;  (2) string name of the attribute&#10;  (3) any for the new value&#10;*/&#10;&#10;  assert(lua_istable(L,1));&#10;  lua_getmetatable(L,1);    /* get the meta table */&#10;  assert(lua_istable(L,-1));&#10;&#10;  SWIG_Lua_get_table(L,&quot;.set&quot;); /* find the .set table */&#10;  if (lua_istable(L,-1))&#10;  {&#10;    /* look for the key in the .set table */&#10;    lua_pushvalue(L,2);  /* key */&#10;    lua_rawget(L,-2);&#10;    if (lua_iscfunction(L,-1))&#10;    {  /* found it so call the fn &amp; return its value */&#10;      lua_pushvalue(L,3);  /* value */&#10;      lua_call(L,1,0);&#10;      return 0;&#10;    }&#10;    lua_pop(L,1);  /* remove the value */&#10;  }&#10;  lua_pop(L,1);  /* remove the value .set table */&#10;  lua_pop(L,1); /* remote metatable */&#10;  lua_rawset(L,-3);&#10;  return 0;&#10;}&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */&#10;SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */&#10;SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */&#10;SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);&#10;&#10;/* helper function - register namespace methods and attributes into namespace */&#10;SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)&#10;{&#10;  int i;&#10;  /* There must be namespace table (not metatable) at the top of the stack */&#10;  assert(lua_istable(L,-1));&#10;  SWIG_Lua_InstallConstants(L, ns->ns_constants);&#10;&#10;  /* add methods to the namespace/module table */&#10;  for(i=0;ns->ns_methods[i].name;i++){&#10;    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);&#10;  }&#10;  lua_getmetatable(L,-1);&#10;&#10;  /* add fns */&#10;  for(i=0;ns->ns_attributes[i].name;i++){&#10;    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);&#10;  }&#10;&#10;  /* clear stack - remove metatble */&#10;  lua_pop(L,1);&#10;  return 0;&#10;}&#10;&#10;/* Register all classes in the namespace */&#10;SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)&#10;{&#10;  swig_lua_class **classes;&#10;&#10;  /* There must be a module/namespace table at the top of the stack */&#10;  assert(lua_istable(L,-1));&#10;&#10;  classes = ns->ns_classes;&#10;&#10;  if( classes != 0 ) {&#10;    while(*classes != 0) {&#10;      SWIG_Lua_class_register(L, *classes);&#10;      classes++;&#10;    }&#10;  }&#10;}&#10;&#10;/* Helper function. Creates namespace table and adds it to module table&#10;   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack&#10;   when function is called).&#10;   Function always returns newly registered table on top of the stack.&#10;*/&#10;SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)&#10;{&#10;  swig_lua_namespace **sub_namespace;&#10;  /* 1 argument - table on the top of the stack */&#10;  const int SWIGUNUSED begin = lua_gettop(L);&#10;  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */&#10;  lua_checkstack(L,5);&#10;  lua_newtable(L); /* namespace itself */&#10;  lua_newtable(L); /* metatable for namespace */&#10;&#10;  /* add a table called &quot;.get&quot; */&#10;  lua_pushstring(L,&quot;.get&quot;);&#10;  lua_newtable(L);&#10;  lua_rawset(L,-3);&#10;  /* add a table called &quot;.set&quot; */&#10;  lua_pushstring(L,&quot;.set&quot;);&#10;  lua_newtable(L);&#10;  lua_rawset(L,-3);&#10;  /* add a table called &quot;.fn&quot; */&#10;  lua_pushstring(L,&quot;.fn&quot;);&#10;  lua_newtable(L);&#10;  lua_rawset(L,-3);&#10;&#10;  /* add accessor fns for using the .get,.set&amp;.fn */&#10;  SWIG_Lua_add_function(L,&quot;__index&quot;,SWIG_Lua_namespace_get);&#10;  SWIG_Lua_add_function(L,&quot;__newindex&quot;,SWIG_Lua_namespace_set);&#10;&#10;  lua_setmetatable(L,-2); /* set metatable */&#10;&#10;  /* Register all functions, variables etc */&#10;  SWIG_Lua_add_namespace_details(L,ns);&#10;  /* Register classes */&#10;  SWIG_Lua_add_namespace_classes(L,ns);&#10;&#10;  sub_namespace = ns->ns_namespaces;&#10;  if( sub_namespace != 0) {&#10;    while(*sub_namespace != 0) {&#10;      SWIG_Lua_namespace_register(L, *sub_namespace, 1);&#10;      lua_pop(L,1); /* removing sub-namespace table */&#10;      sub_namespace++;&#10;    }&#10;  }&#10;&#10;  if (reg) {&#10;    lua_pushstring(L,ns->name);&#10;    lua_pushvalue(L,-2);&#10;    lua_rawset(L,-4); /* add namespace to module table */&#10;  }&#10;  assert(lua_gettop(L) == begin+1);&#10;}&#10;#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */&#10;&#10;/* -----------------------------------------------------------------------------&#10; * global variable support code: classes&#10; * ----------------------------------------------------------------------------- */&#10;&#10;SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);&#10;&#10;typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);&#10;&#10;SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,&#10;  int first_arg, swig_lua_base_iterator_func func, int  *const ret)&#10;{&#10;    /* first_arg - position of the object in stack. Everything that is above are arguments&#10;     * and is passed to every evocation of the func */&#10;    int last_arg = lua_gettop(L);/* position of last argument */&#10;    int original_metatable = last_arg + 1;&#10;    size_t bases_count;&#10;    int result = SWIG_ERROR;&#10;    int bases_table;&#10;    (void)swig_type;&#10;    lua_getmetatable(L,first_arg);&#10;&#10;    /* initialise base search */&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)&#10;    SWIG_Lua_get_table(L,&quot;.bases&quot;);&#10;    assert(lua_istable(L,-1));&#10;    bases_count = lua_rawlen(L,-1);&#10;    bases_table = lua_gettop(L);&#10;#else&#10;    /* In elua .bases table doesn't exist. Use table from swig_lua_class */&#10;    (void)bases_table;&#10;    assert(swig_type!=0);&#10;    swig_module_info *module=SWIG_GetModule(L);&#10;    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;&#10;    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;&#10;    bases_count = 0;&#10;    for(;base_names[bases_count];&#10;      bases_count++);/* get length of bases */&#10;#endif&#10;&#10;    if(ret)&#10;      *ret = 0;&#10;    if(bases_count>0)&#10;    {&#10;      int to_remove;&#10;      size_t i;&#10;      int j;&#10;      int subcall_last_arg;&#10;      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */&#10;      int valid = 1;&#10;      swig_type_info *base_swig_type = 0;&#10;      for(j=first_arg;j&lt;=last_arg;j++)&#10;        lua_pushvalue(L,j);&#10;      subcall_last_arg = lua_gettop(L);&#10;&#10;      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */&#10;      for(i=0;i&lt;bases_count;i++) {&#10;        /* Iteration through class bases */&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)&#10;        lua_rawgeti(L,bases_table,i+1);&#10;        base_swig_type = 0;&#10;        if(lua_isnil(L,-1)) {&#10;          valid = 0;&#10;          lua_pop(L,1);&#10;        } else {&#10;          valid = 1;&#10;        }&#10;#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */&#10;        swig_lua_class *base_class = bases[i];&#10;        if(!base_class) {&#10;          valid = 0;&#10;        } else {&#10;          valid = 1;&#10;          SWIG_Lua_get_class_metatable(L,base_class->fqname);&#10;          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);&#10;          assert(base_swig_type != 0);&#10;        }&#10;#endif&#10;&#10;        if(!valid)&#10;          continue;&#10;        assert(lua_isuserdata(L, subcall_first_arg));&#10;        assert(lua_istable(L,-1));&#10;        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */&#10;        assert(lua_gettop(L) == subcall_last_arg);&#10;        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */&#10;        if(result != SWIG_ERROR) {&#10;          break;&#10;        }&#10;      }&#10;      /* Restore original metatable */&#10;      lua_pushvalue(L,original_metatable);&#10;      lua_setmetatable(L,first_arg);&#10;      /* Clear - remove everything between last_arg and subcall_last_arg including */&#10;      to_remove = subcall_last_arg - last_arg;&#10;      for(j=0;j&lt;to_remove;j++)&#10;        lua_remove(L,last_arg+1);&#10;    } else {&#10;      /* Remove everything after last_arg */&#10;      lua_pop(L, lua_gettop(L) - last_arg);&#10;    }&#10;    if(ret) assert(lua_gettop(L) == last_arg + *ret);&#10;    return result;&#10;}&#10;&#10;/* The class.get method helper, performs the lookup of class attributes.&#10; * It returns an error code. Number of function return values is passed inside 'ret'.&#10; * first_arg is not used in this function because function always has 2 arguments.&#10; */&#10;SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)&#10;{&#10;/*  there should be 2 params passed in&#10;  (1) userdata (not the meta table)&#10;  (2) string name of the attribute&#10;*/&#10;  int bases_search_result;&#10;  int substack_start = lua_gettop(L)-2;&#10;  assert(first_arg == substack_start+1);&#10;  lua_checkstack(L,5);&#10;  assert(lua_isuserdata(L,-2));  /* just in case */&#10;  lua_getmetatable(L,-2);    /* get the meta table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  /* NEW: looks for the __getitem() fn&#10;  this is a user provided get fn */&#10;  SWIG_Lua_get_table(L,&quot;__getitem&quot;); /* find the __getitem fn */&#10;  if (lua_iscfunction(L,-1))  /* if it's there */&#10;  {  /* found it so call the fn &amp; return its value */&#10;    lua_pushvalue(L,substack_start+1);  /* the userdata */&#10;    lua_pushvalue(L,substack_start+2);  /* the parameter */&#10;    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */&#10;    lua_remove(L,-2); /* stack tidy, remove metatable */&#10;    if(ret) *ret = 1;&#10;    return SWIG_OK;&#10;  }&#10;  lua_pop(L,1);&#10;  /* Remove the metatable */&#10;  lua_pop(L,1);&#10;  /* Search in base classes */&#10;  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);&#10;  return bases_search_result;  /* sorry not known */&#10;}&#10;&#10;&#10;/* The class.get method helper, performs the lookup of class attributes.&#10; * It returns an error code. Number of function return values is passed inside 'ret'.&#10; * first_arg is not used in this function because function always has 2 arguments.&#10; */&#10;SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)&#10;{&#10;/*  there should be 2 params passed in&#10;  (1) userdata (not the meta table)&#10;  (2) string name of the attribute&#10;*/&#10;  int bases_search_result;&#10;  int substack_start = lua_gettop(L)-2;&#10;  assert(first_arg == substack_start+1);&#10;  lua_checkstack(L,5);&#10;  assert(lua_isuserdata(L,-2));  /* just in case */&#10;  lua_getmetatable(L,-2);    /* get the meta table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  SWIG_Lua_get_table(L,&quot;.get&quot;); /* find the .get table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  /* look for the key in the .get table */&#10;  lua_pushvalue(L,substack_start+2);  /* key */&#10;  lua_rawget(L,-2);&#10;  lua_remove(L,-2); /* stack tidy, remove .get table */&#10;  if (lua_iscfunction(L,-1))&#10;  {  /* found it so call the fn &amp; return its value */&#10;    lua_pushvalue(L,substack_start+1);  /* the userdata */&#10;    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */&#10;    lua_remove(L,-2); /* stack tidy, remove metatable */&#10;    if(ret)&#10;      *ret = 1;&#10;    return SWIG_OK;&#10;  }&#10;  lua_pop(L,1);  /* remove whatever was there */&#10;  /* ok, so try the .fn table */&#10;  SWIG_Lua_get_table(L,&quot;.fn&quot;); /* find the .fn table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  lua_pushvalue(L,substack_start+2);  /* key */&#10;  lua_rawget(L,-2);  /* look for the fn */&#10;  lua_remove(L,-2); /* stack tidy, remove .fn table */&#10;  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */&#10;  {  /* found it so return the fn &amp; let lua call it */&#10;    lua_remove(L,-2); /* stack tidy, remove metatable */&#10;    if(ret)&#10;      *ret = 1;&#10;    return SWIG_OK;&#10;  }&#10;  lua_pop(L,1);  /* remove whatever was there */&#10;  /* Remove the metatable */&#10;  lua_pop(L,1);&#10;  /* Search in base classes */&#10;  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);&#10;  return bases_search_result;  /* sorry not known */&#10;}&#10;&#10;/* the class.get method, performs the lookup of class attributes&#10; */&#10;SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)&#10;{&#10;/*  there should be 2 params passed in&#10;  (1) userdata (not the meta table)&#10;  (2) string name of the attribute&#10;*/&#10;  int result;&#10;  swig_lua_userdata *usr;&#10;  swig_type_info *type;&#10;  int ret = 0;&#10;  assert(lua_isuserdata(L,1));&#10;  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */&#10;  type = usr->type;&#10;  result = SWIG_Lua_class_do_get(L,type,1,&amp;ret);&#10;  if(result == SWIG_OK)&#10;    return ret;&#10;&#10;  result = SWIG_Lua_class_do_get_item(L,type,1,&amp;ret);&#10;  if(result == SWIG_OK)&#10;    return ret;&#10;&#10;  return 0;&#10;}&#10;&#10;/* helper for the class.set method, performs the lookup of class attributes&#10; * It returns error code. Number of function return values is passed inside 'ret'&#10; */&#10;SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)&#10;{&#10;/*  there should be 3 params passed in&#10;  (1) table (not the meta table)&#10;  (2) string name of the attribute&#10;  (3) any for the new value&#10;  */&#10;&#10;  int bases_search_result;&#10;  int substack_start = lua_gettop(L) - 3;&#10;  lua_checkstack(L,5);&#10;  assert(lua_isuserdata(L,substack_start+1));  /* just in case */&#10;  lua_getmetatable(L,substack_start+1);    /* get the meta table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  if(ret)&#10;    *ret = 0; /* it is setter - number of return values is always 0 */&#10;&#10;  SWIG_Lua_get_table(L,&quot;.set&quot;); /* find the .set table */&#10;  if (lua_istable(L,-1))&#10;  {&#10;    /* look for the key in the .set table */&#10;    lua_pushvalue(L,substack_start+2);  /* key */&#10;    lua_rawget(L,-2);&#10;    lua_remove(L,-2); /* tidy stack, remove .set table */&#10;    if (lua_iscfunction(L,-1))&#10;    {  /* found it so call the fn &amp; return its value */&#10;      lua_pushvalue(L,substack_start+1);  /* userdata */&#10;      lua_pushvalue(L,substack_start+3);  /* value */&#10;      lua_call(L,2,0);&#10;      lua_remove(L,substack_start+4); /*remove metatable*/&#10;      return SWIG_OK;&#10;    }&#10;    lua_pop(L,1);  /* remove the value */&#10;  } else {&#10;    lua_pop(L,1);  /* remove the answer for .set table request*/&#10;  }&#10;  /* NEW: looks for the __setitem() fn&#10;  this is a user provided set fn */&#10;  SWIG_Lua_get_table(L,&quot;__setitem&quot;); /* find the fn */&#10;  if (lua_iscfunction(L,-1))  /* if it's there */&#10;  {  /* found it so call the fn &amp; return its value */&#10;    lua_pushvalue(L,substack_start+1);  /* the userdata */&#10;    lua_pushvalue(L,substack_start+2);  /* the parameter */&#10;    lua_pushvalue(L,substack_start+3);  /* the value */&#10;    lua_call(L,3,0);  /* 3 values in ,0 out */&#10;    lua_remove(L,-2); /* stack tidy, remove metatable */&#10;    return SWIG_OK;&#10;  }&#10;  lua_pop(L,1); /* remove value */&#10;&#10;  lua_pop(L,1); /* remove metatable */&#10;  /* Search among bases */&#10;  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);&#10;  if(ret)&#10;    assert(*ret == 0);&#10;  assert(lua_gettop(L) == substack_start + 3);&#10;  return bases_search_result;&#10;}&#10;&#10;/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly&#10; * handles return values.&#10; */&#10;SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)&#10;{&#10;/*  There should be 3 params passed in&#10;  (1) table (not the meta table)&#10;  (2) string name of the attribute&#10;  (3) any for the new value&#10;  */&#10;  int ret = 0;&#10;  int result;&#10;  swig_lua_userdata *usr;&#10;  swig_type_info *type;&#10;  assert(lua_isuserdata(L,1));&#10;  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */&#10;  type = usr->type;&#10;  result = SWIG_Lua_class_do_set(L,type,1,&amp;ret);&#10;  if(result != SWIG_OK) {&#10;   SWIG_Lua_pushferrstring(L,&quot;Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.&quot;);&#10;   lua_error(L);&#10;  } else {&#10;    assert(ret==0);&#10;  }&#10;  return 0;&#10;}&#10;&#10;/* the class.destruct method called by the interpreter */&#10;SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)&#10;{&#10;/*  there should be 1 params passed in&#10;  (1) userdata (not the meta table) */&#10;  swig_lua_userdata *usr;&#10;  swig_lua_class *clss;&#10;  assert(lua_isuserdata(L,-1));  /* just in case */&#10;  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */&#10;  /* if must be destroyed &amp; has a destructor */&#10;  if (usr->own) /* if must be destroyed */&#10;  {&#10;    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */&#10;    if (clss &amp;&amp; clss->destructor)  /* there is a destroy fn */&#10;    {&#10;      clss->destructor(usr->ptr);  /* bye bye */&#10;    }&#10;  }&#10;  return 0;&#10;}&#10;&#10;/* the class.__tostring method called by the interpreter and print */&#10;SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)&#10;{&#10;/*  there should be 1 param passed in&#10;  (1) userdata (not the metatable) */&#10;  swig_lua_userdata* userData;&#10;  assert(lua_isuserdata(L,1));  /* just in case */&#10;  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */&#10;&#10;  lua_pushfstring(L, &quot;&lt;userdata of type '%s' at %p>&quot;, userData->type->str, userData->ptr);&#10;  return 1;&#10;}&#10;&#10;/* to manually disown some userdata */&#10;SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)&#10;{&#10;/*  there should be 1 params passed in&#10;  (1) userdata (not the meta table) */&#10;  swig_lua_userdata *usr;&#10;  assert(lua_isuserdata(L,-1));  /* just in case */&#10;  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */&#10;&#10;  usr->own = 0; /* clear our ownership */&#10;  return 0;&#10;}&#10;&#10;/* lua callable function to compare userdata's value&#10;the issue is that two userdata may point to the same thing&#10;but to lua, they are different objects */&#10;SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)&#10;{&#10;  int result;&#10;  swig_lua_userdata *usr1,*usr2;&#10;  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */&#10;    return 0;  /* nil reply */&#10;  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */&#10;  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */&#10;  /*result=(usr1->ptr==usr2->ptr &amp;&amp; usr1->type==usr2->type); only works if type is the same*/&#10;  result=(usr1->ptr==usr2->ptr);&#10;   lua_pushboolean(L,result);&#10;  return 1;&#10;}&#10;&#10;/* populate table at the top of the stack with metamethods that ought to be inherited */&#10;SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)&#10;{&#10;  SWIG_Lua_add_boolean(L, &quot;__add&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__sub&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__mul&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__div&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__mod&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__pow&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__unm&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__len&quot;, 1 );&#10;  SWIG_Lua_add_boolean(L, &quot;__concat&quot;, 1 );&#10;  SWIG_Lua_add_boolean(L, &quot;__eq&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__lt&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__le&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__call&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__tostring&quot;, 1);&#10;  SWIG_Lua_add_boolean(L, &quot;__gc&quot;, 0);&#10;}&#10;&#10;/* creates the swig registry */&#10;SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)&#10;{&#10;  /* create main SWIG registry table */&#10;  lua_pushstring(L,&quot;SWIG&quot;);&#10;  lua_newtable(L);&#10;  /* populate it with some predefined data */&#10;&#10;  /* .library table. Placeholder */&#10;  lua_pushstring(L,&quot;.library&quot;);&#10;  lua_newtable(L);&#10;  {&#10;    /* list of metamethods that class inherits from its bases */&#10;    lua_pushstring(L,&quot;inheritable_metamethods&quot;);&#10;    lua_newtable(L);&#10;    /* populate with list of metamethods */&#10;    SWIG_Lua_populate_inheritable_metamethods(L);&#10;    lua_rawset(L,-3);&#10;  }&#10;  lua_rawset(L,-3);&#10;&#10;  lua_rawset(L,LUA_REGISTRYINDEX);&#10;}&#10;&#10;/* gets the swig registry (or creates it) */&#10;SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)&#10;{&#10;  /* add this all into the swig registry: */&#10;  lua_pushstring(L,&quot;SWIG&quot;);&#10;  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */&#10;  if (!lua_istable(L,-1))  /* not there */&#10;  {  /* must be first time, so add it */&#10;    lua_pop(L,1);  /* remove the result */&#10;    SWIG_Lua_create_class_registry(L);&#10;    /* then get it */&#10;    lua_pushstring(L,&quot;SWIG&quot;);&#10;    lua_rawget(L,LUA_REGISTRYINDEX);&#10;  }&#10;}&#10;&#10;SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)&#10;{&#10;  SWIG_Lua_get_class_registry(L);&#10;  lua_pushstring(L, &quot;.library&quot;);&#10;  lua_rawget(L,-2);&#10;  assert( !lua_isnil(L,-1) );&#10;  lua_pushstring(L, &quot;inheritable_metamethods&quot;);&#10;  lua_rawget(L,-2);&#10;&#10;  /* Remove class registry and library table */&#10;  lua_remove(L,-2);&#10;  lua_remove(L,-2);&#10;}&#10;&#10;/* Helper function to get the classes metatable from the register */&#10;SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)&#10;{&#10;  SWIG_Lua_get_class_registry(L);  /* get the registry */&#10;  lua_pushstring(L,cname);  /* get the name */&#10;  lua_rawget(L,-2);    /* get it */&#10;  lua_remove(L,-2);    /* tidy up (remove registry) */&#10;}&#10;&#10;/* Set up the base classes pointers.&#10;Each class structure has a list of pointers to the base class structures.&#10;This function fills them.&#10;It cannot be done at compile time, as this will not work with hireachies&#10;spread over more than one swig file.&#10;Therefore it must be done at runtime, querying the SWIG type system.&#10;*/&#10;SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)&#10;{&#10;  int i=0;&#10;  swig_module_info *module=SWIG_GetModule(L);&#10;  for(i=0;clss->base_names[i];i++)&#10;  {&#10;    if (clss->bases[i]==0) /* not found yet */&#10;    {&#10;      /* lookup and cache the base class */&#10;      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);&#10;      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;&#10;    }&#10;  }&#10;}&#10;&#10;#if defined(SWIG_LUA_SQUASH_BASES) &amp;&amp; (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)&#10;/* Merges two tables  */&#10;SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)&#10;{&#10;  /* iterating */&#10;  lua_pushnil(L);&#10;  while (lua_next(L,source) != 0) {&#10;    /* -1 - value, -2 - index */&#10;    /* have to copy to assign */&#10;    lua_pushvalue(L,-2); /* copy of index */&#10;    lua_pushvalue(L,-2); /* copy of value */&#10;    lua_rawset(L, target);&#10;    lua_pop(L,1);&#10;    /* only key is left */&#10;  }&#10;}&#10;&#10;/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */&#10;SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)&#10;{&#10;  /* push original[name], then base[name] */&#10;  lua_pushstring(L,name);&#10;  lua_rawget(L,original);&#10;  int original_table = lua_gettop(L);&#10;  lua_pushstring(L,name);&#10;  lua_rawget(L,base);&#10;  int base_table = lua_gettop(L);&#10;  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);&#10;  /* clearing stack */&#10;  lua_pop(L,2);&#10;}&#10;&#10;/* Function takes all symbols from base and adds it to derived class. It's just a helper. */&#10;SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)&#10;{&#10;  /* There is one parameter - original, i.e. 'derived' class metatable */&#10;  assert(lua_istable(L,-1));&#10;  int original = lua_gettop(L);&#10;  SWIG_Lua_get_class_metatable(L,base_cls->fqname);&#10;  int base = lua_gettop(L);&#10;  SWIG_Lua_merge_tables(L, &quot;.fn&quot;, original, base );&#10;  SWIG_Lua_merge_tables(L, &quot;.set&quot;, original, base );&#10;  SWIG_Lua_merge_tables(L, &quot;.get&quot;, original, base );&#10;  lua_pop(L,1);&#10;}&#10;&#10;/* Function squashes all symbols from 'clss' bases into itself */&#10;SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)&#10;{&#10;  int i;&#10;  SWIG_Lua_get_class_metatable(L,clss->fqname);&#10;  for(i=0;clss->base_names[i];i++)&#10;  {&#10;    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */&#10;      continue;&#10;    /* Thing is: all bases are already registered. Thus they have already executed&#10;     * this function. So we just need to squash them into us, because their bases&#10;     * are already squashed into them. No need for recursion here!&#10;     */&#10;    SWIG_Lua_class_squash_base(L, clss->bases[i]);&#10;  }&#10;  lua_pop(L,1); /*tidy stack*/&#10;}&#10;#endif&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */&#10;/* helper add a variable to a registered class */&#10;SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)&#10;{&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  SWIG_Lua_get_table(L,&quot;.get&quot;); /* find the .get table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  SWIG_Lua_add_function(L,name,getFn);&#10;  lua_pop(L,1);       /* tidy stack (remove table) */&#10;  if (setFn)&#10;  {&#10;    SWIG_Lua_get_table(L,&quot;.set&quot;); /* find the .set table */&#10;    assert(lua_istable(L,-1));  /* just in case */&#10;    SWIG_Lua_add_function(L,name,setFn);&#10;    lua_pop(L,1);       /* tidy stack (remove table) */&#10;  }&#10;}&#10;&#10;/* helper to recursively add class static details (static attributes, operations and constants) */&#10;SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)&#10;{&#10;  int i = 0;&#10;  /* The class namespace table must be on the top of the stack */&#10;  assert(lua_istable(L,-1));&#10;  /* call all the base classes first: we can then override these later: */&#10;  for(i=0;clss->bases[i];i++)&#10;  {&#10;    SWIG_Lua_add_class_static_details(L,clss->bases[i]);&#10;  }&#10;&#10;  SWIG_Lua_add_namespace_details(L, clss->cls_static);&#10;}&#10;&#10;SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */&#10;&#10;/* helper to recursively add class details (attributes &amp; operations) */&#10;SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)&#10;{&#10;  int i;&#10;  size_t bases_count = 0;&#10;  /* Add bases to .bases table */&#10;  SWIG_Lua_get_table(L,&quot;.bases&quot;);&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  for(i=0;clss->bases[i];i++)&#10;  {&#10;    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);&#10;    /* Base class must be already registered */&#10;    assert(lua_istable(L,-1));&#10;    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */&#10;    bases_count++;&#10;  }&#10;  assert(lua_rawlen(L,-1) == bases_count);&#10;  lua_pop(L,1); /* remove .bases table */&#10;  /* add attributes */&#10;  for(i=0;clss->attributes[i].name;i++){&#10;    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);&#10;  }&#10;  /* add methods to the metatable */&#10;  SWIG_Lua_get_table(L,&quot;.fn&quot;); /* find the .fn table */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  for(i=0;clss->methods[i].name;i++){&#10;    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);&#10;  }&#10;  lua_pop(L,1);       /* tidy stack (remove table) */&#10;  /* add operator overloads&#10;    This adds methods from metatable array to metatable. Can mess up garbage&#10;    collectind if someone defines __gc method&#10;    */&#10;  if(clss->metatable) {&#10;    for(i=0;clss->metatable[i].name;i++) {&#10;      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);&#10;    }&#10;  }&#10;&#10;#if !defined(SWIG_LUA_SQUASH_BASES)&#10;  /* Adding metamethods that are defined in base classes. If bases were squashed&#10;   * then it is obviously unnecessary&#10;   */&#10;  SWIG_Lua_add_class_user_metamethods(L, clss);&#10;#endif&#10;}&#10;&#10;/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed&#10;   for the following issue: Lua runtime checks for metamethod existence with rawget function&#10;   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method&#10;   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly&#10;   in metatable and not in object).&#10;   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants&#10;   are automatically given a special proxy __x that calls the real __x method.&#10;   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,&#10;   those changes must be reflected in all descendants.&#10;*/&#10;&#10;SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/&#10;&#10;/* The real function that resolves a metamethod.&#10; * Function searches given class and all its bases (recursively) for first instance of something that is&#10; * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation&#10; * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the&#10; * answer.&#10; * Returns 1 if found, 0 otherwise.&#10; * clss is class which metatable we will search for method&#10; * metamethod_name_idx is index in L where metamethod name (as string) lies&#10; * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check&#10; * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from&#10; * SWIG_Lua_resolve_metamethod&#10; * */&#10;SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,&#10;    int skip_check)&#10;{&#10;  /* This function is called recursively */&#10;  int result = 0;&#10;  int i = 0;&#10;&#10;  if (!skip_check) {&#10;    SWIG_Lua_get_class_metatable(L, clss->fqname);&#10;    lua_pushvalue(L, metamethod_name_idx);&#10;    lua_rawget(L,-2);&#10;    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then&#10;     * this isn't the function we are looking for :)&#10;     * lua_tocfunction will return NULL if not cfunction&#10;     */&#10;    if (!lua_isnil(L,-1) &amp;&amp; lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {&#10;      lua_remove(L,-2); /* removing class metatable */&#10;      return 1;&#10;    }&#10;    lua_pop(L,2); /* remove class metatable and query result */&#10;  }&#10;&#10;  /* Forwarding calls to bases */&#10;  for(i=0;clss->bases[i];i++)&#10;  {&#10;    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);&#10;    if (result)&#10;      break;&#10;  }&#10;&#10;  return result;&#10;}&#10;&#10;/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method&#10; * and calls it */&#10;SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)&#10;{&#10;  int numargs;&#10;  int metamethod_name_idx;&#10;  const swig_lua_class* clss;&#10;  int result;&#10;&#10;  lua_checkstack(L,5);&#10;  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */&#10;&#10;  /* Get upvalues from closure */&#10;  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/&#10;  metamethod_name_idx = lua_gettop(L);&#10;&#10;  lua_pushvalue(L, lua_upvalueindex(2));&#10;  clss = (const swig_lua_class*)(lua_touserdata(L,-1));&#10;  lua_pop(L,1); /* remove lightuserdata with clss from stack */&#10;&#10;  /* Actual work */&#10;  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);&#10;  if (!result) {&#10;   SWIG_Lua_pushferrstring(L,&quot;The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.&quot;);&#10;   lua_error(L);&#10;   return 0;&#10;  }&#10;&#10;  lua_remove(L,-2); /* remove metamethod key */&#10;  lua_insert(L,1); /* move function to correct position */&#10;  lua_call(L, numargs, LUA_MULTRET);&#10;  return lua_gettop(L); /* return all results */&#10;}&#10;&#10;&#10;/* If given metamethod must be present in given class, then creates appropriate proxy&#10; * Returns 1 if successfully added, 0 if not added because no base class has it, -1&#10; * if method is defined in the class metatable itself&#10; */&#10;SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)&#10;{&#10;  int key_index;&#10;  int success = 0;&#10;  int i = 0;&#10;&#10;  /* metamethod name - on the top of the stack */&#10;  assert(lua_isstring(L,-1));&#10;&#10;  key_index = lua_gettop(L);&#10;&#10;  /* Check whether method is already defined in metatable */&#10;  lua_pushvalue(L,key_index); /* copy of the key */&#10;  lua_gettable(L,metatable_index);&#10;  if( !lua_isnil(L,-1) ) {&#10;    lua_pop(L,1);&#10;    return -1;&#10;  }&#10;  lua_pop(L,1);&#10;&#10;  /* Iterating over immediate bases */&#10;  for(i=0;clss->bases[i];i++)&#10;  {&#10;    const swig_lua_class *base = clss->bases[i];&#10;    SWIG_Lua_get_class_metatable(L, base->fqname);&#10;    lua_pushvalue(L, key_index);&#10;    lua_rawget(L, -2);&#10;    if( !lua_isnil(L,-1) ) {&#10;      lua_pushvalue(L, key_index);&#10;&#10;      /* Add proxy function */&#10;      lua_pushvalue(L, key_index); /* first closure value is function name */&#10;      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */&#10;      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);&#10;&#10;      lua_rawset(L, metatable_index);&#10;      success = 1;&#10;    }&#10;    lua_pop(L,1); /* remove function or nil */&#10;    lua_pop(L,1); /* remove base class metatable */&#10;&#10;    if( success )&#10;      break;&#10;  }&#10;&#10;  return success;&#10;}&#10;&#10;SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)&#10;{&#10;  int metatable_index;&#10;  int metamethods_info_index;&#10;  int tostring_undefined;&#10;  int eq_undefined = 0;&#10;&#10;  SWIG_Lua_get_class_metatable(L, clss->fqname);&#10;  metatable_index = lua_gettop(L);&#10;  SWIG_Lua_get_inheritable_metamethods(L);&#10;  assert(lua_istable(L,-1));&#10;  metamethods_info_index = lua_gettop(L);&#10;  lua_pushnil(L); /* first key */&#10;  while(lua_next(L, metamethods_info_index) != 0 ) {&#10;    /* key at index -2, value at index -1 */&#10;    const int is_inheritable = lua_toboolean(L,-2);&#10;    lua_pop(L,1); /* remove value - we don't need it anymore */&#10;&#10;    if(is_inheritable) { /* if metamethod is inheritable */&#10;      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);&#10;    }&#10;  }&#10;&#10;  lua_pop(L,1); /* remove inheritable metamethods table */&#10;&#10;  /* Special handling for __tostring method */&#10;  lua_pushstring(L, &quot;__tostring&quot;);&#10;  lua_pushvalue(L,-1);&#10;  lua_rawget(L,metatable_index);&#10;  tostring_undefined = lua_isnil(L,-1);&#10;  lua_pop(L,1);&#10;  if( tostring_undefined ) {&#10;    lua_pushcfunction(L, SWIG_Lua_class_tostring);&#10;    lua_rawset(L, metatable_index);&#10;  } else {&#10;    lua_pop(L,1); /* remove copy of the key */&#10;  }&#10;&#10;  /* Special handling for __eq method */&#10;  lua_pushstring(L, &quot;__eq&quot;);&#10;  lua_pushvalue(L,-1);&#10;  lua_rawget(L,metatable_index);&#10;  eq_undefined = lua_isnil(L,-1);&#10;  lua_pop(L,1);&#10;  if( eq_undefined ) {&#10;    lua_pushcfunction(L, SWIG_Lua_class_equal);&#10;    lua_rawset(L, metatable_index);&#10;  } else {&#10;    lua_pop(L,1); /* remove copy of the key */&#10;  }&#10;  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]&#10;   * a __getitem/__setitem method should be defined&#10;   */&#10;  lua_pop(L,1); /* pop class metatable */&#10;}&#10;&#10;/* Register class static methods,attributes etc as well as constructor proxy */&#10;SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)&#10;{&#10;  const int SWIGUNUSED begin = lua_gettop(L);&#10;  lua_checkstack(L,5); /* just in case */&#10;  assert(lua_istable(L,-1));  /* just in case */&#10;  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */&#10;&#10;  SWIG_Lua_namespace_register(L,clss->cls_static, 1);&#10;&#10;  assert(lua_istable(L,-1)); /* just in case */&#10;&#10;  /*  add its constructor to module with the name of the class&#10;  so you can do MyClass(...) as well as new_MyClass(...)&#10;  BUT only if a constructor is defined&#10;  (this overcomes the problem of pure virtual classes without constructors)*/&#10;  if (clss->constructor)&#10;  {&#10;    lua_getmetatable(L,-1);&#10;    assert(lua_istable(L,-1)); /* just in case */&#10;    SWIG_Lua_add_function(L,&quot;__call&quot;, clss->constructor);&#10;    lua_pop(L,1);&#10;  }&#10;&#10;  assert(lua_istable(L,-1)); /* just in case */&#10;  SWIG_Lua_add_class_static_details(L, clss);&#10;&#10;  /* clear stack */&#10;  lua_pop(L,1);&#10;  assert( lua_gettop(L) == begin );&#10;}&#10;&#10;/* Performs the instance (non-static) class registration process. Metatable for class is created&#10; * and added to the class registry.&#10; */&#10;SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)&#10;{&#10;  const int SWIGUNUSED begin = lua_gettop(L);&#10;  int i;&#10;  /* if name already there (class is already registered) then do nothing */&#10;  SWIG_Lua_get_class_registry(L);  /* get the registry */&#10;  lua_pushstring(L,clss->fqname);  /* get the name */&#10;  lua_rawget(L,-2);&#10;  if(!lua_isnil(L,-1)) {&#10;    lua_pop(L,2);&#10;    assert(lua_gettop(L)==begin);&#10;    return;&#10;  }&#10;  lua_pop(L,2); /* tidy stack */&#10;  /* Recursively initialize all bases */&#10;  for(i=0;clss->bases[i];i++)&#10;  {&#10;    SWIG_Lua_class_register_instance(L,clss->bases[i]);&#10;  }&#10;  /* Again, get registry and push name */&#10;  SWIG_Lua_get_class_registry(L);  /* get the registry */&#10;  lua_pushstring(L,clss->fqname);  /* get the name */&#10;  lua_newtable(L);    /* create the metatable */&#10;#if defined(SWIG_LUA_SQUASH_BASES) &amp;&amp; (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)&#10;  /* If squashing is requested, then merges all bases metatable into this one.&#10;   * It would get us all special methods: __getitem, __add etc.&#10;   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away&#10;   */&#10;  {&#10;    int new_metatable_index = lua_absindex(L,-1);&#10;    for(i=0;clss->bases[i];i++)&#10;    {&#10;      int base_metatable;&#10;      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);&#10;      base_metatable = lua_absindex(L,-1);&#10;      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);&#10;      lua_pop(L,1);&#10;    }&#10;  }&#10;  /* And now we will overwrite all incorrectly set data */&#10;#endif&#10;  /* add string of class name called &quot;.type&quot; */&#10;  lua_pushstring(L,&quot;.type&quot;);&#10;  lua_pushstring(L,clss->fqname);&#10;  lua_rawset(L,-3);&#10;  /* add a table called bases */&#10;  lua_pushstring(L,&quot;.bases&quot;);&#10;  lua_newtable(L);&#10;  lua_rawset(L,-3);&#10;  /* add a table called &quot;.get&quot; */&#10;  lua_pushstring(L,&quot;.get&quot;);&#10;  lua_newtable(L);&#10;  lua_rawset(L,-3);&#10;  /* add a table called &quot;.set&quot; */&#10;  lua_pushstring(L,&quot;.set&quot;);&#10;  lua_newtable(L);&#10;  lua_rawset(L,-3);&#10;  /* add a table called &quot;.fn&quot; */&#10;  lua_pushstring(L,&quot;.fn&quot;);&#10;  lua_newtable(L);&#10;  /* add manual disown method */&#10;  SWIG_Lua_add_function(L,&quot;__disown&quot;,SWIG_Lua_class_disown);&#10;  lua_rawset(L,-3);&#10;  /* add accessor fns for using the .get,.set&amp;.fn */&#10;  SWIG_Lua_add_function(L,&quot;__index&quot;,SWIG_Lua_class_get);&#10;  SWIG_Lua_add_function(L,&quot;__newindex&quot;,SWIG_Lua_class_set);&#10;  SWIG_Lua_add_function(L,&quot;__gc&quot;,SWIG_Lua_class_destruct);&#10;  /* add it */&#10;  lua_rawset(L,-3);  /* metatable into registry */&#10;  lua_pop(L,1);      /* tidy stack (remove registry) */&#10;  assert(lua_gettop(L) == begin);&#10;&#10;#if defined(SWIG_LUA_SQUASH_BASES) &amp;&amp; (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)&#10;  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */&#10;  SWIG_Lua_class_squash_bases(L,clss);&#10;#endif&#10;  SWIG_Lua_get_class_metatable(L,clss->fqname);&#10;  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts &amp; ops) */&#10;  lua_pop(L,1);      /* tidy stack (remove class metatable) */&#10;  assert( lua_gettop(L) == begin );&#10;}&#10;&#10;SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)&#10;{&#10;  int SWIGUNUSED begin;&#10;  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */&#10;  SWIG_Lua_class_register_instance(L,clss);&#10;  SWIG_Lua_class_register_static(L,clss);&#10;&#10;  /* Add links from static part to instance part and vice versa */&#10;  /* [SWIG registry]                                   [Module]&#10;   *    &quot;MyClass&quot; ----> [MyClass metatable] &lt;=====     &quot;MyClass&quot; -+> [static part]&#10;   *                     &quot;.get&quot; ----> ...        |                |     getmetatable()----|&#10;   *                     &quot;.set&quot; ----> ...        |                |                       |&#10;   *                     &quot;.static&quot; --------------)----------------/           [static part metatable]&#10;   *                                             |                                &quot;.get&quot; --> ...&#10;   *                                             |                                &quot;.set&quot; --> ....&#10;   *                                             |=============================== &quot;.instance&quot;&#10;   */&#10;  begin = lua_gettop(L);&#10;  lua_pushstring(L,clss->cls_static->name);&#10;  lua_rawget(L,-2); /* get class static table */&#10;  assert(lua_istable(L,-1));&#10;  lua_getmetatable(L,-1);&#10;  assert(lua_istable(L,-1)); /* get class static metatable */&#10;  lua_pushstring(L,&quot;.instance&quot;); /* prepare key */&#10;&#10;  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */&#10;  assert(lua_istable(L,-1));&#10;  lua_pushstring(L,&quot;.static&quot;); /* prepare key */&#10;  lua_pushvalue(L, -4); /* push static class TABLE */&#10;  assert(lua_istable(L,-1));&#10;  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as &quot;.static&quot; member of class metatable */&#10;  lua_rawset(L,-3); /* assign class metatable as &quot;.instance&quot; member of class static METATABLE */&#10;  lua_pop(L,2);&#10;  assert(lua_gettop(L) == begin);&#10;}&#10;#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)&#10;SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)&#10;{&#10;  const int SWIGUNUSED begin = lua_gettop(L);&#10;  int i;&#10;  /* if name already there (class is already registered) then do nothing */&#10;  SWIG_Lua_get_class_registry(L);  /* get the registry */&#10;  lua_pushstring(L,clss->fqname);  /* get the name */&#10;  lua_rawget(L,-2);&#10;  if(!lua_isnil(L,-1)) {&#10;    lua_pop(L,2);&#10;    assert(lua_gettop(L)==begin);&#10;    return;&#10;  }&#10;  lua_pop(L,2); /* tidy stack */&#10;  /* Recursively initialize all bases */&#10;  for(i=0;clss->bases[i];i++)&#10;  {&#10;    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);&#10;  }&#10;  /* Again, get registry and push name */&#10;  SWIG_Lua_get_class_registry(L);  /* get the registry */&#10;  lua_pushstring(L,clss->fqname);  /* get the name */&#10;  assert(clss->metatable);&#10;  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */&#10;  lua_rawset(L,-3);&#10;  lua_pop(L,1);&#10;  assert(lua_gettop(L) == begin);&#10;}&#10;#endif /* elua &amp;&amp; eluac */&#10;&#10;/* -----------------------------------------------------------------------------&#10; * Class/structure conversion fns&#10; * ----------------------------------------------------------------------------- */&#10;&#10;/* helper to add metatable to new lua object */&#10;SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)&#10;{&#10;  if (type->clientdata)  /* there is clientdata: so add the metatable */&#10;  {&#10;    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);&#10;    if (lua_istable(L,-1))&#10;    {&#10;      lua_setmetatable(L,-2);&#10;    }&#10;    else&#10;    {&#10;      lua_pop(L,1);&#10;    }&#10;  }&#10;}&#10;&#10;/* pushes a new object into the lua stack */&#10;SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)&#10;{&#10;  swig_lua_userdata *usr;&#10;  if (!ptr){&#10;    lua_pushnil(L);&#10;    return;&#10;  }&#10;  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */&#10;  usr->ptr=ptr;  /* set the ptr */&#10;  usr->type=type;&#10;  usr->own=own;&#10;#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)&#10;  SWIG_Lua_AddMetatable(L,type); /* add metatable */&#10;#endif&#10;}&#10;&#10;/* takes a object from the lua stack &amp; converts it into an object of the correct type&#10; (if possible) */&#10;SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)&#10;{&#10;  int ret = SWIG_ERROR;&#10;  swig_lua_userdata *usr;&#10;  swig_cast_info *cast;&#10;  /* special case: lua nil => NULL pointer */&#10;  if (lua_isnil(L,index))&#10;  {&#10;    *ptr=0;&#10;    return (flags &amp; SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;&#10;  }&#10;  if (lua_islightuserdata(L,index))&#10;  {&#10;    *ptr=lua_touserdata(L,index);&#10;    return (flags &amp; SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;&#10;  }&#10;  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */&#10;  if (usr)&#10;  {&#10;    if (((flags &amp; SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) &amp;&amp; !usr->own)&#10;    {&#10;      return SWIG_ERROR_RELEASE_NOT_OWNED;&#10;    }&#10;    if (flags &amp; SWIG_POINTER_DISOWN) /* must disown the object */&#10;    {&#10;      usr->own = 0;&#10;    }&#10;    if (!type)            /* special cast void*, no casting fn */&#10;    {&#10;      *ptr=usr->ptr;&#10;      ret = SWIG_OK;&#10;    }&#10;    else&#10;    {&#10;      cast=SWIG_TypeCheck(usr->type->name,type); /* performs normal type checking */&#10;      if (cast)&#10;      {&#10;        int newmemory = 0;&#10;        *ptr=SWIG_TypeCast(cast,usr->ptr,&amp;newmemory);&#10;        assert(!newmemory); /* newmemory handling not yet implemented */&#10;        ret = SWIG_OK;&#10;      }&#10;    }&#10;    if ((ret == SWIG_OK) &amp;&amp; (flags &amp; SWIG_POINTER_CLEAR))&#10;    {&#10;      usr->ptr = 0;&#10;    }&#10;  }&#10;  return ret;&#10;}&#10;&#10;SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,&#10;       int argnum,const char *func_name){&#10;  void *result = 0;&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&amp;result,type,flags))){&#10;    luaL_error (L,&quot;Error in %s, expected a %s at argument number %d\\n&quot;,&#10;		func_name,(type &amp;&amp; type->str)?type->str:&quot;void*&quot;,argnum);&#10;  }&#10;  return result;&#10;}&#10;&#10;/* pushes a packed userdata. user for member fn pointers only */&#10;SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)&#10;{&#10;  swig_lua_rawdata *raw;&#10;  assert(ptr); /* not acceptable to pass in a NULL value */&#10;  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */&#10;  raw->type=type;&#10;  raw->own=0;&#10;  memcpy(raw->data,ptr,size); /* copy the data */&#10;  SWIG_Lua_AddMetatable(L,type); /* add metatable */&#10;}&#10;&#10;/* converts a packed userdata. user for member fn pointers only */&#10;SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)&#10;{&#10;  swig_lua_rawdata *raw;&#10;  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */&#10;  if (!raw) return SWIG_ERROR;  /* error */&#10;  if (type==0 || type==raw->type) /* void* or identical type */&#10;  {&#10;    memcpy(ptr,raw->data,size); /* copy it */&#10;    return SWIG_OK; /* ok */&#10;  }&#10;  return SWIG_ERROR;  /* error */&#10;}&#10;&#10;/* a function to get the typestring of a piece of data */&#10;SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)&#10;{&#10;  swig_lua_userdata *usr;&#10;  if (lua_isuserdata(L,tp))&#10;  {&#10;    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */&#10;    if (usr &amp;&amp; usr->type &amp;&amp; usr->type->str)&#10;      return usr->type->str;&#10;    return &quot;userdata (unknown type)&quot;;&#10;  }&#10;  return lua_typename(L,lua_type(L,tp));&#10;}&#10;&#10;/* lua callable function to get the userdata's type */&#10;SWIGRUNTIME int SWIG_Lua_type(lua_State *L)&#10;{&#10;  lua_pushstring(L,SWIG_Lua_typename(L,1));&#10;  return 1;&#10;}&#10;&#10;/* -----------------------------------------------------------------------------&#10; * global variable support code: class/struct typemap functions&#10; * ----------------------------------------------------------------------------- */&#10;&#10;#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) &amp;&amp; (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))&#10;/* Install Constants */&#10;SWIGINTERN void&#10;SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {&#10;  int i;&#10;  for (i = 0; constants[i].type; i++) {&#10;    switch(constants[i].type) {&#10;    case SWIG_LUA_INT:&#10;      lua_pushstring(L,constants[i].name);&#10;      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);&#10;      lua_rawset(L,-3);&#10;      break;&#10;    case SWIG_LUA_FLOAT:&#10;      lua_pushstring(L,constants[i].name);&#10;      lua_pushnumber(L,(lua_Number)constants[i].dvalue);&#10;      lua_rawset(L,-3);&#10;      break;&#10;    case SWIG_LUA_CHAR:&#10;      lua_pushstring(L,constants[i].name);&#10;      {&#10;        char c = (char)constants[i].lvalue;&#10;        lua_pushlstring(L,&amp;c,1);&#10;      }&#10;      lua_rawset(L,-3);&#10;      break;&#10;    case SWIG_LUA_STRING:&#10;      lua_pushstring(L,constants[i].name);&#10;      lua_pushstring(L,(char *) constants[i].pvalue);&#10;      lua_rawset(L,-3);&#10;      break;&#10;    case SWIG_LUA_POINTER:&#10;      lua_pushstring(L,constants[i].name);&#10;      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);&#10;      lua_rawset(L,-3);&#10;      break;&#10;    case SWIG_LUA_BINARY:&#10;      lua_pushstring(L,constants[i].name);&#10;      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);&#10;      lua_rawset(L,-3);&#10;      break;&#10;    default:&#10;      break;&#10;    }&#10;  }&#10;}&#10;#endif&#10;&#10;/* -----------------------------------------------------------------------------&#10; * executing lua code from within the wrapper&#10; * ----------------------------------------------------------------------------- */&#10;&#10;#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */&#10;#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,&quot;%s\\n&quot;,S)&#10;#endif&#10;/* Executes a C string in Lua which is a really simple way of calling lua from C&#10;Unfortunately lua keeps changing its APIs, so we need a conditional compile&#10;In lua 5.0.X it's lua_dostring()&#10;In lua 5.1.X it's luaL_dostring()&#10;*/&#10;SWIGINTERN int&#10;SWIG_Lua_dostring(lua_State *L, const char *str) {&#10;  int ok,top;&#10;  if (str==0 || str[0]==0) return 0; /* nothing to do */&#10;  top=lua_gettop(L); /* save stack */&#10;#if (defined(LUA_VERSION_NUM) &amp;&amp; (LUA_VERSION_NUM>=501))&#10;  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */&#10;#else&#10;  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */&#10;#endif&#10;  if (ok!=0) {&#10;    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));&#10;  }&#10;  lua_settop(L,top); /* restore the stack */&#10;  return ok;&#10;}&#10;&#10;#ifdef __cplusplus&#10;}&#10;#endif&#10;&#10;/* ------------------------------ end luarun.swg  ------------------------------ */&#10;" id="1866" addr="014622b0" />
                </attributelist>
             
            </insert>
            <insert id="1867" addr="01446350">
                <attributelist id="1868" addr="01446350">
                    <attribute name="section" value="initbeforefunc" id="1869" addr="014622b0" />
                    <attribute name="code" value="/* -----------------------------------------------------------------------------&#10; * Type initialization:&#10; * This problem is tough by the requirement that no dynamic&#10; * memory is used. Also, since swig_type_info structures store pointers to&#10; * swig_cast_info structures and swig_cast_info structures store pointers back&#10; * to swig_type_info structures, we need some lookup code at initialization.&#10; * The idea is that swig generates all the structures that are needed.&#10; * The runtime then collects these partially filled structures.&#10; * The SWIG_InitializeModule function takes these initial arrays out of&#10; * swig_module, and does all the lookup, filling in the swig_module.types&#10; * array with the correct data and linking the correct swig_cast_info&#10; * structures together.&#10; *&#10; * The generated swig_type_info structures are assigned statically to an initial&#10; * array. We just loop through that array, and handle each type individually.&#10; * First we lookup if this type has been already loaded, and if so, use the&#10; * loaded structure instead of the generated one. Then we have to fill in the&#10; * cast linked list. The cast data is initially stored in something like a&#10; * two-dimensional array. Each row corresponds to a type (there are the same&#10; * number of rows as there are in the swig_type_initial array). Each entry in&#10; * a column is one of the swig_cast_info structures for that type.&#10; * The cast_initial array is actually an array of arrays, because each row has&#10; * a variable number of columns. So to actually build the cast linked list,&#10; * we find the array of casts associated with the type, and loop through it&#10; * adding the casts to the list. The one last trick we need to do is making&#10; * sure the type pointer in the swig_cast_info struct is correct.&#10; *&#10; * First off, we lookup the cast->type name to see if it is already loaded.&#10; * There are three cases to handle:&#10; *  1) If the cast->type has already been loaded AND the type we are adding&#10; *     casting info to has not been loaded (it is in this module), THEN we&#10; *     replace the cast->type pointer with the type pointer that has already&#10; *     been loaded.&#10; *  2) If BOTH types (the one we are adding casting info to, and the&#10; *     cast->type) are loaded, THEN the cast info has already been loaded by&#10; *     the previous module so we just ignore it.&#10; *  3) Finally, if cast->type has not already been loaded, then we add that&#10; *     swig_cast_info to the linked list (because the cast->type) pointer will&#10; *     be correct.&#10; * ----------------------------------------------------------------------------- */&#10;&#10;#ifdef __cplusplus&#10;extern &quot;C&quot; {&#10;#if 0&#10;} /* c-mode */&#10;#endif&#10;#endif&#10;&#10;#if 0&#10;#define SWIGRUNTIME_DEBUG&#10;#endif&#10;&#10;#ifndef SWIG_INIT_CLIENT_DATA_TYPE&#10;#define SWIG_INIT_CLIENT_DATA_TYPE void *&#10;#endif&#10;&#10;SWIGRUNTIME void&#10;SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {&#10;  size_t i;&#10;  swig_module_info *module_head, *iter;&#10;  int init;&#10;&#10;  /* check to see if the circular list has been setup, if not, set it up */&#10;  if (swig_module.next==0) {&#10;    /* Initialize the swig_module */&#10;    swig_module.type_initial = swig_type_initial;&#10;    swig_module.cast_initial = swig_cast_initial;&#10;    swig_module.next = &amp;swig_module;&#10;    init = 1;&#10;  } else {&#10;    init = 0;&#10;  }&#10;&#10;  /* Try and load any already created modules */&#10;  module_head = SWIG_GetModule(clientdata);&#10;  if (!module_head) {&#10;    /* This is the first module loaded for this interpreter */&#10;    /* so set the swig module into the interpreter */&#10;    SWIG_SetModule(clientdata, &amp;swig_module);&#10;  } else {&#10;    /* the interpreter has loaded a SWIG module, but has it loaded this one? */&#10;    iter=module_head;&#10;    do {&#10;      if (iter==&amp;swig_module) {&#10;        /* Our module is already in the list, so there's nothing more to do. */&#10;        return;&#10;      }&#10;      iter=iter->next;&#10;    } while (iter!= module_head);&#10;&#10;    /* otherwise we must add our module into the list */&#10;    swig_module.next = module_head->next;&#10;    module_head->next = &amp;swig_module;&#10;  }&#10;&#10;  /* When multiple interpreters are used, a module could have already been initialized in&#10;     a different interpreter, but not yet have a pointer in this interpreter.&#10;     In this case, we do not want to continue adding types... everything should be&#10;     set up already */&#10;  if (init == 0) return;&#10;&#10;  /* Now work on filling in swig_module.types */&#10;#ifdef SWIGRUNTIME_DEBUG&#10;  printf(&quot;SWIG_InitializeModule: size %lu\\n&quot;, (unsigned long)swig_module.size);&#10;#endif&#10;  for (i = 0; i &lt; swig_module.size; ++i) {&#10;    swig_type_info *type = 0;&#10;    swig_type_info *ret;&#10;    swig_cast_info *cast;&#10;&#10;#ifdef SWIGRUNTIME_DEBUG&#10;    printf(&quot;SWIG_InitializeModule: type %lu %s\\n&quot;, (unsigned long)i, swig_module.type_initial[i]->name);&#10;#endif&#10;&#10;    /* if there is another module already loaded */&#10;    if (swig_module.next != &amp;swig_module) {&#10;      type = SWIG_MangledTypeQueryModule(swig_module.next, &amp;swig_module, swig_module.type_initial[i]->name);&#10;    }&#10;    if (type) {&#10;      /* Overwrite clientdata field */&#10;#ifdef SWIGRUNTIME_DEBUG&#10;      printf(&quot;SWIG_InitializeModule: found type %s\\n&quot;, type->name);&#10;#endif&#10;      if (swig_module.type_initial[i]->clientdata) {&#10;	type->clientdata = swig_module.type_initial[i]->clientdata;&#10;#ifdef SWIGRUNTIME_DEBUG&#10;      printf(&quot;SWIG_InitializeModule: found and overwrite type %s \\n&quot;, type->name);&#10;#endif&#10;      }&#10;    } else {&#10;      type = swig_module.type_initial[i];&#10;    }&#10;&#10;    /* Insert casting types */&#10;    cast = swig_module.cast_initial[i];&#10;    while (cast->type) {&#10;&#10;      /* Don't need to add information already in the list */&#10;      ret = 0;&#10;#ifdef SWIGRUNTIME_DEBUG&#10;      printf(&quot;SWIG_InitializeModule: look cast %s\\n&quot;, cast->type->name);&#10;#endif&#10;      if (swig_module.next != &amp;swig_module) {&#10;        ret = SWIG_MangledTypeQueryModule(swig_module.next, &amp;swig_module, cast->type->name);&#10;#ifdef SWIGRUNTIME_DEBUG&#10;	if (ret) printf(&quot;SWIG_InitializeModule: found cast %s\\n&quot;, ret->name);&#10;#endif&#10;      }&#10;      if (ret) {&#10;	if (type == swig_module.type_initial[i]) {&#10;#ifdef SWIGRUNTIME_DEBUG&#10;	  printf(&quot;SWIG_InitializeModule: skip old type %s\\n&quot;, ret->name);&#10;#endif&#10;	  cast->type = ret;&#10;	  ret = 0;&#10;	} else {&#10;	  /* Check for casting already in the list */&#10;	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);&#10;#ifdef SWIGRUNTIME_DEBUG&#10;	  if (ocast) printf(&quot;SWIG_InitializeModule: skip old cast %s\\n&quot;, ret->name);&#10;#endif&#10;	  if (!ocast) ret = 0;&#10;	}&#10;      }&#10;&#10;      if (!ret) {&#10;#ifdef SWIGRUNTIME_DEBUG&#10;	printf(&quot;SWIG_InitializeModule: adding cast %s\\n&quot;, cast->type->name);&#10;#endif&#10;        if (type->cast) {&#10;          type->cast->prev = cast;&#10;          cast->next = type->cast;&#10;        }&#10;        type->cast = cast;&#10;      }&#10;      cast++;&#10;    }&#10;    /* Set entry in modules->types array equal to the type */&#10;    swig_module.types[i] = type;&#10;  }&#10;  swig_module.types[i] = 0;&#10;&#10;#ifdef SWIGRUNTIME_DEBUG&#10;  printf(&quot;**** SWIG_InitializeModule: Cast List ******\\n&quot;);&#10;  for (i = 0; i &lt; swig_module.size; ++i) {&#10;    int j = 0;&#10;    swig_cast_info *cast = swig_module.cast_initial[i];&#10;    printf(&quot;SWIG_InitializeModule: type %lu %s\\n&quot;, (unsigned long)i, swig_module.type_initial[i]->name);&#10;    while (cast->type) {&#10;      printf(&quot;SWIG_InitializeModule: cast type %s\\n&quot;, cast->type->name);&#10;      cast++;&#10;      ++j;&#10;    }&#10;  printf(&quot;---- Total casts: %d\\n&quot;,j);&#10;  }&#10;  printf(&quot;**** SWIG_InitializeModule: Cast List ******\\n&quot;);&#10;#endif&#10;}&#10;&#10;/* This function will propagate the clientdata field of type to&#10;* any new swig_type_info structures that have been added into the list&#10;* of equivalent types.  It is like calling&#10;* SWIG_TypeClientData(type, clientdata) a second time.&#10;*/&#10;SWIGRUNTIME void&#10;SWIG_PropagateClientData(void) {&#10;  size_t i;&#10;  swig_cast_info *equiv;&#10;  static int init_run = 0;&#10;&#10;  if (init_run) return;&#10;  init_run = 1;&#10;&#10;  for (i = 0; i &lt; swig_module.size; i++) {&#10;    if (swig_module.types[i]->clientdata) {&#10;      equiv = swig_module.types[i]->cast;&#10;      while (equiv) {&#10;        if (!equiv->converter) {&#10;          if (equiv->type &amp;&amp; !equiv->type->clientdata)&#10;            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);&#10;        }&#10;        equiv = equiv->next;&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;#ifdef __cplusplus&#10;#if 0&#10;{ /* c-mode */&#10;#endif&#10;}&#10;#endif&#10;" id="1870" addr="014622b0" />
                </attributelist>
             
            </insert>
            <insert id="1871" addr="014463c0">
                <attributelist id="1872" addr="014463c0">
                    <attribute name="section" value="initbeforefunc" id="1873" addr="014622b0" />
                    <attribute name="code" value="&#10;&#10;/* Forward declaration of where the user's %init{} gets inserted */&#10;void SWIG_init_user(lua_State* L );&#10;    &#10;#ifdef __cplusplus&#10;extern &quot;C&quot; {&#10;#endif&#10;/* this is the initialization function&#10;  added at the very end of the code&#10;  the function is always called SWIG_init, but an earlier #define will rename it&#10;*/&#10;#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))&#10;LUALIB_API int SWIG_init(lua_State* L)&#10;#else&#10;SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */&#10;#endif&#10;{&#10;#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */&#10;  int i;&#10;  int globalRegister = 0;&#10;  /* start with global table */&#10;  lua_pushglobaltable (L);&#10;  /* SWIG's internal initialisation */&#10;  SWIG_InitializeModule((void*)L);&#10;  SWIG_PropagateClientData();&#10;#endif&#10;&#10;#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) &amp;&amp; (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)&#10;  /* add a global fn */&#10;  SWIG_Lua_add_function(L,&quot;swig_type&quot;,SWIG_Lua_type);&#10;  SWIG_Lua_add_function(L,&quot;swig_equals&quot;,SWIG_Lua_class_equal);&#10;#endif&#10;&#10;#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)&#10;  /* set up base class pointers (the hierarchy) */&#10;  for (i = 0; swig_types[i]; i++){&#10;    if (swig_types[i]->clientdata){&#10;      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));&#10;    }&#10;  }&#10;#ifdef SWIG_LUA_MODULE_GLOBAL&#10;  globalRegister = 1;&#10;#endif&#10;&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)&#10;  SWIG_Lua_namespace_register(L,&amp;swig_SwigModule, globalRegister);&#10;#endif&#10;&#10;#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)&#10;  for (i = 0; swig_types[i]; i++){&#10;    if (swig_types[i]->clientdata){&#10;      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));&#10;    }&#10;  }&#10;#endif&#10;&#10;#if defined(SWIG_LUA_ELUA_EMULATE)&#10;  lua_newtable(L);&#10;  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);&#10;  SWIG_Lua_elua_emulate_register_clear(L);&#10;  if(globalRegister) {&#10;    lua_pushstring(L,swig_SwigModule.name);&#10;    lua_pushvalue(L,-2);&#10;    lua_rawset(L,-4);&#10;  }&#10;#endif&#10;&#10;#endif&#10;&#10;#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)&#10;  /* invoke user-specific initialization */&#10;  SWIG_init_user(L);&#10;  /* end module */&#10;  /* Note: We do not clean up the stack here (Lua will do this for us). At this&#10;     point, we have the globals table and out module table on the stack. Returning&#10;     one value makes the module table the result of the require command. */&#10;  return 1;&#10;#else&#10;  return 0;&#10;#endif&#10;}&#10;&#10;#ifdef __cplusplus&#10;}&#10;#endif&#10;&#10;" id="1874" addr="014622b0" />
                </attributelist>
             
            </insert>
        </include>
        <include id="1875" addr="01446370">
            <attributelist id="1876" addr="01446370">
                <attribute name="name" value="C:\\ProgramData\\chocolatey\\lib\\swig\\tools\\install\\swigwin-4.1.1\\Lib\\lua\\luakw.swg" id="1877" addr="014622b0" />
            </attributelist>
         
        </include>
        <typemap id="1878" addr="01449d20">
            <attributelist id="1879" addr="01449d20">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_INT(&quot;$symname&quot;, $value)}" id="1880" addr="014622b0" />
                <attribute name="method" value="consttab" id="1881" addr="014622b0" />
            </attributelist>

            <typemapitem id="1882" addr="01449880">
                <attributelist id="1883" addr="01449880">
                    <parmlist id="1884" addr="014498a0">
                        <parm id="1885">
                            <attributelist id="1886" addr="014498a0">
                                <attribute name="type" value="int" id="1887" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1888" addr="01449900">
                <attributelist id="1889" addr="01449900">
                    <parmlist id="1890" addr="01449920">
                        <parm id="1891">
                            <attributelist id="1892" addr="01449920">
                                <attribute name="type" value="unsigned int" id="1893" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1894" addr="01449970">
                <attributelist id="1895" addr="01449970">
                    <parmlist id="1896" addr="01449990">
                        <parm id="1897">
                            <attributelist id="1898" addr="01449990">
                                <attribute name="type" value="short" id="1899" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1900" addr="014499f0">
                <attributelist id="1901" addr="014499f0">
                    <parmlist id="1902" addr="01449a10">
                        <parm id="1903">
                            <attributelist id="1904" addr="01449a10">
                                <attribute name="type" value="unsigned short" id="1905" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1906" addr="01449a60">
                <attributelist id="1907" addr="01449a60">
                    <parmlist id="1908" addr="01449a80">
                        <parm id="1909">
                            <attributelist id="1910" addr="01449a80">
                                <attribute name="type" value="long" id="1911" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1912" addr="01449ae0">
                <attributelist id="1913" addr="01449ae0">
                    <parmlist id="1914" addr="01449b00">
                        <parm id="1915">
                            <attributelist id="1916" addr="01449b00">
                                <attribute name="type" value="unsigned long" id="1917" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1918" addr="01449b60">
                <attributelist id="1919" addr="01449b60">
                    <parmlist id="1920" addr="01449b80">
                        <parm id="1921">
                            <attributelist id="1922" addr="01449b80">
                                <attribute name="type" value="unsigned char" id="1923" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1924" addr="01449be0">
                <attributelist id="1925" addr="01449be0">
                    <parmlist id="1926" addr="01449c00">
                        <parm id="1927">
                            <attributelist id="1928" addr="01449c00">
                                <attribute name="type" value="signed char" id="1929" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1930" addr="01449c40">
                <attributelist id="1931" addr="01449c40">
                    <parmlist id="1932" addr="01449c60">
                        <parm id="1933">
                            <attributelist id="1934" addr="01449c60">
                                <attribute name="type" value="bool" id="1935" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1936" addr="01449cc0">
                <attributelist id="1937" addr="01449cc0">
                    <parmlist id="1938" addr="01449ce0">
                        <parm id="1939">
                            <attributelist id="1940" addr="01449ce0">
                                <attribute name="type" value="enum SWIGTYPE" id="1941" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="1942" addr="01449e70">
            <attributelist id="1943" addr="01449e70">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_FLOAT(&quot;$symname&quot;, $value)}" id="1944" addr="014622b0" />
                <attribute name="method" value="consttab" id="1945" addr="014622b0" />
            </attributelist>

            <typemapitem id="1946" addr="01449da0">
                <attributelist id="1947" addr="01449da0">
                    <parmlist id="1948" addr="01449dc0">
                        <parm id="1949">
                            <attributelist id="1950" addr="01449dc0">
                                <attribute name="type" value="float" id="1951" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1952" addr="01449e10">
                <attributelist id="1953" addr="01449e10">
                    <parmlist id="1954" addr="01449e30">
                        <parm id="1955">
                            <attributelist id="1956" addr="01449e30">
                                <attribute name="type" value="double" id="1957" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="1958" addr="0144a0e0">
            <attributelist id="1959" addr="0144a0e0">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_FLOAT(&quot;$symname&quot;, $value)}" id="1960" addr="014622b0" />
                <attribute name="method" value="consttab" id="1961" addr="014622b0" />
            </attributelist>

            <typemapitem id="1962" addr="01449f20">
                <attributelist id="1963" addr="01449f20">
                    <parmlist id="1964" addr="01449f40">
                        <parm id="1965">
                            <attributelist id="1966" addr="01449f40">
                                <attribute name="type" value="long long" id="1967" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1968" addr="01449fd0">
                <attributelist id="1969" addr="01449fd0">
                    <parmlist id="1970" addr="01449ff0">
                        <parm id="1971">
                            <attributelist id="1972" addr="01449ff0">
                                <attribute name="type" value="unsigned long long" id="1973" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1974" addr="0144a080">
                <attributelist id="1975" addr="0144a080">
                    <parmlist id="1976" addr="0144a0a0">
                        <parm id="1977">
                            <attributelist id="1978" addr="0144a0a0">
                                <attribute name="type" value="long long" id="1979" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="1980" addr="0144a3b0">
            <attributelist id="1981" addr="0144a3b0">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_FLOAT(&quot;$symname&quot;, *$value)}" id="1982" addr="014622b0" />
                <attribute name="method" value="consttab" id="1983" addr="014622b0" />
            </attributelist>

            <typemapitem id="1984" addr="0144a1b0">
                <attributelist id="1985" addr="0144a1b0">
                    <parmlist id="1986" addr="0144a1d0">
                        <parm id="1987">
                            <attributelist id="1988" addr="0144a1d0">
                                <attribute name="type" value="r.q(const).long long" id="1989" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1990" addr="0144a220">
                <attributelist id="1991" addr="0144a220">
                    <parmlist id="1992" addr="0144a2a0">
                        <parm id="1993">
                            <attributelist id="1994" addr="0144a2a0">
                                <attribute name="type" value="r.q(const).unsigned long long" id="1995" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="1996" addr="0144a2f0">
                <attributelist id="1997" addr="0144a2f0">
                    <parmlist id="1998" addr="0144a370">
                        <parm id="1999">
                            <attributelist id="2000" addr="0144a370">
                                <attribute name="type" value="r.q(const).long long" id="2001" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2002" addr="0144a640">
            <attributelist id="2003" addr="0144a640">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_STRING(&quot;$symname&quot;, $value)}" id="2004" addr="014622b0" />
                <attribute name="method" value="consttab" id="2005" addr="014622b0" />
            </attributelist>

            <typemapitem id="2006" addr="0144a440">
                <attributelist id="2007" addr="0144a440">
                    <parmlist id="2008" addr="0144a460">
                        <parm id="2009">
                            <attributelist id="2010" addr="0144a460">
                                <attribute name="type" value="p.char" id="2011" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2012" addr="0144a4d0">
                <attributelist id="2013" addr="0144a4d0">
                    <parmlist id="2014" addr="0144a4f0">
                        <parm id="2015">
                            <attributelist id="2016" addr="0144a4f0">
                                <attribute name="type" value="p.q(const).char" id="2017" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2018" addr="0144a550">
                <attributelist id="2019" addr="0144a550">
                    <parmlist id="2020" addr="0144a570">
                        <parm id="2021">
                            <attributelist id="2022" addr="0144a570">
                                <attribute name="type" value="a().char" id="2023" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2024" addr="0144a5e0">
                <attributelist id="2025" addr="0144a5e0">
                    <parmlist id="2026" addr="0144a600">
                        <parm id="2027">
                            <attributelist id="2028" addr="0144a600">
                                <attribute name="type" value="a().q(const).char" id="2029" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2030" addr="0144a720">
            <attributelist id="2031" addr="0144a720">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_CHAR(&quot;$symname&quot;, $value)}" id="2032" addr="014622b0" />
                <attribute name="method" value="consttab" id="2033" addr="014622b0" />
            </attributelist>

            <typemapitem id="2034" addr="0144a6c0">
                <attributelist id="2035" addr="0144a6c0">
                    <parmlist id="2036" addr="0144a6e0">
                        <parm id="2037">
                            <attributelist id="2038" addr="0144a6e0">
                                <attribute name="type" value="char" id="2039" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2040" addr="0144a8e0">
            <attributelist id="2041" addr="0144a8e0">
                <attribute name="code" value="{SWIG_LUA_CONSTTAB_STRING(&quot;$symname&quot;, &quot;$value&quot;)}" id="2042" addr="014622b0" />
                <attribute name="method" value="consttab" id="2043" addr="014622b0" />
            </attributelist>

            <typemapitem id="2044" addr="0144a7d0">
                <attributelist id="2045" addr="0144a7d0">
                    <parmlist id="2046" addr="0144a7f0">
                        <parm id="2047">
                            <attributelist id="2048" addr="0144a7f0">
                                <attribute name="type" value="long long" id="2049" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2050" addr="0144a880">
                <attributelist id="2051" addr="0144a880">
                    <parmlist id="2052" addr="0144a8a0">
                        <parm id="2053">
                            <attributelist id="2054" addr="0144a8a0">
                                <attribute name="type" value="unsigned long long" id="2055" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2056" addr="0144abe0">
            <attributelist id="2057" addr="0144abe0">
                <attribute name="code" value="{ SWIG_LUA_CONSTTAB_POINTER(&quot;$symname&quot;,$value, $1_descriptor) }" id="2058" addr="014622b0" />
                <attribute name="method" value="consttab" id="2059" addr="014622b0" />
            </attributelist>

            <typemapitem id="2060" addr="0144a970">
                <attributelist id="2061" addr="0144a970">
                    <parmlist id="2062" addr="0144a990">
                        <parm id="2063">
                            <attributelist id="2064" addr="0144a990">
                                <attribute name="type" value="p.SWIGTYPE" id="2065" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2066" addr="0144aa00">
                <attributelist id="2067" addr="0144aa00">
                    <parmlist id="2068" addr="0144aa20">
                        <parm id="2069">
                            <attributelist id="2070" addr="0144aa20">
                                <attribute name="type" value="q(const).p.SWIGTYPE" id="2071" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2072" addr="0144aa80">
                <attributelist id="2073" addr="0144aa80">
                    <parmlist id="2074" addr="0144aaa0">
                        <parm id="2075">
                            <attributelist id="2076" addr="0144aaa0">
                                <attribute name="type" value="r.SWIGTYPE" id="2077" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2078" addr="0144ab00">
                <attributelist id="2079" addr="0144ab00">
                    <parmlist id="2080" addr="0144ab20">
                        <parm id="2081">
                            <attributelist id="2082" addr="0144ab20">
                                <attribute name="type" value="z.SWIGTYPE" id="2083" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2084" addr="0144ab80">
                <attributelist id="2085" addr="0144ab80">
                    <parmlist id="2086" addr="0144aba0">
                        <parm id="2087">
                            <attributelist id="2088" addr="0144aba0">
                                <attribute name="type" value="a().SWIGTYPE" id="2089" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2090" addr="0144acc0">
            <attributelist id="2091" addr="0144acc0">
                <attribute name="code" value="{ SWIG_LUA_CONSTTAB_POINTER(&quot;$symname&quot;,&amp;$value, $&amp;1_descriptor) }" id="2092" addr="014622b0" />
                <attribute name="method" value="consttab" id="2093" addr="014622b0" />
            </attributelist>

            <typemapitem id="2094" addr="0144ac60">
                <attributelist id="2095" addr="0144ac60">
                    <parmlist id="2096" addr="0144ac80">
                        <parm id="2097">
                            <attributelist id="2098" addr="0144ac80">
                                <attribute name="type" value="SWIGTYPE" id="2099" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2100" addr="0144ade0">
            <attributelist id="2101" addr="0144ade0">
                <attribute name="code" value="{ SWIG_LUA_CONSTTAB_BINARY(&quot;$symname&quot;, sizeof($type),&amp;$value, $1_descriptor) }" id="2102" addr="014622b0" />
                <attribute name="method" value="consttab" id="2103" addr="014622b0" />
            </attributelist>

            <typemapitem id="2104" addr="0144ad80">
                <attributelist id="2105" addr="0144ad80">
                    <parmlist id="2106" addr="0144ada0">
                        <parm id="2107">
                            <attributelist id="2108" addr="0144ada0">
                                <attribute name="type" value="m(CLASS).SWIGTYPE" id="2109" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2110" addr="0144df60">
            <attributelist id="2111" addr="0144df60">
                <attribute name="code" value="lua_pushnumber(L,(lua_Number)$1);SWIG_fail; " id="2112" addr="014622b0" />
                <attribute name="method" value="throws" id="2113" addr="014622b0" />
            </attributelist>

            <typemapitem id="2114" addr="0144cf80">
                <attributelist id="2115" addr="0144cf80">
                    <parmlist id="2116" addr="0144cfa0">
                        <parm id="2117">
                            <attributelist id="2118" addr="0144cfa0">
                                <attribute name="type" value="int" id="2119" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2120" addr="0144d000">
                <attributelist id="2121" addr="0144d000">
                    <parmlist id="2122" addr="0144d020">
                        <parm id="2123">
                            <attributelist id="2124" addr="0144d020">
                                <attribute name="type" value="unsigned int" id="2125" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2126" addr="0144d080">
                <attributelist id="2127" addr="0144d080">
                    <parmlist id="2128" addr="0144d0a0">
                        <parm id="2129">
                            <attributelist id="2130" addr="0144d0a0">
                                <attribute name="type" value="int" id="2131" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2132" addr="0144d0f0">
                <attributelist id="2133" addr="0144d0f0">
                    <parmlist id="2134" addr="0144d110">
                        <parm id="2135">
                            <attributelist id="2136" addr="0144d110">
                                <attribute name="type" value="long" id="2137" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2138" addr="0144d170">
                <attributelist id="2139" addr="0144d170">
                    <parmlist id="2140" addr="0144d190">
                        <parm id="2141">
                            <attributelist id="2142" addr="0144d190">
                                <attribute name="type" value="unsigned long" id="2143" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2144" addr="0144d1f0">
                <attributelist id="2145" addr="0144d1f0">
                    <parmlist id="2146" addr="0144d210">
                        <parm id="2147">
                            <attributelist id="2148" addr="0144d210">
                                <attribute name="type" value="long" id="2149" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2150" addr="0144d260">
                <attributelist id="2151" addr="0144d260">
                    <parmlist id="2152" addr="0144d280">
                        <parm id="2153">
                            <attributelist id="2154" addr="0144d280">
                                <attribute name="type" value="short" id="2155" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2156" addr="0144d2e0">
                <attributelist id="2157" addr="0144d2e0">
                    <parmlist id="2158" addr="0144d300">
                        <parm id="2159">
                            <attributelist id="2160" addr="0144d300">
                                <attribute name="type" value="unsigned short" id="2161" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2162" addr="0144d360">
                <attributelist id="2163" addr="0144d360">
                    <parmlist id="2164" addr="0144d380">
                        <parm id="2165">
                            <attributelist id="2166" addr="0144d380">
                                <attribute name="type" value="short" id="2167" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2168" addr="0144d3d0">
                <attributelist id="2169" addr="0144d3d0">
                    <parmlist id="2170" addr="0144d3f0">
                        <parm id="2171">
                            <attributelist id="2172" addr="0144d3f0">
                                <attribute name="type" value="float" id="2173" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2174" addr="0144d440">
                <attributelist id="2175" addr="0144d440">
                    <parmlist id="2176" addr="0144d460">
                        <parm id="2177">
                            <attributelist id="2178" addr="0144d460">
                                <attribute name="type" value="double" id="2179" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2180" addr="0144d4e0">
                <attributelist id="2181" addr="0144d4e0">
                    <parmlist id="2182" addr="0144d500">
                        <parm id="2183">
                            <attributelist id="2184" addr="0144d500">
                                <attribute name="type" value="long long" id="2185" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2186" addr="0144d590">
                <attributelist id="2187" addr="0144d590">
                    <parmlist id="2188" addr="0144d5b0">
                        <parm id="2189">
                            <attributelist id="2190" addr="0144d5b0">
                                <attribute name="type" value="unsigned long long" id="2191" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2192" addr="0144d610">
                <attributelist id="2193" addr="0144d610">
                    <parmlist id="2194" addr="0144d630">
                        <parm id="2195">
                            <attributelist id="2196" addr="0144d630">
                                <attribute name="type" value="unsigned char" id="2197" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2198" addr="0144d690">
                <attributelist id="2199" addr="0144d690">
                    <parmlist id="2200" addr="0144d6b0">
                        <parm id="2201">
                            <attributelist id="2202" addr="0144d6b0">
                                <attribute name="type" value="signed char" id="2203" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2204" addr="0144d710">
                <attributelist id="2205" addr="0144d710">
                    <parmlist id="2206" addr="0144d730">
                        <parm id="2207">
                            <attributelist id="2208" addr="0144d730">
                                <attribute name="type" value="r.int" id="2209" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2210" addr="0144d770">
                <attributelist id="2211" addr="0144d770">
                    <parmlist id="2212" addr="0144d7c0">
                        <parm id="2213">
                            <attributelist id="2214" addr="0144d7c0">
                                <attribute name="type" value="r.unsigned int" id="2215" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2216" addr="0144d800">
                <attributelist id="2217" addr="0144d800">
                    <parmlist id="2218" addr="0144d850">
                        <parm id="2219">
                            <attributelist id="2220" addr="0144d850">
                                <attribute name="type" value="r.int" id="2221" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2222" addr="0144d8b0">
                <attributelist id="2223" addr="0144d8b0">
                    <parmlist id="2224" addr="0144d8d0">
                        <parm id="2225">
                            <attributelist id="2226" addr="0144d8d0">
                                <attribute name="type" value="r.long" id="2227" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2228" addr="0144d910">
                <attributelist id="2229" addr="0144d910">
                    <parmlist id="2230" addr="0144d960">
                        <parm id="2231">
                            <attributelist id="2232" addr="0144d960">
                                <attribute name="type" value="r.unsigned long" id="2233" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2234" addr="0144d9a0">
                <attributelist id="2235" addr="0144d9a0">
                    <parmlist id="2236" addr="0144d9f0">
                        <parm id="2237">
                            <attributelist id="2238" addr="0144d9f0">
                                <attribute name="type" value="r.long" id="2239" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2240" addr="0144da50">
                <attributelist id="2241" addr="0144da50">
                    <parmlist id="2242" addr="0144da70">
                        <parm id="2243">
                            <attributelist id="2244" addr="0144da70">
                                <attribute name="type" value="r.short" id="2245" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2246" addr="0144dab0">
                <attributelist id="2247" addr="0144dab0">
                    <parmlist id="2248" addr="0144db00">
                        <parm id="2249">
                            <attributelist id="2250" addr="0144db00">
                                <attribute name="type" value="r.unsigned short" id="2251" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2252" addr="0144db40">
                <attributelist id="2253" addr="0144db40">
                    <parmlist id="2254" addr="0144db90">
                        <parm id="2255">
                            <attributelist id="2256" addr="0144db90">
                                <attribute name="type" value="r.short" id="2257" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2258" addr="0144dbf0">
                <attributelist id="2259" addr="0144dbf0">
                    <parmlist id="2260" addr="0144dc10">
                        <parm id="2261">
                            <attributelist id="2262" addr="0144dc10">
                                <attribute name="type" value="r.float" id="2263" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2264" addr="0144dc70">
                <attributelist id="2265" addr="0144dc70">
                    <parmlist id="2266" addr="0144dc90">
                        <parm id="2267">
                            <attributelist id="2268" addr="0144dc90">
                                <attribute name="type" value="r.double" id="2269" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2270" addr="0144dd20">
                <attributelist id="2271" addr="0144dd20">
                    <parmlist id="2272" addr="0144dd40">
                        <parm id="2273">
                            <attributelist id="2274" addr="0144dd40">
                                <attribute name="type" value="r.long long" id="2275" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2276" addr="0144dd80">
                <attributelist id="2277" addr="0144dd80">
                    <parmlist id="2278" addr="0144de00">
                        <parm id="2279">
                            <attributelist id="2280" addr="0144de00">
                                <attribute name="type" value="r.unsigned long long" id="2281" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2282" addr="0144de40">
                <attributelist id="2283" addr="0144de40">
                    <parmlist id="2284" addr="0144de90">
                        <parm id="2285">
                            <attributelist id="2286" addr="0144de90">
                                <attribute name="type" value="r.unsigned char" id="2287" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2288" addr="0144df10">
                <attributelist id="2289" addr="0144df10">
                    <parmlist id="2290" addr="0144df30">
                        <parm id="2291">
                            <attributelist id="2292" addr="0144df30">
                                <attribute name="type" value="r.signed char" id="2293" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2294" addr="0144e0a0">
            <attributelist id="2295" addr="0144e0a0">
                <attribute name="code" value="lua_pushboolean(L,(int)($1==true));SWIG_fail; " id="2296" addr="014622b0" />
                <attribute name="method" value="throws" id="2297" addr="014622b0" />
            </attributelist>

            <typemapitem id="2298" addr="0144dfd0">
                <attributelist id="2299" addr="0144dfd0">
                    <parmlist id="2300" addr="0144dff0">
                        <parm id="2301">
                            <attributelist id="2302" addr="0144dff0">
                                <attribute name="type" value="bool" id="2303" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2304" addr="0144e050">
                <attributelist id="2305" addr="0144e050">
                    <parmlist id="2306" addr="0144e070">
                        <parm id="2307">
                            <attributelist id="2308" addr="0144e070">
                                <attribute name="type" value="r.bool" id="2309" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2310" addr="0144e190">
            <attributelist id="2311" addr="0144e190">
                <attribute name="code" value="lua_pushnumber(L,(lua_Number)(int)$1);SWIG_fail; " id="2312" addr="014622b0" />
                <attribute name="method" value="throws" id="2313" addr="014622b0" />
            </attributelist>

            <typemapitem id="2314" addr="0144e140">
                <attributelist id="2315" addr="0144e140">
                    <parmlist id="2316" addr="0144e160">
                        <parm id="2317">
                            <attributelist id="2318" addr="0144e160">
                                <attribute name="type" value="enum SWIGTYPE" id="2319" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2320" addr="0144e310">
            <attributelist id="2321" addr="0144e310">
                <attribute name="code" value="lua_pushstring(L,$1);SWIG_fail;" id="2322" addr="014622b0" />
                <attribute name="method" value="throws" id="2323" addr="014622b0" />
            </attributelist>

            <typemapitem id="2324" addr="0144e220">
                <attributelist id="2325" addr="0144e220">
                    <parmlist id="2326" addr="0144e240">
                        <parm id="2327">
                            <attributelist id="2328" addr="0144e240">
                                <attribute name="type" value="p.char" id="2329" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
            <typemapitem id="2330" addr="0144e2c0">
                <attributelist id="2331" addr="0144e2c0">
                    <parmlist id="2332" addr="0144e2e0">
                        <parm id="2333">
                            <attributelist id="2334" addr="0144e2e0">
                                <attribute name="type" value="p.q(const).char" id="2335" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2336" addr="0144e3f0">
            <attributelist id="2337" addr="0144e3f0">
                <attribute name="code" value="lua_pushlstring(L,&amp;$1,1);SWIG_fail;" id="2338" addr="014622b0" />
                <attribute name="method" value="throws" id="2339" addr="014622b0" />
            </attributelist>

            <typemapitem id="2340" addr="0144e3a0">
                <attributelist id="2341" addr="0144e3a0">
                    <parmlist id="2342" addr="0144e3c0">
                        <parm id="2343">
                            <attributelist id="2344" addr="0144e3c0">
                                <attribute name="type" value="char" id="2345" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2346" addr="0144e4d0">
            <attributelist id="2347" addr="0144e4d0">
                <attribute name="code" value="(void)$1; /* ignore it */&#10;lua_pushfstring(L,&quot;object exception:%s&quot;,SWIG_TypePrettyName($1_descriptor));&#10;SWIG_fail;" id="2348" addr="014622b0" />
                <attribute name="method" value="throws" id="2349" addr="014622b0" />
            </attributelist>

            <typemapitem id="2350" addr="0144e480">
                <attributelist id="2351" addr="0144e480">
                    <parmlist id="2352" addr="0144e4a0">
                        <parm id="2353">
                            <attributelist id="2354" addr="0144e4a0">
                                <attribute name="type" value="SWIGTYPE" id="2355" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2356" addr="0144e5f0">
            <attributelist id="2357" addr="0144e5f0">
                <attribute name="code" value="SWIG_NewPointerObj(L,(void *)new $1_ltype($1),$&amp;1_descriptor,1);&#10;SWIG_fail;" id="2358" addr="014622b0" />
                <attribute name="method" value="throws" id="2359" addr="014622b0" />
            </attributelist>

            <typemapitem id="2360" addr="0144e590">
                <attributelist id="2361" addr="0144e590">
                    <parmlist id="2362" addr="0144e5b0">
                        <parm id="2363">
                            <attributelist id="2364" addr="0144e5b0">
                                <attribute name="type" value="SWIGTYPE" id="2365" addr="014622b0" />
                                <attribute name="name" value="EXCEPTION_BY_VAL" id="2366" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
        <typemap id="2367" addr="0144e710">
            <attributelist id="2368" addr="0144e710">
                <attribute name="code" value="SWIG_NewPointerObj(L,(void *)new $basetype($1),$1_descriptor,1);&#10;SWIG_fail;" id="2369" addr="014622b0" />
                <attribute name="method" value="throws" id="2370" addr="014622b0" />
            </attributelist>

            <typemapitem id="2371" addr="0144e6b0">
                <attributelist id="2372" addr="0144e6b0">
                    <parmlist id="2373" addr="0144e6d0">
                        <parm id="2374">
                            <attributelist id="2375" addr="0144e6d0">
                                <attribute name="type" value="r.SWIGTYPE" id="2376" addr="014622b0" />
                                <attribute name="name" value="EXCEPTION_BY_VAL" id="2377" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </typemapitem>
        </typemap>
    </include>
    <include id="2378" addr="0144e7d0">
        <attributelist id="2379" addr="0144e7d0">
            <attribute name="name" value="C:\\flash\\src\\swig_glm.i" id="2380" addr="014622b0" />
            <attribute name="module" value="" id="2381" addr="0144e820" />
            <attribute name="options" value="0144e780" id="2382" addr="0144e780" />
        </attributelist>

        <module id="2383" addr="0144e7f0">
            <attributelist id="2384" addr="0144e7f0">
                <attribute name="name" value="glm" id="2385" addr="014622b0" />
            </attributelist>
         
        </module>
        <insert id="2386" addr="0144e840">
            <attributelist id="2387" addr="0144e840">
                <attribute name="code" value=" &#10;#define GLM_FORCE_XYZW_ONLY 1&#10;#define GLM_ENABLE_EXPERIMENTAL&#10;#include &lt;glm/vec3.hpp> // glm::vec3&#10;#include &lt;glm/vec4.hpp> // glm::vec4&#10;#include &lt;glm/mat4x4.hpp> // glm::mat4&#10;#include &lt;glm/ext/matrix_transform.hpp> // glm::translate, glm::rotate, glm::scale&#10;#include &lt;glm/ext/matrix_clip_space.hpp> // glm::perspective&#10;#include &lt;glm/ext/scalar_constants.hpp> // glm::pi&lt;float>()&#10;#include &lt;glm/gtc/quaternion.hpp> // glm::mat4&#10;#include &lt;glm/gtx/transform.hpp>&#10;" id="2388" addr="014622b0" />
            </attributelist>
         
        </insert>
        <namespace id="2389" addr="0144e890">
            <attributelist id="2390" addr="0144e890">
                <attribute name="name" value="glm" id="2391" addr="014622b0" />
                <attribute name="typescope" value="01453490" id="2392" addr="01453490" />
                <attribute name="symtab" value="0144e8e0" id="2393" addr="0144e8e0" />
                <attribute name="sym_name" value="glm" id="2394" addr="014622b0" />
                <attribute name="sym_overname" value="__SWIG_0" id="2395" addr="014622b0" />
                <attribute name="sym_symtab" value="01432500" id="2396" addr="01432500" />
            </attributelist>

            <template id="2397" addr="0144ea20">
                <attributelist id="2398" addr="0144ea20">
                    <attribute name="type" value="genType" id="2399" addr="014622b0" />
                    <attribute name="name" value="identity" id="2400" addr="014622b0" />
                    <templateparms id="2401" addr="0144e970">
                        <parm id="2402">
                            <attributelist id="2403" addr="0144e970">
                                <attribute name="type" value="typename genType" id="2404" addr="014622b0" />
                                <attribute name="name" value="genType" id="2405" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </templateparms>
                    <attribute name="sym_name" value="identity" id="2406" addr="014622b0" />
                    <attribute name="templatetype" value="cdecl" id="2407" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2408" addr="014622b0" />
                    <attribute name="decl" value="f()." id="2409" addr="014622b0" />
                    <attribute name="sym_typename" value="1" id="2410" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2411" addr="0144e8e0" />
                </attributelist>
             
            </template>
            <class id="2412" addr="0144eb50">
                <attributelist id="2413" addr="0144eb50">
                    <attribute name="typescope" value="01453690" id="2414" addr="01453690" />
                    <attribute name="has_constructor" value="1" id="2415" addr="014622b0" />
                    <attribute name="kind" value="class" id="2416" addr="014622b0" />
                    <attribute name="sym_name" value="uvec2" id="2417" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="2418" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::uvec2" id="2419" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2420" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="2421" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="2422" addr="014622b0" />
                    <attribute name="classtype" value="glm::uvec2" id="2423" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="2424" addr="014622b0" />
                    <attribute name="module" value="glm" id="2425" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="2426" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="2427" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="2428" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2429" addr="0144e8e0" />
                    <attribute name="symtab" value="0144ebf0" id="2430" addr="0144ebf0" />
                    <attribute name="name" value="glm::uvec2" id="2431" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="2432" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="2433" addr="014622b0" />
                </attributelist>

                <access id="2434" addr="0144ec50">
                    <attributelist id="2435" addr="0144ec50">
                        <attribute name="kind" value="public" id="2436" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="2437" addr="0144ece0">
                    <attributelist id="2438" addr="0144ece0">
                        <attribute name="wrap_parms" value="0145b9f0" id="2439" addr="0145b9f0" />
                        <attribute name="feature_except" value="0" id="2440" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2441" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="2442" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2443" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="2444" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2445" addr="014622b0" />
                        <attribute name="wrap_action" value="result =  ((arg1)->x);" id="2446" addr="014622b0" />
                        <attribute name="tmap_out" value="{&#10;  uint32_t * resultptr = new uint32_t(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;&#10;}" id="2447" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2448" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_uvec2_x_get" id="2449" addr="014622b0" />
                        <attribute name="decl" value="" id="2450" addr="014622b0" />
                        <attribute name="type" value="uint32_t" id="2451" addr="014622b0" />
                        <attribute name="access" value="public" id="2452" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ebf0" id="2453" addr="0144ebf0" />
                        <attribute name="name" value="x" id="2454" addr="014622b0" />
                        <attribute name="tmap_out_SWIGTYPE" value="1" id="2455" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2456" addr="0144ee20">
                    <attributelist id="2457" addr="0144ee20">
                        <attribute name="wrap_parms" value="0145cba0" id="2458" addr="0145cba0" />
                        <attribute name="feature_except" value="0" id="2459" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2460" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="2461" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2462" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="2463" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2464" addr="014622b0" />
                        <attribute name="wrap_action" value="result =  ((arg1)->y);" id="2465" addr="014622b0" />
                        <attribute name="tmap_out" value="{&#10;  uint32_t * resultptr = new uint32_t(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;&#10;}" id="2466" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2467" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_uvec2_y_get" id="2468" addr="014622b0" />
                        <attribute name="decl" value="" id="2469" addr="014622b0" />
                        <attribute name="type" value="uint32_t" id="2470" addr="014622b0" />
                        <attribute name="access" value="public" id="2471" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ebf0" id="2472" addr="0144ebf0" />
                        <attribute name="name" value="y" id="2473" addr="014622b0" />
                        <attribute name="tmap_out_SWIGTYPE" value="1" id="2474" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="2475" addr="0145af70">
                    <attributelist id="2476" addr="0145af70">
                        <attribute name="kind" value="public" id="2477" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="2478" addr="0145aec0">
                    <attributelist id="2479" addr="0145aec0">
                        <attribute name="sym_name" value="uvec2" id="2480" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="2481" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="2482" addr="014622b0" />
                        <attribute name="lua_name" value="uvec2" id="2483" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::uvec2 *)new glm::uvec2();" id="2484" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__uvec2,1); SWIG_arg++; " id="2485" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2486" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2487" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_uvec2" id="2488" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="2489" addr="014622b0" />
                        <attribute name="access" value="public" id="2490" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ebf0" id="2491" addr="0144ebf0" />
                        <attribute name="name" value="uvec2" id="2492" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="2493" addr="0145b090">
                    <attributelist id="2494" addr="0145b090">
                        <attribute name="kind" value="public" id="2495" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="2496" addr="0145aff0">
                    <attributelist id="2497" addr="0145aff0">
                        <attribute name="wrap_parms" value="0145d320" id="2498" addr="0145d320" />
                        <attribute name="view" value="destructorDeclaration" id="2499" addr="014622b0" />
                        <attribute name="sym_name" value="~uvec2" id="2500" addr="014622b0" />
                        <attribute name="lua_name" value="~uvec2" id="2501" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="2502" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="2503" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2504" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2505" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_uvec2" id="2506" addr="014622b0" />
                        <attribute name="access" value="public" id="2507" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ebf0" id="2508" addr="0144ebf0" />
                        <attribute name="name" value="~uvec2" id="2509" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="2510" addr="0144ef00">
                <attributelist id="2511" addr="0144ef00">
                    <attribute name="typescope" value="01453800" id="2512" addr="01453800" />
                    <attribute name="has_constructor" value="1" id="2513" addr="014622b0" />
                    <attribute name="kind" value="class" id="2514" addr="014622b0" />
                    <attribute name="sym_name" value="dvec2" id="2515" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="2516" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::dvec2" id="2517" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2518" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="2519" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="2520" addr="014622b0" />
                    <attribute name="classtype" value="glm::dvec2" id="2521" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="2522" addr="014622b0" />
                    <attribute name="module" value="glm" id="2523" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="2524" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="2525" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="2526" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2527" addr="0144e8e0" />
                    <attribute name="symtab" value="0144ef70" id="2528" addr="0144ef70" />
                    <attribute name="name" value="glm::dvec2" id="2529" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="2530" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="2531" addr="014622b0" />
                </attributelist>

                <access id="2532" addr="0144efb0">
                    <attributelist id="2533" addr="0144efb0">
                        <attribute name="kind" value="public" id="2534" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="2535" addr="0144f040">
                    <attributelist id="2536" addr="0144f040">
                        <attribute name="wrap_parms" value="0145e300" id="2537" addr="0145e300" />
                        <attribute name="feature_except" value="0" id="2538" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2539" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="2540" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2541" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="2542" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2543" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->x);" id="2544" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2545" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2546" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec2_x_get" id="2547" addr="014622b0" />
                        <attribute name="decl" value="" id="2548" addr="014622b0" />
                        <attribute name="type" value="double" id="2549" addr="014622b0" />
                        <attribute name="access" value="public" id="2550" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ef70" id="2551" addr="0144ef70" />
                        <attribute name="name" value="x" id="2552" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2553" addr="0144f140">
                    <attributelist id="2554" addr="0144f140">
                        <attribute name="wrap_parms" value="0145ed70" id="2555" addr="0145ed70" />
                        <attribute name="feature_except" value="0" id="2556" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2557" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="2558" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2559" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="2560" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2561" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->y);" id="2562" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2563" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2564" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec2_y_get" id="2565" addr="014622b0" />
                        <attribute name="decl" value="" id="2566" addr="014622b0" />
                        <attribute name="type" value="double" id="2567" addr="014622b0" />
                        <attribute name="access" value="public" id="2568" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ef70" id="2569" addr="0144ef70" />
                        <attribute name="name" value="y" id="2570" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="2571" addr="0145db80">
                    <attributelist id="2572" addr="0145db80">
                        <attribute name="kind" value="public" id="2573" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="2574" addr="0145daa0">
                    <attributelist id="2575" addr="0145daa0">
                        <attribute name="sym_name" value="dvec2" id="2576" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="2577" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="2578" addr="014622b0" />
                        <attribute name="lua_name" value="dvec2" id="2579" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dvec2 *)new glm::dvec2();" id="2580" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dvec2,1); SWIG_arg++; " id="2581" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2582" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2583" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_dvec2" id="2584" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="2585" addr="014622b0" />
                        <attribute name="access" value="public" id="2586" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ef70" id="2587" addr="0144ef70" />
                        <attribute name="name" value="dvec2" id="2588" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="2589" addr="0145dc60">
                    <attributelist id="2590" addr="0145dc60">
                        <attribute name="kind" value="public" id="2591" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="2592" addr="01454910">
                    <attributelist id="2593" addr="01454910">
                        <attribute name="wrap_parms" value="0145f640" id="2594" addr="0145f640" />
                        <attribute name="view" value="destructorDeclaration" id="2595" addr="014622b0" />
                        <attribute name="sym_name" value="~dvec2" id="2596" addr="014622b0" />
                        <attribute name="lua_name" value="~dvec2" id="2597" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="2598" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="2599" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2600" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2601" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_dvec2" id="2602" addr="014622b0" />
                        <attribute name="access" value="public" id="2603" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144ef70" id="2604" addr="0144ef70" />
                        <attribute name="name" value="~dvec2" id="2605" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="2606" addr="0144f220">
                <attributelist id="2607" addr="0144f220">
                    <attribute name="typescope" value="01453900" id="2608" addr="01453900" />
                    <attribute name="has_constructor" value="1" id="2609" addr="014622b0" />
                    <attribute name="kind" value="class" id="2610" addr="014622b0" />
                    <attribute name="sym_name" value="dvec3" id="2611" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="2612" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::dvec3" id="2613" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2614" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="2615" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="2616" addr="014622b0" />
                    <attribute name="classtype" value="glm::dvec3" id="2617" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="2618" addr="014622b0" />
                    <attribute name="module" value="glm" id="2619" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="2620" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="2621" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="2622" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2623" addr="0144e8e0" />
                    <attribute name="symtab" value="0144f290" id="2624" addr="0144f290" />
                    <attribute name="name" value="glm::dvec3" id="2625" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="2626" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="2627" addr="014622b0" />
                </attributelist>

                <access id="2628" addr="0144f2d0">
                    <attributelist id="2629" addr="0144f2d0">
                        <attribute name="kind" value="public" id="2630" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="2631" addr="0144f360">
                    <attributelist id="2632" addr="0144f360">
                        <attribute name="wrap_parms" value="01460210" id="2633" addr="01460210" />
                        <attribute name="feature_except" value="0" id="2634" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2635" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="2636" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2637" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="2638" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2639" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->x);" id="2640" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2641" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2642" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec3_x_get" id="2643" addr="014622b0" />
                        <attribute name="decl" value="" id="2644" addr="014622b0" />
                        <attribute name="type" value="double" id="2645" addr="014622b0" />
                        <attribute name="access" value="public" id="2646" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f290" id="2647" addr="0144f290" />
                        <attribute name="name" value="x" id="2648" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2649" addr="0144f440">
                    <attributelist id="2650" addr="0144f440">
                        <attribute name="wrap_parms" value="01460c20" id="2651" addr="01460c20" />
                        <attribute name="feature_except" value="0" id="2652" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2653" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="2654" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2655" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="2656" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2657" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->y);" id="2658" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2659" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2660" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec3_y_get" id="2661" addr="014622b0" />
                        <attribute name="decl" value="" id="2662" addr="014622b0" />
                        <attribute name="type" value="double" id="2663" addr="014622b0" />
                        <attribute name="access" value="public" id="2664" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f290" id="2665" addr="0144f290" />
                        <attribute name="name" value="y" id="2666" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2667" addr="0144f520">
                    <attributelist id="2668" addr="0144f520">
                        <attribute name="wrap_parms" value="014614b0" id="2669" addr="014614b0" />
                        <attribute name="feature_except" value="0" id="2670" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2671" addr="014622b0" />
                        <attribute name="sym_name" value="z" id="2672" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2673" addr="014622b0" />
                        <attribute name="lua_name" value="z" id="2674" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2675" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->z);" id="2676" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2677" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2678" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec3_z_get" id="2679" addr="014622b0" />
                        <attribute name="decl" value="" id="2680" addr="014622b0" />
                        <attribute name="type" value="double" id="2681" addr="014622b0" />
                        <attribute name="access" value="public" id="2682" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f290" id="2683" addr="0144f290" />
                        <attribute name="name" value="z" id="2684" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="2685" addr="0145fae0">
                    <attributelist id="2686" addr="0145fae0">
                        <attribute name="kind" value="public" id="2687" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="2688" addr="0145fa00">
                    <attributelist id="2689" addr="0145fa00">
                        <attribute name="sym_name" value="dvec3" id="2690" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="2691" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="2692" addr="014622b0" />
                        <attribute name="lua_name" value="dvec3" id="2693" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dvec3 *)new glm::dvec3();" id="2694" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dvec3,1); SWIG_arg++; " id="2695" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2696" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2697" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_dvec3" id="2698" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="2699" addr="014622b0" />
                        <attribute name="access" value="public" id="2700" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f290" id="2701" addr="0144f290" />
                        <attribute name="name" value="dvec3" id="2702" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="2703" addr="0145fbd0">
                    <attributelist id="2704" addr="0145fbd0">
                        <attribute name="kind" value="public" id="2705" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="2706" addr="01454950">
                    <attributelist id="2707" addr="01454950">
                        <attribute name="wrap_parms" value="01461d80" id="2708" addr="01461d80" />
                        <attribute name="view" value="destructorDeclaration" id="2709" addr="014622b0" />
                        <attribute name="sym_name" value="~dvec3" id="2710" addr="014622b0" />
                        <attribute name="lua_name" value="~dvec3" id="2711" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="2712" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="2713" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2714" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2715" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_dvec3" id="2716" addr="014622b0" />
                        <attribute name="access" value="public" id="2717" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f290" id="2718" addr="0144f290" />
                        <attribute name="name" value="~dvec3" id="2719" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="2720" addr="0144f600">
                <attributelist id="2721" addr="0144f600">
                    <attribute name="typescope" value="01453a00" id="2722" addr="01453a00" />
                    <attribute name="has_constructor" value="1" id="2723" addr="014622b0" />
                    <attribute name="kind" value="class" id="2724" addr="014622b0" />
                    <attribute name="sym_name" value="dvec4" id="2725" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="2726" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::dvec4" id="2727" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2728" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="2729" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="2730" addr="014622b0" />
                    <attribute name="classtype" value="glm::dvec4" id="2731" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="2732" addr="014622b0" />
                    <attribute name="module" value="glm" id="2733" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="2734" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="2735" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="2736" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2737" addr="0144e8e0" />
                    <attribute name="symtab" value="0144f670" id="2738" addr="0144f670" />
                    <attribute name="name" value="glm::dvec4" id="2739" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="2740" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="2741" addr="014622b0" />
                </attributelist>

                <access id="2742" addr="0144f6b0">
                    <attributelist id="2743" addr="0144f6b0">
                        <attribute name="kind" value="public" id="2744" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="2745" addr="0144f740">
                    <attributelist id="2746" addr="0144f740">
                        <attribute name="wrap_parms" value="01462950" id="2747" addr="01462950" />
                        <attribute name="feature_except" value="0" id="2748" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2749" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="2750" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2751" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="2752" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2753" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->x);" id="2754" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2755" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2756" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec4_x_get" id="2757" addr="014622b0" />
                        <attribute name="decl" value="" id="2758" addr="014622b0" />
                        <attribute name="type" value="double" id="2759" addr="014622b0" />
                        <attribute name="access" value="public" id="2760" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f670" id="2761" addr="0144f670" />
                        <attribute name="name" value="x" id="2762" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2763" addr="0144f820">
                    <attributelist id="2764" addr="0144f820">
                        <attribute name="wrap_parms" value="01463360" id="2765" addr="01463360" />
                        <attribute name="feature_except" value="0" id="2766" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2767" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="2768" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2769" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="2770" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2771" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->y);" id="2772" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2773" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2774" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec4_y_get" id="2775" addr="014622b0" />
                        <attribute name="decl" value="" id="2776" addr="014622b0" />
                        <attribute name="type" value="double" id="2777" addr="014622b0" />
                        <attribute name="access" value="public" id="2778" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f670" id="2779" addr="0144f670" />
                        <attribute name="name" value="y" id="2780" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2781" addr="0144f900">
                    <attributelist id="2782" addr="0144f900">
                        <attribute name="wrap_parms" value="01463bf0" id="2783" addr="01463bf0" />
                        <attribute name="feature_except" value="0" id="2784" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2785" addr="014622b0" />
                        <attribute name="sym_name" value="z" id="2786" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2787" addr="014622b0" />
                        <attribute name="lua_name" value="z" id="2788" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2789" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->z);" id="2790" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2791" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2792" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec4_z_get" id="2793" addr="014622b0" />
                        <attribute name="decl" value="" id="2794" addr="014622b0" />
                        <attribute name="type" value="double" id="2795" addr="014622b0" />
                        <attribute name="access" value="public" id="2796" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f670" id="2797" addr="0144f670" />
                        <attribute name="name" value="z" id="2798" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2799" addr="0144f9e0">
                    <attributelist id="2800" addr="0144f9e0">
                        <attribute name="wrap_parms" value="01464480" id="2801" addr="01464480" />
                        <attribute name="feature_except" value="0" id="2802" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2803" addr="014622b0" />
                        <attribute name="sym_name" value="w" id="2804" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2805" addr="014622b0" />
                        <attribute name="lua_name" value="w" id="2806" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2807" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->w);" id="2808" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2809" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2810" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dvec4_w_get" id="2811" addr="014622b0" />
                        <attribute name="decl" value="" id="2812" addr="014622b0" />
                        <attribute name="type" value="double" id="2813" addr="014622b0" />
                        <attribute name="access" value="public" id="2814" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f670" id="2815" addr="0144f670" />
                        <attribute name="name" value="w" id="2816" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="2817" addr="01462220">
                    <attributelist id="2818" addr="01462220">
                        <attribute name="kind" value="public" id="2819" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="2820" addr="01462140">
                    <attributelist id="2821" addr="01462140">
                        <attribute name="sym_name" value="dvec4" id="2822" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="2823" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="2824" addr="014622b0" />
                        <attribute name="lua_name" value="dvec4" id="2825" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dvec4 *)new glm::dvec4();" id="2826" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dvec4,1); SWIG_arg++; " id="2827" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2828" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2829" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_dvec4" id="2830" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="2831" addr="014622b0" />
                        <attribute name="access" value="public" id="2832" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f670" id="2833" addr="0144f670" />
                        <attribute name="name" value="dvec4" id="2834" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="2835" addr="01462310">
                    <attributelist id="2836" addr="01462310">
                        <attribute name="kind" value="public" id="2837" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="2838" addr="01454990">
                    <attributelist id="2839" addr="01454990">
                        <attribute name="wrap_parms" value="01464d50" id="2840" addr="01464d50" />
                        <attribute name="view" value="destructorDeclaration" id="2841" addr="014622b0" />
                        <attribute name="sym_name" value="~dvec4" id="2842" addr="014622b0" />
                        <attribute name="lua_name" value="~dvec4" id="2843" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="2844" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="2845" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2846" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2847" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_dvec4" id="2848" addr="014622b0" />
                        <attribute name="access" value="public" id="2849" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144f670" id="2850" addr="0144f670" />
                        <attribute name="name" value="~dvec4" id="2851" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="2852" addr="0144fac0">
                <attributelist id="2853" addr="0144fac0">
                    <attribute name="typescope" value="01453b00" id="2854" addr="01453b00" />
                    <attribute name="has_constructor" value="1" id="2855" addr="014622b0" />
                    <attribute name="kind" value="class" id="2856" addr="014622b0" />
                    <attribute name="sym_name" value="vec2" id="2857" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="2858" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::vec2" id="2859" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2860" addr="014622b0" />
                    <attribute name="allocate_public_constructor" value="1" id="2861" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="2862" addr="014622b0" />
                    <attribute name="classtype" value="glm::vec2" id="2863" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="2864" addr="014622b0" />
                    <attribute name="module" value="glm" id="2865" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="2866" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="2867" addr="014622b0" />
                    <attribute name="allocate_has_constructor" value="1" id="2868" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2869" addr="0144e8e0" />
                    <attribute name="symtab" value="0144fb30" id="2870" addr="0144fb30" />
                    <attribute name="name" value="glm::vec2" id="2871" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="2872" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="2873" addr="014622b0" />
                </attributelist>

                <access id="2874" addr="0144fb70">
                    <attributelist id="2875" addr="0144fb70">
                        <attribute name="kind" value="public" id="2876" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="2877" addr="0144fd10">
                    <attributelist id="2878" addr="0144fd10">
                        <attribute name="wrap_parms" value="01465700" id="2879" addr="01465700" />
                        <attribute name="sym_name" value="vec2" id="2880" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="2881" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="2882" addr="014622b0" />
                        <attribute name="lua_name" value="vec2" id="2883" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2884" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::vec2 *)new glm::vec2(arg1,arg2);" id="2885" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec2,1); SWIG_arg++; " id="2886" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2887" addr="014622b0" />
                        <attribute name="decl" value="f(float,float)." id="2888" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_vec2" id="2889" addr="014622b0" />
                        <attribute name="access" value="public" id="2890" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144fb30" id="2891" addr="0144fb30" />
                        <attribute name="name" value="vec2" id="2892" addr="014622b0" />
                        <parmlist id="2893" addr="0144fc20">
                            <parm id="2894">
                                <attributelist id="2895" addr="0144fc20">
                                    <attribute name="type" value="float" id="2896" addr="014622b0" />
                                    <attribute name="name" value="x" id="2897" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="2898">
                                <attributelist id="2899" addr="0144fcb0">
                                    <attribute name="type" value="float" id="2900" addr="014622b0" />
                                    <attribute name="name" value="y" id="2901" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </constructor>
                <cdecl id="2902" addr="0144fdf0">
                    <attributelist id="2903" addr="0144fdf0">
                        <attribute name="wrap_parms" value="01466050" id="2904" addr="01466050" />
                        <attribute name="feature_except" value="0" id="2905" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2906" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="2907" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2908" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="2909" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2910" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->x);" id="2911" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2912" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2913" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec2_x_get" id="2914" addr="014622b0" />
                        <attribute name="decl" value="" id="2915" addr="014622b0" />
                        <attribute name="type" value="float" id="2916" addr="014622b0" />
                        <attribute name="access" value="public" id="2917" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144fb30" id="2918" addr="0144fb30" />
                        <attribute name="name" value="x" id="2919" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="2920" addr="0144fef0">
                    <attributelist id="2921" addr="0144fef0">
                        <attribute name="wrap_parms" value="01466920" id="2922" addr="01466920" />
                        <attribute name="feature_except" value="0" id="2923" addr="014622b0" />
                        <attribute name="kind" value="variable" id="2924" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="2925" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="2926" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="2927" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2928" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->y);" id="2929" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="2930" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2931" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec2_y_get" id="2932" addr="014622b0" />
                        <attribute name="decl" value="" id="2933" addr="014622b0" />
                        <attribute name="type" value="float" id="2934" addr="014622b0" />
                        <attribute name="access" value="public" id="2935" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144fb30" id="2936" addr="0144fb30" />
                        <attribute name="name" value="y" id="2937" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="2938" addr="014651f0">
                    <attributelist id="2939" addr="014651f0">
                        <attribute name="kind" value="public" id="2940" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="2941" addr="01465110">
                    <attributelist id="2942" addr="01465110">
                        <attribute name="wrap_parms" value="014670e0" id="2943" addr="014670e0" />
                        <attribute name="view" value="destructorDeclaration" id="2944" addr="014622b0" />
                        <attribute name="sym_name" value="~vec2" id="2945" addr="014622b0" />
                        <attribute name="lua_name" value="~vec2" id="2946" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="2947" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="2948" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2949" addr="014622b0" />
                        <attribute name="decl" value="f()." id="2950" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_vec2" id="2951" addr="014622b0" />
                        <attribute name="access" value="public" id="2952" addr="014622b0" />
                        <attribute name="sym_symtab" value="0144fb30" id="2953" addr="0144fb30" />
                        <attribute name="name" value="~vec2" id="2954" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="2955" addr="0144ffd0">
                <attributelist id="2956" addr="0144ffd0">
                    <attribute name="typescope" value="01453c40" id="2957" addr="01453c40" />
                    <attribute name="has_constructor" value="1" id="2958" addr="014622b0" />
                    <attribute name="kind" value="class" id="2959" addr="014622b0" />
                    <attribute name="sym_name" value="vec3" id="2960" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="2961" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::vec3" id="2962" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="2963" addr="014622b0" />
                    <attribute name="allocate_public_constructor" value="1" id="2964" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="2965" addr="014622b0" />
                    <attribute name="classtype" value="glm::vec3" id="2966" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="2967" addr="014622b0" />
                    <attribute name="module" value="glm" id="2968" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="2969" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="2970" addr="014622b0" />
                    <attribute name="allocate_has_constructor" value="1" id="2971" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="2972" addr="0144e8e0" />
                    <attribute name="symtab" value="01450040" id="2973" addr="01450040" />
                    <attribute name="name" value="glm::vec3" id="2974" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="2975" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="2976" addr="014622b0" />
                </attributelist>

                <access id="2977" addr="01450080">
                    <attributelist id="2978" addr="01450080">
                        <attribute name="kind" value="public" id="2979" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="2980" addr="014502b0">
                    <attributelist id="2981" addr="014502b0">
                        <attribute name="wrap_parms" value="01467a40" id="2982" addr="01467a40" />
                        <attribute name="sym_name" value="vec3" id="2983" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="2984" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="2985" addr="014622b0" />
                        <attribute name="lua_name" value="vec3" id="2986" addr="014622b0" />
                        <attribute name="ismember" value="1" id="2987" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::vec3 *)new glm::vec3(arg1,arg2,arg3);" id="2988" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; " id="2989" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="2990" addr="014622b0" />
                        <attribute name="decl" value="f(float,float,float)." id="2991" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_vec3" id="2992" addr="014622b0" />
                        <attribute name="access" value="public" id="2993" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450040" id="2994" addr="01450040" />
                        <attribute name="name" value="vec3" id="2995" addr="014622b0" />
                        <parmlist id="2996" addr="01450130">
                            <parm id="2997">
                                <attributelist id="2998" addr="01450130">
                                    <attribute name="type" value="float" id="2999" addr="014622b0" />
                                    <attribute name="name" value="x" id="3000" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="3001">
                                <attributelist id="3002" addr="014501c0">
                                    <attribute name="type" value="float" id="3003" addr="014622b0" />
                                    <attribute name="name" value="y" id="3004" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="3005">
                                <attributelist id="3006" addr="01450250">
                                    <attribute name="type" value="float" id="3007" addr="014622b0" />
                                    <attribute name="name" value="z" id="3008" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </constructor>
                <cdecl id="3009" addr="01450380">
                    <attributelist id="3010" addr="01450380">
                        <attribute name="wrap_parms" value="014684f0" id="3011" addr="014684f0" />
                        <attribute name="feature_except" value="0" id="3012" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3013" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="3014" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3015" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="3016" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3017" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->x);" id="3018" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3019" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3020" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec3_x_get" id="3021" addr="014622b0" />
                        <attribute name="decl" value="" id="3022" addr="014622b0" />
                        <attribute name="type" value="float" id="3023" addr="014622b0" />
                        <attribute name="access" value="public" id="3024" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450040" id="3025" addr="01450040" />
                        <attribute name="name" value="x" id="3026" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3027" addr="01450460">
                    <attributelist id="3028" addr="01450460">
                        <attribute name="wrap_parms" value="01468dc0" id="3029" addr="01468dc0" />
                        <attribute name="feature_except" value="0" id="3030" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3031" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="3032" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3033" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="3034" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3035" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->y);" id="3036" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3037" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3038" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec3_y_get" id="3039" addr="014622b0" />
                        <attribute name="decl" value="" id="3040" addr="014622b0" />
                        <attribute name="type" value="float" id="3041" addr="014622b0" />
                        <attribute name="access" value="public" id="3042" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450040" id="3043" addr="01450040" />
                        <attribute name="name" value="y" id="3044" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3045" addr="01450540">
                    <attributelist id="3046" addr="01450540">
                        <attribute name="wrap_parms" value="01469650" id="3047" addr="01469650" />
                        <attribute name="feature_except" value="0" id="3048" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3049" addr="014622b0" />
                        <attribute name="sym_name" value="z" id="3050" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3051" addr="014622b0" />
                        <attribute name="lua_name" value="z" id="3052" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3053" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->z);" id="3054" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3055" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3056" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec3_z_get" id="3057" addr="014622b0" />
                        <attribute name="decl" value="" id="3058" addr="014622b0" />
                        <attribute name="type" value="float" id="3059" addr="014622b0" />
                        <attribute name="access" value="public" id="3060" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450040" id="3061" addr="01450040" />
                        <attribute name="name" value="z" id="3062" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="3063" addr="01467530">
                    <attributelist id="3064" addr="01467530">
                        <attribute name="kind" value="public" id="3065" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3066" addr="01467450">
                    <attributelist id="3067" addr="01467450">
                        <attribute name="wrap_parms" value="01469e10" id="3068" addr="01469e10" />
                        <attribute name="view" value="destructorDeclaration" id="3069" addr="014622b0" />
                        <attribute name="sym_name" value="~vec3" id="3070" addr="014622b0" />
                        <attribute name="lua_name" value="~vec3" id="3071" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3072" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3073" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3074" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3075" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_vec3" id="3076" addr="014622b0" />
                        <attribute name="access" value="public" id="3077" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450040" id="3078" addr="01450040" />
                        <attribute name="name" value="~vec3" id="3079" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="3080" addr="01450620">
                <attributelist id="3081" addr="01450620">
                    <attribute name="typescope" value="01453d80" id="3082" addr="01453d80" />
                    <attribute name="has_constructor" value="1" id="3083" addr="014622b0" />
                    <attribute name="kind" value="class" id="3084" addr="014622b0" />
                    <attribute name="sym_name" value="vec4" id="3085" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3086" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::vec4" id="3087" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3088" addr="014622b0" />
                    <attribute name="allocate_public_constructor" value="1" id="3089" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3090" addr="014622b0" />
                    <attribute name="classtype" value="glm::vec4" id="3091" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3092" addr="014622b0" />
                    <attribute name="module" value="glm" id="3093" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3094" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3095" addr="014622b0" />
                    <attribute name="allocate_has_constructor" value="1" id="3096" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3097" addr="0144e8e0" />
                    <attribute name="symtab" value="01450690" id="3098" addr="01450690" />
                    <attribute name="name" value="glm::vec4" id="3099" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3100" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3101" addr="014622b0" />
                </attributelist>

                <access id="3102" addr="014506d0">
                    <attributelist id="3103" addr="014506d0">
                        <attribute name="kind" value="public" id="3104" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3105" addr="01450990">
                    <attributelist id="3106" addr="01450990">
                        <attribute name="wrap_parms" value="0146a770" id="3107" addr="0146a770" />
                        <attribute name="sym_name" value="vec4" id="3108" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3109" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3110" addr="014622b0" />
                        <attribute name="lua_name" value="vec4" id="3111" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3112" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::vec4 *)new glm::vec4(arg1,arg2,arg3,arg4);" id="3113" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec4,1); SWIG_arg++; " id="3114" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3115" addr="014622b0" />
                        <attribute name="decl" value="f(float,float,float,float)." id="3116" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_vec4" id="3117" addr="014622b0" />
                        <attribute name="access" value="public" id="3118" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450690" id="3119" addr="01450690" />
                        <attribute name="name" value="vec4" id="3120" addr="014622b0" />
                        <parmlist id="3121" addr="01450780">
                            <parm id="3122">
                                <attributelist id="3123" addr="01450780">
                                    <attribute name="type" value="float" id="3124" addr="014622b0" />
                                    <attribute name="name" value="x" id="3125" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="3126">
                                <attributelist id="3127" addr="01450810">
                                    <attribute name="type" value="float" id="3128" addr="014622b0" />
                                    <attribute name="name" value="y" id="3129" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="3130">
                                <attributelist id="3131" addr="014508a0">
                                    <attribute name="type" value="float" id="3132" addr="014622b0" />
                                    <attribute name="name" value="z" id="3133" addr="014622b0" />
                                </attributelist>
                            </parm>
                            <parm id="3134">
                                <attributelist id="3135" addr="01450930">
                                    <attribute name="type" value="float" id="3136" addr="014622b0" />
                                    <attribute name="name" value="w" id="3137" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </constructor>
                <cdecl id="3138" addr="01450a60">
                    <attributelist id="3139" addr="01450a60">
                        <attribute name="wrap_parms" value="0146b450" id="3140" addr="0146b450" />
                        <attribute name="feature_except" value="0" id="3141" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3142" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="3143" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3144" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="3145" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3146" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->x);" id="3147" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3148" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3149" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec4_x_get" id="3150" addr="014622b0" />
                        <attribute name="decl" value="" id="3151" addr="014622b0" />
                        <attribute name="type" value="float" id="3152" addr="014622b0" />
                        <attribute name="access" value="public" id="3153" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450690" id="3154" addr="01450690" />
                        <attribute name="name" value="x" id="3155" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3156" addr="01450b40">
                    <attributelist id="3157" addr="01450b40">
                        <attribute name="wrap_parms" value="0146bd20" id="3158" addr="0146bd20" />
                        <attribute name="feature_except" value="0" id="3159" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3160" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="3161" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3162" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="3163" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3164" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->y);" id="3165" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3166" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3167" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec4_y_get" id="3168" addr="014622b0" />
                        <attribute name="decl" value="" id="3169" addr="014622b0" />
                        <attribute name="type" value="float" id="3170" addr="014622b0" />
                        <attribute name="access" value="public" id="3171" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450690" id="3172" addr="01450690" />
                        <attribute name="name" value="y" id="3173" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3174" addr="01450c20">
                    <attributelist id="3175" addr="01450c20">
                        <attribute name="wrap_parms" value="0146c5b0" id="3176" addr="0146c5b0" />
                        <attribute name="feature_except" value="0" id="3177" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3178" addr="014622b0" />
                        <attribute name="sym_name" value="z" id="3179" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3180" addr="014622b0" />
                        <attribute name="lua_name" value="z" id="3181" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3182" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->z);" id="3183" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3184" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3185" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec4_z_get" id="3186" addr="014622b0" />
                        <attribute name="decl" value="" id="3187" addr="014622b0" />
                        <attribute name="type" value="float" id="3188" addr="014622b0" />
                        <attribute name="access" value="public" id="3189" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450690" id="3190" addr="01450690" />
                        <attribute name="name" value="z" id="3191" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3192" addr="01450d00">
                    <attributelist id="3193" addr="01450d00">
                        <attribute name="wrap_parms" value="0146ce40" id="3194" addr="0146ce40" />
                        <attribute name="feature_except" value="0" id="3195" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3196" addr="014622b0" />
                        <attribute name="sym_name" value="w" id="3197" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3198" addr="014622b0" />
                        <attribute name="lua_name" value="w" id="3199" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3200" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->w);" id="3201" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3202" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3203" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_vec4_w_get" id="3204" addr="014622b0" />
                        <attribute name="decl" value="" id="3205" addr="014622b0" />
                        <attribute name="type" value="float" id="3206" addr="014622b0" />
                        <attribute name="access" value="public" id="3207" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450690" id="3208" addr="01450690" />
                        <attribute name="name" value="w" id="3209" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="3210" addr="0146a260">
                    <attributelist id="3211" addr="0146a260">
                        <attribute name="kind" value="public" id="3212" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3213" addr="0146a180">
                    <attributelist id="3214" addr="0146a180">
                        <attribute name="wrap_parms" value="0146d600" id="3215" addr="0146d600" />
                        <attribute name="view" value="destructorDeclaration" id="3216" addr="014622b0" />
                        <attribute name="sym_name" value="~vec4" id="3217" addr="014622b0" />
                        <attribute name="lua_name" value="~vec4" id="3218" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3219" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3220" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3221" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3222" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_vec4" id="3223" addr="014622b0" />
                        <attribute name="access" value="public" id="3224" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450690" id="3225" addr="01450690" />
                        <attribute name="name" value="~vec4" id="3226" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <typemap id="3227" addr="01450f20">
                <attributelist id="3228" addr="01450f20">
                    <attribute name="code" value="&#10;public dvec4 this[int i] => idx(i);&#10;" id="3229" addr="014622b0" />
                    <attribute name="method" value="cscode" id="3230" addr="014622b0" />
                </attributelist>

                <typemapitem id="3231" addr="01450ed0">
                    <attributelist id="3232" addr="01450ed0">
                        <parmlist id="3233" addr="01450ef0">
                            <parm id="3234">
                                <attributelist id="3235" addr="01450ef0">
                                    <attribute name="type" value="glm::dmat4x4" id="3236" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <class id="3237" addr="01450f70">
                <attributelist id="3238" addr="01450f70">
                    <attribute name="typescope" value="01453ec0" id="3239" addr="01453ec0" />
                    <attribute name="has_constructor" value="1" id="3240" addr="014622b0" />
                    <attribute name="kind" value="class" id="3241" addr="014622b0" />
                    <attribute name="sym_name" value="dmat4x4" id="3242" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3243" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::dmat4x4" id="3244" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3245" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="3246" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3247" addr="014622b0" />
                    <attribute name="classtype" value="glm::dmat4x4" id="3248" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3249" addr="014622b0" />
                    <attribute name="module" value="glm" id="3250" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3251" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3252" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="3253" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3254" addr="0144e8e0" />
                    <attribute name="symtab" value="01450fe0" id="3255" addr="01450fe0" />
                    <attribute name="name" value="glm::dmat4x4" id="3256" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3257" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3258" addr="014622b0" />
                </attributelist>

                <access id="3259" addr="01451020">
                    <attributelist id="3260" addr="01451020">
                        <attribute name="kind" value="public" id="3261" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="3262" addr="01451170">
                    <attributelist id="3263" addr="01451170">
                        <attribute name="wrap_parms" value="0146e190" id="3264" addr="0146e190" />
                        <attribute name="qualifier" value="q(const)." id="3265" addr="014622b0" />
                        <attribute name="memberfunction" value="1" id="3266" addr="014622b0" />
                        <attribute name="kind" value="function" id="3267" addr="014622b0" />
                        <attribute name="sym_name" value="idx" id="3268" addr="014622b0" />
                        <attribute name="view" value="memberfunctionHandler" id="3269" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3270" addr="014622b0" />
                        <attribute name="lua_name" value="idx" id="3271" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dvec4 *) &amp;((glm::dmat4x4 const *)arg1)->operator [](arg2);" id="3272" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dvec4,0); SWIG_arg++; " id="3273" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3274" addr="014622b0" />
                        <attribute name="decl" value="q(const).f(int).r." id="3275" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dmat4x4_idx" id="3276" addr="014622b0" />
                        <attribute name="type" value="q(const).glm::dvec4" id="3277" addr="014622b0" />
                        <attribute name="access" value="public" id="3278" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450fe0" id="3279" addr="01450fe0" />
                        <attribute name="name" value="operator []" id="3280" addr="014622b0" />
                        <attribute name="doc_low_name" value="dmat4x4_idx" id="3281" addr="014622b0" />
                        <attribute name="doc_high_name" value="idx" id="3282" addr="014622b0" />
                        <parmlist id="3283" addr="01451100">
                            <parm id="3284">
                                <attributelist id="3285" addr="01451100">
                                    <attribute name="type" value="int" id="3286" addr="014622b0" />
                                    <attribute name="name" value="i" id="3287" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </cdecl>
                <access id="3288" addr="0146dac0">
                    <attributelist id="3289" addr="0146dac0">
                        <attribute name="kind" value="public" id="3290" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3291" addr="0146da30">
                    <attributelist id="3292" addr="0146da30">
                        <attribute name="sym_name" value="dmat4x4" id="3293" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3294" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3295" addr="014622b0" />
                        <attribute name="lua_name" value="dmat4x4" id="3296" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dmat4x4 *)new glm::dmat4x4();" id="3297" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dmat4x4,1); SWIG_arg++; " id="3298" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3299" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3300" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_dmat4x4" id="3301" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="3302" addr="014622b0" />
                        <attribute name="access" value="public" id="3303" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450fe0" id="3304" addr="01450fe0" />
                        <attribute name="name" value="dmat4x4" id="3305" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="3306" addr="0146dba0">
                    <attributelist id="3307" addr="0146dba0">
                        <attribute name="kind" value="public" id="3308" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3309" addr="01454ad0">
                    <attributelist id="3310" addr="01454ad0">
                        <attribute name="wrap_parms" value="0146ed90" id="3311" addr="0146ed90" />
                        <attribute name="view" value="destructorDeclaration" id="3312" addr="014622b0" />
                        <attribute name="sym_name" value="~dmat4x4" id="3313" addr="014622b0" />
                        <attribute name="lua_name" value="~dmat4x4" id="3314" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3315" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3316" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3317" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3318" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_dmat4x4" id="3319" addr="014622b0" />
                        <attribute name="access" value="public" id="3320" addr="014622b0" />
                        <attribute name="sym_symtab" value="01450fe0" id="3321" addr="01450fe0" />
                        <attribute name="name" value="~dmat4x4" id="3322" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <typemap id="3323" addr="014513a0">
                <attributelist id="3324" addr="014513a0">
                    <attribute name="code" value="&#10;public dvec3 this[int i] => idx(i);&#10;" id="3325" addr="014622b0" />
                    <attribute name="method" value="cscode" id="3326" addr="014622b0" />
                </attributelist>

                <typemapitem id="3327" addr="01451350">
                    <attributelist id="3328" addr="01451350">
                        <parmlist id="3329" addr="01451370">
                            <parm id="3330">
                                <attributelist id="3331" addr="01451370">
                                    <attribute name="type" value="glm::dmat3x3" id="3332" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <class id="3333" addr="014513f0">
                <attributelist id="3334" addr="014513f0">
                    <attribute name="typescope" value="01454020" id="3335" addr="01454020" />
                    <attribute name="has_constructor" value="1" id="3336" addr="014622b0" />
                    <attribute name="kind" value="class" id="3337" addr="014622b0" />
                    <attribute name="sym_name" value="dmat3x3" id="3338" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3339" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::dmat3x3" id="3340" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3341" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="3342" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3343" addr="014622b0" />
                    <attribute name="classtype" value="glm::dmat3x3" id="3344" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3345" addr="014622b0" />
                    <attribute name="module" value="glm" id="3346" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3347" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3348" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="3349" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3350" addr="0144e8e0" />
                    <attribute name="symtab" value="01451460" id="3351" addr="01451460" />
                    <attribute name="name" value="glm::dmat3x3" id="3352" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3353" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3354" addr="014622b0" />
                </attributelist>

                <access id="3355" addr="014514a0">
                    <attributelist id="3356" addr="014514a0">
                        <attribute name="kind" value="public" id="3357" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="3358" addr="014515f0">
                    <attributelist id="3359" addr="014515f0">
                        <attribute name="wrap_parms" value="0146fa00" id="3360" addr="0146fa00" />
                        <attribute name="qualifier" value="q(const)." id="3361" addr="014622b0" />
                        <attribute name="memberfunction" value="1" id="3362" addr="014622b0" />
                        <attribute name="kind" value="function" id="3363" addr="014622b0" />
                        <attribute name="sym_name" value="idx" id="3364" addr="014622b0" />
                        <attribute name="view" value="memberfunctionHandler" id="3365" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3366" addr="014622b0" />
                        <attribute name="lua_name" value="idx" id="3367" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dvec3 *) &amp;((glm::dmat3x3 const *)arg1)->operator [](arg2);" id="3368" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dvec3,0); SWIG_arg++; " id="3369" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3370" addr="014622b0" />
                        <attribute name="decl" value="q(const).f(int).r." id="3371" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dmat3x3_idx" id="3372" addr="014622b0" />
                        <attribute name="type" value="q(const).glm::dvec3" id="3373" addr="014622b0" />
                        <attribute name="access" value="public" id="3374" addr="014622b0" />
                        <attribute name="sym_symtab" value="01451460" id="3375" addr="01451460" />
                        <attribute name="name" value="operator []" id="3376" addr="014622b0" />
                        <attribute name="doc_low_name" value="dmat3x3_idx" id="3377" addr="014622b0" />
                        <attribute name="doc_high_name" value="idx" id="3378" addr="014622b0" />
                        <parmlist id="3379" addr="01451580">
                            <parm id="3380">
                                <attributelist id="3381" addr="01451580">
                                    <attribute name="type" value="int" id="3382" addr="014622b0" />
                                    <attribute name="name" value="i" id="3383" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </cdecl>
                <access id="3384" addr="0146f380">
                    <attributelist id="3385" addr="0146f380">
                        <attribute name="kind" value="public" id="3386" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3387" addr="0146f2a0">
                    <attributelist id="3388" addr="0146f2a0">
                        <attribute name="sym_name" value="dmat3x3" id="3389" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3390" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3391" addr="014622b0" />
                        <attribute name="lua_name" value="dmat3x3" id="3392" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dmat3x3 *)new glm::dmat3x3();" id="3393" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dmat3x3,1); SWIG_arg++; " id="3394" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3395" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3396" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_dmat3x3" id="3397" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="3398" addr="014622b0" />
                        <attribute name="access" value="public" id="3399" addr="014622b0" />
                        <attribute name="sym_symtab" value="01451460" id="3400" addr="01451460" />
                        <attribute name="name" value="dmat3x3" id="3401" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="3402" addr="0146f460">
                    <attributelist id="3403" addr="0146f460">
                        <attribute name="kind" value="public" id="3404" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3405" addr="01454b10">
                    <attributelist id="3406" addr="01454b10">
                        <attribute name="wrap_parms" value="01470510" id="3407" addr="01470510" />
                        <attribute name="view" value="destructorDeclaration" id="3408" addr="014622b0" />
                        <attribute name="sym_name" value="~dmat3x3" id="3409" addr="014622b0" />
                        <attribute name="lua_name" value="~dmat3x3" id="3410" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3411" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3412" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3413" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3414" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_dmat3x3" id="3415" addr="014622b0" />
                        <attribute name="access" value="public" id="3416" addr="014622b0" />
                        <attribute name="sym_symtab" value="01451460" id="3417" addr="01451460" />
                        <attribute name="name" value="~dmat3x3" id="3418" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <typemap id="3419" addr="01451820">
                <attributelist id="3420" addr="01451820">
                    <attribute name="code" value="&#10;public vec3 this[int i] => idx(i);&#10;" id="3421" addr="014622b0" />
                    <attribute name="method" value="cscode" id="3422" addr="014622b0" />
                </attributelist>

                <typemapitem id="3423" addr="014517d0">
                    <attributelist id="3424" addr="014517d0">
                        <parmlist id="3425" addr="014517f0">
                            <parm id="3426">
                                <attributelist id="3427" addr="014517f0">
                                    <attribute name="type" value="glm::mat3x3" id="3428" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <class id="3429" addr="01451870">
                <attributelist id="3430" addr="01451870">
                    <attribute name="typescope" value="01454180" id="3431" addr="01454180" />
                    <attribute name="has_constructor" value="1" id="3432" addr="014622b0" />
                    <attribute name="kind" value="class" id="3433" addr="014622b0" />
                    <attribute name="sym_name" value="mat3x3" id="3434" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3435" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::mat3x3" id="3436" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3437" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="3438" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3439" addr="014622b0" />
                    <attribute name="classtype" value="glm::mat3x3" id="3440" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3441" addr="014622b0" />
                    <attribute name="module" value="glm" id="3442" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3443" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3444" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="3445" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3446" addr="0144e8e0" />
                    <attribute name="symtab" value="014518e0" id="3447" addr="014518e0" />
                    <attribute name="name" value="glm::mat3x3" id="3448" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3449" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3450" addr="014622b0" />
                </attributelist>

                <access id="3451" addr="01451920">
                    <attributelist id="3452" addr="01451920">
                        <attribute name="kind" value="public" id="3453" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="3454" addr="01451a70">
                    <attributelist id="3455" addr="01451a70">
                        <attribute name="wrap_parms" value="01471180" id="3456" addr="01471180" />
                        <attribute name="qualifier" value="q(const)." id="3457" addr="014622b0" />
                        <attribute name="memberfunction" value="1" id="3458" addr="014622b0" />
                        <attribute name="kind" value="function" id="3459" addr="014622b0" />
                        <attribute name="sym_name" value="idx" id="3460" addr="014622b0" />
                        <attribute name="view" value="memberfunctionHandler" id="3461" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3462" addr="014622b0" />
                        <attribute name="lua_name" value="idx" id="3463" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::vec3 *) &amp;((glm::mat3x3 const *)arg1)->operator [](arg2);" id="3464" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,0); SWIG_arg++; " id="3465" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3466" addr="014622b0" />
                        <attribute name="decl" value="q(const).f(int).r." id="3467" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_mat3x3_idx" id="3468" addr="014622b0" />
                        <attribute name="type" value="q(const).glm::vec3" id="3469" addr="014622b0" />
                        <attribute name="access" value="public" id="3470" addr="014622b0" />
                        <attribute name="sym_symtab" value="014518e0" id="3471" addr="014518e0" />
                        <attribute name="name" value="operator []" id="3472" addr="014622b0" />
                        <attribute name="doc_low_name" value="mat3x3_idx" id="3473" addr="014622b0" />
                        <attribute name="doc_high_name" value="idx" id="3474" addr="014622b0" />
                        <parmlist id="3475" addr="01451a00">
                            <parm id="3476">
                                <attributelist id="3477" addr="01451a00">
                                    <attribute name="type" value="int" id="3478" addr="014622b0" />
                                    <attribute name="name" value="i" id="3479" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </cdecl>
                <access id="3480" addr="01470b00">
                    <attributelist id="3481" addr="01470b00">
                        <attribute name="kind" value="public" id="3482" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3483" addr="01470a20">
                    <attributelist id="3484" addr="01470a20">
                        <attribute name="sym_name" value="mat3x3" id="3485" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3486" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3487" addr="014622b0" />
                        <attribute name="lua_name" value="mat3x3" id="3488" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::mat3x3 *)new glm::mat3x3();" id="3489" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__mat3x3,1); SWIG_arg++; " id="3490" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3491" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3492" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_mat3x3" id="3493" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="3494" addr="014622b0" />
                        <attribute name="access" value="public" id="3495" addr="014622b0" />
                        <attribute name="sym_symtab" value="014518e0" id="3496" addr="014518e0" />
                        <attribute name="name" value="mat3x3" id="3497" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="3498" addr="01470be0">
                    <attributelist id="3499" addr="01470be0">
                        <attribute name="kind" value="public" id="3500" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3501" addr="01454b50">
                    <attributelist id="3502" addr="01454b50">
                        <attribute name="wrap_parms" value="01471c90" id="3503" addr="01471c90" />
                        <attribute name="view" value="destructorDeclaration" id="3504" addr="014622b0" />
                        <attribute name="sym_name" value="~mat3x3" id="3505" addr="014622b0" />
                        <attribute name="lua_name" value="~mat3x3" id="3506" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3507" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3508" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3509" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3510" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_mat3x3" id="3511" addr="014622b0" />
                        <attribute name="access" value="public" id="3512" addr="014622b0" />
                        <attribute name="sym_symtab" value="014518e0" id="3513" addr="014518e0" />
                        <attribute name="name" value="~mat3x3" id="3514" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <typemap id="3515" addr="01451ca0">
                <attributelist id="3516" addr="01451ca0">
                    <attribute name="code" value="&#10;public vec4 this[int i] => idx(i);&#10;" id="3517" addr="014622b0" />
                    <attribute name="method" value="cscode" id="3518" addr="014622b0" />
                </attributelist>

                <typemapitem id="3519" addr="01451c50">
                    <attributelist id="3520" addr="01451c50">
                        <parmlist id="3521" addr="01451c70">
                            <parm id="3522">
                                <attributelist id="3523" addr="01451c70">
                                    <attribute name="type" value="glm::mat4x4" id="3524" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </typemapitem>
            </typemap>
            <class id="3525" addr="01451cf0">
                <attributelist id="3526" addr="01451cf0">
                    <attribute name="typescope" value="014542e0" id="3527" addr="014542e0" />
                    <attribute name="has_constructor" value="1" id="3528" addr="014622b0" />
                    <attribute name="kind" value="class" id="3529" addr="014622b0" />
                    <attribute name="sym_name" value="mat4x4" id="3530" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3531" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::mat4x4" id="3532" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3533" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="3534" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3535" addr="014622b0" />
                    <attribute name="classtype" value="glm::mat4x4" id="3536" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3537" addr="014622b0" />
                    <attribute name="module" value="glm" id="3538" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3539" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3540" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="3541" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3542" addr="0144e8e0" />
                    <attribute name="symtab" value="01451d60" id="3543" addr="01451d60" />
                    <attribute name="name" value="glm::mat4x4" id="3544" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3545" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3546" addr="014622b0" />
                </attributelist>

                <access id="3547" addr="01451da0">
                    <attributelist id="3548" addr="01451da0">
                        <attribute name="kind" value="public" id="3549" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="3550" addr="01451ef0">
                    <attributelist id="3551" addr="01451ef0">
                        <attribute name="wrap_parms" value="01472900" id="3552" addr="01472900" />
                        <attribute name="qualifier" value="q(const)." id="3553" addr="014622b0" />
                        <attribute name="memberfunction" value="1" id="3554" addr="014622b0" />
                        <attribute name="kind" value="function" id="3555" addr="014622b0" />
                        <attribute name="sym_name" value="idx" id="3556" addr="014622b0" />
                        <attribute name="view" value="memberfunctionHandler" id="3557" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3558" addr="014622b0" />
                        <attribute name="lua_name" value="idx" id="3559" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::vec4 *) &amp;((glm::mat4x4 const *)arg1)->operator [](arg2);" id="3560" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec4,0); SWIG_arg++; " id="3561" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3562" addr="014622b0" />
                        <attribute name="decl" value="q(const).f(int).r." id="3563" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_mat4x4_idx" id="3564" addr="014622b0" />
                        <attribute name="type" value="q(const).glm::vec4" id="3565" addr="014622b0" />
                        <attribute name="access" value="public" id="3566" addr="014622b0" />
                        <attribute name="sym_symtab" value="01451d60" id="3567" addr="01451d60" />
                        <attribute name="name" value="operator []" id="3568" addr="014622b0" />
                        <attribute name="doc_low_name" value="mat4x4_idx" id="3569" addr="014622b0" />
                        <attribute name="doc_high_name" value="idx" id="3570" addr="014622b0" />
                        <parmlist id="3571" addr="01451e80">
                            <parm id="3572">
                                <attributelist id="3573" addr="01451e80">
                                    <attribute name="type" value="int" id="3574" addr="014622b0" />
                                    <attribute name="name" value="i" id="3575" addr="014622b0" />
                                </attributelist>
                            </parm>
                        </parmlist>
                    </attributelist>
                 
                </cdecl>
                <access id="3576" addr="01472280">
                    <attributelist id="3577" addr="01472280">
                        <attribute name="kind" value="public" id="3578" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3579" addr="014721a0">
                    <attributelist id="3580" addr="014721a0">
                        <attribute name="sym_name" value="mat4x4" id="3581" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3582" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3583" addr="014622b0" />
                        <attribute name="lua_name" value="mat4x4" id="3584" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::mat4x4 *)new glm::mat4x4();" id="3585" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__mat4x4,1); SWIG_arg++; " id="3586" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3587" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3588" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_mat4x4" id="3589" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="3590" addr="014622b0" />
                        <attribute name="access" value="public" id="3591" addr="014622b0" />
                        <attribute name="sym_symtab" value="01451d60" id="3592" addr="01451d60" />
                        <attribute name="name" value="mat4x4" id="3593" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="3594" addr="01472360">
                    <attributelist id="3595" addr="01472360">
                        <attribute name="kind" value="public" id="3596" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3597" addr="01454b90">
                    <attributelist id="3598" addr="01454b90">
                        <attribute name="wrap_parms" value="01473410" id="3599" addr="01473410" />
                        <attribute name="view" value="destructorDeclaration" id="3600" addr="014622b0" />
                        <attribute name="sym_name" value="~mat4x4" id="3601" addr="014622b0" />
                        <attribute name="lua_name" value="~mat4x4" id="3602" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3603" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3604" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3605" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3606" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_mat4x4" id="3607" addr="014622b0" />
                        <attribute name="access" value="public" id="3608" addr="014622b0" />
                        <attribute name="sym_symtab" value="01451d60" id="3609" addr="01451d60" />
                        <attribute name="name" value="~mat4x4" id="3610" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="3611" addr="01451fe0">
                <attributelist id="3612" addr="01451fe0">
                    <attribute name="typescope" value="01454440" id="3613" addr="01454440" />
                    <attribute name="has_constructor" value="1" id="3614" addr="014622b0" />
                    <attribute name="kind" value="class" id="3615" addr="014622b0" />
                    <attribute name="sym_name" value="quat" id="3616" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3617" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::quat" id="3618" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3619" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="3620" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3621" addr="014622b0" />
                    <attribute name="classtype" value="glm::quat" id="3622" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3623" addr="014622b0" />
                    <attribute name="module" value="glm" id="3624" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3625" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3626" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="3627" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3628" addr="0144e8e0" />
                    <attribute name="symtab" value="01452050" id="3629" addr="01452050" />
                    <attribute name="name" value="glm::quat" id="3630" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3631" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3632" addr="014622b0" />
                </attributelist>

                <access id="3633" addr="01452090">
                    <attributelist id="3634" addr="01452090">
                        <attribute name="kind" value="public" id="3635" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="3636" addr="01452120">
                    <attributelist id="3637" addr="01452120">
                        <attribute name="wrap_parms" value="014740e0" id="3638" addr="014740e0" />
                        <attribute name="feature_except" value="0" id="3639" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3640" addr="014622b0" />
                        <attribute name="sym_name" value="w" id="3641" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3642" addr="014622b0" />
                        <attribute name="lua_name" value="w" id="3643" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3644" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->w);" id="3645" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3646" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3647" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_quat_w_get" id="3648" addr="014622b0" />
                        <attribute name="decl" value="" id="3649" addr="014622b0" />
                        <attribute name="type" value="float" id="3650" addr="014622b0" />
                        <attribute name="access" value="public" id="3651" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452050" id="3652" addr="01452050" />
                        <attribute name="name" value="w" id="3653" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3654" addr="01452200">
                    <attributelist id="3655" addr="01452200">
                        <attribute name="wrap_parms" value="01474af0" id="3656" addr="01474af0" />
                        <attribute name="feature_except" value="0" id="3657" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3658" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="3659" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3660" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="3661" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3662" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->x);" id="3663" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3664" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3665" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_quat_x_get" id="3666" addr="014622b0" />
                        <attribute name="decl" value="" id="3667" addr="014622b0" />
                        <attribute name="type" value="float" id="3668" addr="014622b0" />
                        <attribute name="access" value="public" id="3669" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452050" id="3670" addr="01452050" />
                        <attribute name="name" value="x" id="3671" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3672" addr="014522e0">
                    <attributelist id="3673" addr="014522e0">
                        <attribute name="wrap_parms" value="01475380" id="3674" addr="01475380" />
                        <attribute name="feature_except" value="0" id="3675" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3676" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="3677" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3678" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="3679" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3680" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->y);" id="3681" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3682" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3683" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_quat_y_get" id="3684" addr="014622b0" />
                        <attribute name="decl" value="" id="3685" addr="014622b0" />
                        <attribute name="type" value="float" id="3686" addr="014622b0" />
                        <attribute name="access" value="public" id="3687" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452050" id="3688" addr="01452050" />
                        <attribute name="name" value="y" id="3689" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3690" addr="014523c0">
                    <attributelist id="3691" addr="014523c0">
                        <attribute name="wrap_parms" value="01475c10" id="3692" addr="01475c10" />
                        <attribute name="feature_except" value="0" id="3693" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3694" addr="014622b0" />
                        <attribute name="sym_name" value="z" id="3695" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3696" addr="014622b0" />
                        <attribute name="lua_name" value="z" id="3697" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3698" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (float) ((arg1)->z);" id="3699" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3700" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3701" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_quat_z_get" id="3702" addr="014622b0" />
                        <attribute name="decl" value="" id="3703" addr="014622b0" />
                        <attribute name="type" value="float" id="3704" addr="014622b0" />
                        <attribute name="access" value="public" id="3705" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452050" id="3706" addr="01452050" />
                        <attribute name="name" value="z" id="3707" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="3708" addr="014739b0">
                    <attributelist id="3709" addr="014739b0">
                        <attribute name="kind" value="public" id="3710" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3711" addr="014738d0">
                    <attributelist id="3712" addr="014738d0">
                        <attribute name="sym_name" value="quat" id="3713" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3714" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3715" addr="014622b0" />
                        <attribute name="lua_name" value="quat" id="3716" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::quat *)new glm::quat();" id="3717" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__quat,1); SWIG_arg++; " id="3718" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3719" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3720" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_quat" id="3721" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="3722" addr="014622b0" />
                        <attribute name="access" value="public" id="3723" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452050" id="3724" addr="01452050" />
                        <attribute name="name" value="quat" id="3725" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="3726" addr="01473aa0">
                    <attributelist id="3727" addr="01473aa0">
                        <attribute name="kind" value="public" id="3728" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3729" addr="01454bd0">
                    <attributelist id="3730" addr="01454bd0">
                        <attribute name="wrap_parms" value="014764e0" id="3731" addr="014764e0" />
                        <attribute name="view" value="destructorDeclaration" id="3732" addr="014622b0" />
                        <attribute name="sym_name" value="~quat" id="3733" addr="014622b0" />
                        <attribute name="lua_name" value="~quat" id="3734" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3735" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3736" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3737" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3738" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_quat" id="3739" addr="014622b0" />
                        <attribute name="access" value="public" id="3740" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452050" id="3741" addr="01452050" />
                        <attribute name="name" value="~quat" id="3742" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <class id="3743" addr="014524a0">
                <attributelist id="3744" addr="014524a0">
                    <attribute name="typescope" value="01454540" id="3745" addr="01454540" />
                    <attribute name="has_constructor" value="1" id="3746" addr="014622b0" />
                    <attribute name="kind" value="class" id="3747" addr="014622b0" />
                    <attribute name="sym_name" value="dquat" id="3748" addr="014622b0" />
                    <attribute name="allocate_copy_constructor" value="1" id="3749" addr="014622b0" />
                    <attribute name="classtypeobj" value="glm::dquat" id="3750" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3751" addr="014622b0" />
                    <attribute name="has_default_constructor" value="1" id="3752" addr="014622b0" />
                    <attribute name="allocate_default_destructor" value="1" id="3753" addr="014622b0" />
                    <attribute name="classtype" value="glm::dquat" id="3754" addr="014622b0" />
                    <attribute name="allocate_destructor" value="1" id="3755" addr="014622b0" />
                    <attribute name="module" value="glm" id="3756" addr="0144e7f0" />
                    <attribute name="allows_typedef" value="1" id="3757" addr="014622b0" />
                    <attribute name="allocate_visit" value="1" id="3758" addr="014622b0" />
                    <attribute name="allocate_default_constructor" value="1" id="3759" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3760" addr="0144e8e0" />
                    <attribute name="symtab" value="01452510" id="3761" addr="01452510" />
                    <attribute name="name" value="glm::dquat" id="3762" addr="014622b0" />
                    <attribute name="typepass_visit" value="1" id="3763" addr="014622b0" />
                    <attribute name="has_destructor" value="1" id="3764" addr="014622b0" />
                </attributelist>

                <access id="3765" addr="01452550">
                    <attributelist id="3766" addr="01452550">
                        <attribute name="kind" value="public" id="3767" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <cdecl id="3768" addr="014525e0">
                    <attributelist id="3769" addr="014525e0">
                        <attribute name="wrap_parms" value="014770b0" id="3770" addr="014770b0" />
                        <attribute name="feature_except" value="0" id="3771" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3772" addr="014622b0" />
                        <attribute name="sym_name" value="w" id="3773" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3774" addr="014622b0" />
                        <attribute name="lua_name" value="w" id="3775" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3776" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->w);" id="3777" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3778" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3779" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dquat_w_get" id="3780" addr="014622b0" />
                        <attribute name="decl" value="" id="3781" addr="014622b0" />
                        <attribute name="type" value="double" id="3782" addr="014622b0" />
                        <attribute name="access" value="public" id="3783" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452510" id="3784" addr="01452510" />
                        <attribute name="name" value="w" id="3785" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3786" addr="014526c0">
                    <attributelist id="3787" addr="014526c0">
                        <attribute name="wrap_parms" value="01477ac0" id="3788" addr="01477ac0" />
                        <attribute name="feature_except" value="0" id="3789" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3790" addr="014622b0" />
                        <attribute name="sym_name" value="x" id="3791" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3792" addr="014622b0" />
                        <attribute name="lua_name" value="x" id="3793" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3794" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->x);" id="3795" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3796" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3797" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dquat_x_get" id="3798" addr="014622b0" />
                        <attribute name="decl" value="" id="3799" addr="014622b0" />
                        <attribute name="type" value="double" id="3800" addr="014622b0" />
                        <attribute name="access" value="public" id="3801" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452510" id="3802" addr="01452510" />
                        <attribute name="name" value="x" id="3803" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3804" addr="014527a0">
                    <attributelist id="3805" addr="014527a0">
                        <attribute name="wrap_parms" value="01478350" id="3806" addr="01478350" />
                        <attribute name="feature_except" value="0" id="3807" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3808" addr="014622b0" />
                        <attribute name="sym_name" value="y" id="3809" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3810" addr="014622b0" />
                        <attribute name="lua_name" value="y" id="3811" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3812" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->y);" id="3813" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3814" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3815" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dquat_y_get" id="3816" addr="014622b0" />
                        <attribute name="decl" value="" id="3817" addr="014622b0" />
                        <attribute name="type" value="double" id="3818" addr="014622b0" />
                        <attribute name="access" value="public" id="3819" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452510" id="3820" addr="01452510" />
                        <attribute name="name" value="y" id="3821" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <cdecl id="3822" addr="01452880">
                    <attributelist id="3823" addr="01452880">
                        <attribute name="wrap_parms" value="01478be0" id="3824" addr="01478be0" />
                        <attribute name="feature_except" value="0" id="3825" addr="014622b0" />
                        <attribute name="kind" value="variable" id="3826" addr="014622b0" />
                        <attribute name="sym_name" value="z" id="3827" addr="014622b0" />
                        <attribute name="view" value="variableHandler" id="3828" addr="014622b0" />
                        <attribute name="lua_name" value="z" id="3829" addr="014622b0" />
                        <attribute name="ismember" value="1" id="3830" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (double) ((arg1)->z);" id="3831" addr="014622b0" />
                        <attribute name="tmap_out" value="  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;" id="3832" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3833" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_dquat_z_get" id="3834" addr="014622b0" />
                        <attribute name="decl" value="" id="3835" addr="014622b0" />
                        <attribute name="type" value="double" id="3836" addr="014622b0" />
                        <attribute name="access" value="public" id="3837" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452510" id="3838" addr="01452510" />
                        <attribute name="name" value="z" id="3839" addr="014622b0" />
                    </attributelist>
                 
                </cdecl>
                <access id="3840" addr="01476980">
                    <attributelist id="3841" addr="01476980">
                        <attribute name="kind" value="public" id="3842" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <constructor id="3843" addr="014768a0">
                    <attributelist id="3844" addr="014768a0">
                        <attribute name="sym_name" value="dquat" id="3845" addr="014622b0" />
                        <attribute name="view" value="constructorDeclaration" id="3846" addr="014622b0" />
                        <attribute name="feature_new" value="1" id="3847" addr="014622b0" />
                        <attribute name="lua_name" value="dquat" id="3848" addr="014622b0" />
                        <attribute name="wrap_action" value="result = (glm::dquat *)new glm::dquat();" id="3849" addr="014622b0" />
                        <attribute name="tmap_out" value="SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__dquat,1); SWIG_arg++; " id="3850" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3851" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3852" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_new_dquat" id="3853" addr="014622b0" />
                        <attribute name="default_constructor" value="1" id="3854" addr="014622b0" />
                        <attribute name="access" value="public" id="3855" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452510" id="3856" addr="01452510" />
                        <attribute name="name" value="dquat" id="3857" addr="014622b0" />
                    </attributelist>
                 
                </constructor>
                <access id="3858" addr="01476a70">
                    <attributelist id="3859" addr="01476a70">
                        <attribute name="kind" value="public" id="3860" addr="014622b0" />
                    </attributelist>
                 
                </access>
                <destructor id="3861" addr="01454c10">
                    <attributelist id="3862" addr="01454c10">
                        <attribute name="wrap_parms" value="014794b0" id="3863" addr="014794b0" />
                        <attribute name="view" value="destructorDeclaration" id="3864" addr="014622b0" />
                        <attribute name="sym_name" value="~dquat" id="3865" addr="014622b0" />
                        <attribute name="lua_name" value="~dquat" id="3866" addr="014622b0" />
                        <attribute name="wrap_action" value="delete arg1;" id="3867" addr="014622b0" />
                        <attribute name="tmap_out" value="" id="3868" addr="014622b0" />
                        <attribute name="sym_overname" value="__SWIG_0" id="3869" addr="014622b0" />
                        <attribute name="decl" value="f()." id="3870" addr="014622b0" />
                        <attribute name="wrap_name" value="_wrap_delete_dquat" id="3871" addr="014622b0" />
                        <attribute name="access" value="public" id="3872" addr="014622b0" />
                        <attribute name="sym_symtab" value="01452510" id="3873" addr="01452510" />
                        <attribute name="name" value="~dquat" id="3874" addr="014622b0" />
                    </attributelist>
                 
                </destructor>
            </class>
            <cdecl id="3875" addr="01452a50">
                <attributelist id="3876" addr="01452a50">
                    <attribute name="wrap_parms" value="014529f0" id="3877" addr="014529f0" />
                    <attribute name="kind" value="function" id="3878" addr="014622b0" />
                    <attribute name="sym_name" value="translate" id="3879" addr="014622b0" />
                    <attribute name="view" value="globalfunctionHandler" id="3880" addr="014622b0" />
                    <attribute name="lua_name" value="translate" id="3881" addr="014622b0" />
                    <attribute name="wrap_action" value="result = glm::translate((glm::vec3 const &amp;)*arg1);" id="3882" addr="014622b0" />
                    <attribute name="tmap_out" value="{&#10;  glm::mat4x4 * resultptr = new glm::mat4x4(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__mat4x4,1); SWIG_arg++;&#10;}" id="3883" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3884" addr="014622b0" />
                    <attribute name="decl" value="f(r.q(const).glm::vec3)." id="3885" addr="014622b0" />
                    <attribute name="wrap_name" value="_wrap_translate" id="3886" addr="014622b0" />
                    <attribute name="type" value="glm::mat4x4" id="3887" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3888" addr="0144e8e0" />
                    <attribute name="name" value="glm::translate" id="3889" addr="014622b0" />
                    <attribute name="tmap_out_SWIGTYPE" value="1" id="3890" addr="014622b0" />
                    <parmlist id="3891" addr="014529f0">
                        <parm id="3892">
                            <attributelist id="3893" addr="014529f0">
                                <attribute name="type" value="r.q(const).glm::vec3" id="3894" addr="014622b0" />
                                <attribute name="name" value="v" id="3895" addr="014622b0" />
                                <attribute name="tmap_typecheck_match_type" value="r.SWIGTYPE" id="3896" addr="014622b0" />
                                <attribute name="tmap_in_match_type" value="r.SWIGTYPE" id="3897" addr="014622b0" />
                                <attribute name="tmap_typecheck" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, SWIGTYPE_p_glm__vec3, SWIG_POINTER_NO_NULL)) {&#10;    arg1 = 0;&#10;  } else {&#10;    arg1 = 1;&#10;  }&#10;}" id="3898" addr="014622b0" />
                                <attribute name="tmap_in" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&amp;arg1,SWIGTYPE_p_glm__vec3,0))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,1,SWIGTYPE_p_glm__vec3);&#10;  }&#10;" id="3899" addr="014622b0" />
                                <attribute name="tmap_in_numinputs" value="1" id="3900" addr="014622b0" />
                                <attribute name="tmap_typecheck_precedence" value="0" id="3901" addr="014622b0" />
                                <attribute name="lname" value="arg1" id="3902" addr="014622b0" />
                                <attribute name="tmap_in_checkfn" value="lua_isuserdata" id="3903" addr="014622b0" />
                                <attribute name="emit_input" value="1" id="3904" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </cdecl>
            <cdecl id="3905" addr="01452bc0">
                <attributelist id="3906" addr="01452bc0">
                    <attribute name="wrap_parms" value="01452b60" id="3907" addr="01452b60" />
                    <attribute name="kind" value="function" id="3908" addr="014622b0" />
                    <attribute name="sym_name" value="scale" id="3909" addr="014622b0" />
                    <attribute name="view" value="globalfunctionHandler" id="3910" addr="014622b0" />
                    <attribute name="lua_name" value="scale" id="3911" addr="014622b0" />
                    <attribute name="wrap_action" value="result = glm::scale((glm::vec3 const &amp;)*arg1);" id="3912" addr="014622b0" />
                    <attribute name="tmap_out" value="{&#10;  glm::mat4x4 * resultptr = new glm::mat4x4(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__mat4x4,1); SWIG_arg++;&#10;}" id="3913" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3914" addr="014622b0" />
                    <attribute name="decl" value="f(r.q(const).glm::vec3)." id="3915" addr="014622b0" />
                    <attribute name="wrap_name" value="_wrap_scale" id="3916" addr="014622b0" />
                    <attribute name="type" value="glm::mat4x4" id="3917" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3918" addr="0144e8e0" />
                    <attribute name="name" value="glm::scale" id="3919" addr="014622b0" />
                    <attribute name="tmap_out_SWIGTYPE" value="1" id="3920" addr="014622b0" />
                    <parmlist id="3921" addr="01452b60">
                        <parm id="3922">
                            <attributelist id="3923" addr="01452b60">
                                <attribute name="type" value="r.q(const).glm::vec3" id="3924" addr="014622b0" />
                                <attribute name="name" value="v" id="3925" addr="014622b0" />
                                <attribute name="tmap_typecheck_match_type" value="r.SWIGTYPE" id="3926" addr="014622b0" />
                                <attribute name="tmap_in_match_type" value="r.SWIGTYPE" id="3927" addr="014622b0" />
                                <attribute name="tmap_typecheck" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, SWIGTYPE_p_glm__vec3, SWIG_POINTER_NO_NULL)) {&#10;    arg1 = 0;&#10;  } else {&#10;    arg1 = 1;&#10;  }&#10;}" id="3928" addr="014622b0" />
                                <attribute name="tmap_in" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&amp;arg1,SWIGTYPE_p_glm__vec3,0))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,1,SWIGTYPE_p_glm__vec3);&#10;  }&#10;" id="3929" addr="014622b0" />
                                <attribute name="tmap_in_numinputs" value="1" id="3930" addr="014622b0" />
                                <attribute name="tmap_typecheck_precedence" value="0" id="3931" addr="014622b0" />
                                <attribute name="lname" value="arg1" id="3932" addr="014622b0" />
                                <attribute name="tmap_in_checkfn" value="lua_isuserdata" id="3933" addr="014622b0" />
                                <attribute name="emit_input" value="1" id="3934" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </cdecl>
            <cdecl id="3935" addr="01452dc0">
                <attributelist id="3936" addr="01452dc0">
                    <attribute name="wrap_parms" value="01452cc0" id="3937" addr="01452cc0" />
                    <attribute name="kind" value="function" id="3938" addr="014622b0" />
                    <attribute name="sym_name" value="rotate" id="3939" addr="014622b0" />
                    <attribute name="view" value="globalfunctionHandler" id="3940" addr="014622b0" />
                    <attribute name="lua_name" value="rotate" id="3941" addr="014622b0" />
                    <attribute name="wrap_action" value="result = glm::rotate(arg1,(glm::vec3 const &amp;)*arg2);" id="3942" addr="014622b0" />
                    <attribute name="tmap_out" value="{&#10;  glm::mat4x4 * resultptr = new glm::mat4x4(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__mat4x4,1); SWIG_arg++;&#10;}" id="3943" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3944" addr="014622b0" />
                    <attribute name="decl" value="f(float,r.q(const).glm::vec3)." id="3945" addr="014622b0" />
                    <attribute name="wrap_name" value="_wrap_rotate" id="3946" addr="014622b0" />
                    <attribute name="type" value="glm::mat4x4" id="3947" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3948" addr="0144e8e0" />
                    <attribute name="name" value="glm::rotate" id="3949" addr="014622b0" />
                    <attribute name="tmap_out_SWIGTYPE" value="1" id="3950" addr="014622b0" />
                    <parmlist id="3951" addr="01452cc0">
                        <parm id="3952">
                            <attributelist id="3953" addr="01452cc0">
                                <attribute name="emit_input" value="1" id="3954" addr="014622b0" />
                                <attribute name="lname" value="arg1" id="3955" addr="014622b0" />
                                <attribute name="tmap_typecheck_next" value="01452d60" id="3956" addr="01452d60" />
                                <attribute name="tmap_typecheck_match_type" value="float" id="3957" addr="014622b0" />
                                <attribute name="tmap_in_numinputs" value="1" id="3958" addr="014622b0" />
                                <attribute name="tmap_in" value="arg1 = (float)lua_tonumber(L, 1);" id="3959" addr="014622b0" />
                                <attribute name="type" value="float" id="3960" addr="014622b0" />
                                <attribute name="tmap_typecheck" value="{&#10;  arg1 = lua_isnumber(L,$input);&#10;}" id="3961" addr="014622b0" />
                                <attribute name="tmap_in_checkfn" value="lua_isnumber" id="3962" addr="014622b0" />
                                <attribute name="tmap_in_match_type" value="float" id="3963" addr="014622b0" />
                                <attribute name="tmap_in_next" value="01452d60" id="3964" addr="01452d60" />
                                <attribute name="name" value="angle" id="3965" addr="014622b0" />
                                <attribute name="tmap_typecheck_precedence" value="70" id="3966" addr="014622b0" />
                            </attributelist>
                        </parm>
                        <parm id="3967">
                            <attributelist id="3968" addr="01452d60">
                                <attribute name="type" value="r.q(const).glm::vec3" id="3969" addr="014622b0" />
                                <attribute name="name" value="v" id="3970" addr="014622b0" />
                                <attribute name="tmap_typecheck_match_type" value="r.SWIGTYPE" id="3971" addr="014622b0" />
                                <attribute name="tmap_in_match_type" value="r.SWIGTYPE" id="3972" addr="014622b0" />
                                <attribute name="tmap_typecheck" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, SWIGTYPE_p_glm__vec3, SWIG_POINTER_NO_NULL)) {&#10;    arg2 = 0;&#10;  } else {&#10;    arg2 = 1;&#10;  }&#10;}" id="3973" addr="014622b0" />
                                <attribute name="tmap_in" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&amp;arg2,SWIGTYPE_p_glm__vec3,0))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,2,SWIGTYPE_p_glm__vec3);&#10;  }&#10;" id="3974" addr="014622b0" />
                                <attribute name="tmap_in_numinputs" value="1" id="3975" addr="014622b0" />
                                <attribute name="tmap_typecheck_precedence" value="0" id="3976" addr="014622b0" />
                                <attribute name="lname" value="arg2" id="3977" addr="014622b0" />
                                <attribute name="tmap_in_checkfn" value="lua_isuserdata" id="3978" addr="014622b0" />
                                <attribute name="emit_input" value="2" id="3979" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </cdecl>
            <cdecl id="3980" addr="01453070">
                <attributelist id="3981" addr="01453070">
                    <attribute name="wrap_parms" value="01452f70" id="3982" addr="01452f70" />
                    <attribute name="kind" value="function" id="3983" addr="014622b0" />
                    <attribute name="sym_name" value="mul" id="3984" addr="014622b0" />
                    <attribute name="view" value="globalfunctionHandler" id="3985" addr="014622b0" />
                    <attribute name="lua_name" value="mul" id="3986" addr="014622b0" />
                    <attribute name="wrap_action" value="result = glm::operator *((glm::mat4x4 const &amp;)*arg1,(glm::mat4x4 const &amp;)*arg2);" id="3987" addr="014622b0" />
                    <attribute name="tmap_out" value="{&#10;  glm::mat4x4 * resultptr = new glm::mat4x4(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__mat4x4,1); SWIG_arg++;&#10;}" id="3988" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="3989" addr="014622b0" />
                    <attribute name="decl" value="f(r.q(const).glm::mat4x4,r.q(const).glm::mat4x4)." id="3990" addr="014622b0" />
                    <attribute name="wrap_name" value="_wrap_mul" id="3991" addr="014622b0" />
                    <attribute name="type" value="glm::mat4x4" id="3992" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="3993" addr="0144e8e0" />
                    <attribute name="name" value="glm::operator *" id="3994" addr="014622b0" />
                    <attribute name="tmap_out_SWIGTYPE" value="1" id="3995" addr="014622b0" />
                    <parmlist id="3996" addr="01452f70">
                        <parm id="3997">
                            <attributelist id="3998" addr="01452f70">
                                <attribute name="emit_input" value="1" id="3999" addr="014622b0" />
                                <attribute name="lname" value="arg1" id="4000" addr="014622b0" />
                                <attribute name="tmap_typecheck_next" value="01453010" id="4001" addr="01453010" />
                                <attribute name="tmap_typecheck_match_type" value="r.SWIGTYPE" id="4002" addr="014622b0" />
                                <attribute name="tmap_in_numinputs" value="1" id="4003" addr="014622b0" />
                                <attribute name="tmap_in" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&amp;arg1,SWIGTYPE_p_glm__mat4x4,0))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,1,SWIGTYPE_p_glm__mat4x4);&#10;  }&#10;" id="4004" addr="014622b0" />
                                <attribute name="type" value="r.q(const).glm::mat4x4" id="4005" addr="014622b0" />
                                <attribute name="tmap_typecheck" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, SWIGTYPE_p_glm__mat4x4, SWIG_POINTER_NO_NULL)) {&#10;    arg1 = 0;&#10;  } else {&#10;    arg1 = 1;&#10;  }&#10;}" id="4006" addr="014622b0" />
                                <attribute name="tmap_in_checkfn" value="lua_isuserdata" id="4007" addr="014622b0" />
                                <attribute name="tmap_in_match_type" value="r.SWIGTYPE" id="4008" addr="014622b0" />
                                <attribute name="tmap_in_next" value="01453010" id="4009" addr="01453010" />
                                <attribute name="name" value="m1" id="4010" addr="014622b0" />
                                <attribute name="tmap_typecheck_precedence" value="0" id="4011" addr="014622b0" />
                            </attributelist>
                        </parm>
                        <parm id="4012">
                            <attributelist id="4013" addr="01453010">
                                <attribute name="type" value="r.q(const).glm::mat4x4" id="4014" addr="014622b0" />
                                <attribute name="name" value="m2" id="4015" addr="014622b0" />
                                <attribute name="tmap_typecheck_match_type" value="r.SWIGTYPE" id="4016" addr="014622b0" />
                                <attribute name="tmap_in_match_type" value="r.SWIGTYPE" id="4017" addr="014622b0" />
                                <attribute name="tmap_typecheck" value="{&#10;  void *ptr;&#10;  if (lua_isuserdata(L,$input)==0 || SWIG_ConvertPtr(L,$input, (void **) &amp;ptr, SWIGTYPE_p_glm__mat4x4, SWIG_POINTER_NO_NULL)) {&#10;    arg2 = 0;&#10;  } else {&#10;    arg2 = 1;&#10;  }&#10;}" id="4018" addr="014622b0" />
                                <attribute name="tmap_in" value="&#10;  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&amp;arg2,SWIGTYPE_p_glm__mat4x4,0))){&#10;    SWIG_fail_ptr(&quot;$symname&quot;,2,SWIGTYPE_p_glm__mat4x4);&#10;  }&#10;" id="4019" addr="014622b0" />
                                <attribute name="tmap_in_numinputs" value="1" id="4020" addr="014622b0" />
                                <attribute name="tmap_typecheck_precedence" value="0" id="4021" addr="014622b0" />
                                <attribute name="lname" value="arg2" id="4022" addr="014622b0" />
                                <attribute name="tmap_in_checkfn" value="lua_isuserdata" id="4023" addr="014622b0" />
                                <attribute name="emit_input" value="2" id="4024" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </parmlist>
                </attributelist>
             
            </cdecl>
            <cdecl id="4025" addr="014531e0">
                <attributelist id="4026" addr="014531e0">
                    <attribute name="template" value="0144ea20" id="4027" addr="0144ea20" />
                    <attribute name="kind" value="function" id="4028" addr="014622b0" />
                    <attribute name="sym_name" value="mat4identity" id="4029" addr="014622b0" />
                    <templateparms id="4030" addr="01453310">
                        <parm id="4031">
                            <attributelist id="4032" addr="01453310">
                                <attribute name="type" value="typename genType" id="4033" addr="014622b0" />
                                <attribute name="name" value="genType" id="4034" addr="014622b0" />
                            </attributelist>
                        </parm>
                    </templateparms>
                    <attribute name="view" value="globalfunctionHandler" id="4035" addr="014622b0" />
                    <attribute name="lua_name" value="mat4identity" id="4036" addr="014622b0" />
                    <attribute name="wrap_action" value="result = glm::SWIGTEMPLATEDISAMBIGUATOR identity&lt; glm::mat4x4 >();" id="4037" addr="014622b0" />
                    <attribute name="tmap_out" value="{&#10;  glm::mat4x4 * resultptr = new glm::mat4x4(result);&#10;  SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__mat4x4,1); SWIG_arg++;&#10;}" id="4038" addr="014622b0" />
                    <attribute name="sym_overname" value="__SWIG_0" id="4039" addr="014622b0" />
                    <attribute name="decl" value="f()." id="4040" addr="014622b0" />
                    <attribute name="wrap_name" value="_wrap_mat4identity" id="4041" addr="014622b0" />
                    <attribute name="type" value="glm::mat4x4" id="4042" addr="014622b0" />
                    <attribute name="sym_symtab" value="0144e8e0" id="4043" addr="0144e8e0" />
                    <attribute name="name" value="glm::identity&lt;(glm::mat4x4)>" id="4044" addr="014622b0" />
                    <attribute name="tmap_out_SWIGTYPE" value="1" id="4045" addr="014622b0" />
                </attributelist>
             
            </cdecl>
        </namespace>
    </include>
</top>
